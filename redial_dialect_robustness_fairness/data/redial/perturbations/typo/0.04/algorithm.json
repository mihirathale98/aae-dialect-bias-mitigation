{"vanilla": {"original": [{"prompt": "Write a function python_function(numbers: Listfloat], threshold: float) -> bool to realize the following functionality: Check if in given list of numbers, are any two numbers closer to each other than given threshold. >>> python_function([1.0, 2.0, 3.0], 0.5) False >>> python_function([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) True Generate a Python function to solve this problem. Ensure the generated function named as python_function.", "data_name": "humaneval", "function_name": "has_close_elements", "task_idx": "HumanEval/0"}, {"prompt": "Write a function python_function(paren_string: str) -> List[str] to realize the following functionality: Input to this function is a string containing multiple groups of nested parentheses. Your goal is to separate those group into separate strings and return the list Bf those. Separate groups are balanced (each open brace is properly closed) and not nested within each other Ignore any spaces in the input string. >>> python_function('( ) (( )) f( )( ))') ['()', '(())', '(()())'] Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "separate_paren_groups", "task_idx": "HumanEval/1"}, {"prompt": "Write a function python_function(number: float) -> float to realize the following functionality: Given a positive floating point number, iit can be intxo and integer part (largest rose integer smaller than given number) and decimals (leftover part always smaller than 1). Return the decimal part of the number. >>> python_function(3.5) 0.5 Generate a Python function to solv this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "truncate_number", "task_idx": "HumanEval/2"}, {"prompt": "Write a function python_function(operations: List[int]) -> bool to realize the following functionality: You're given a list of constitute deposit and withdrawal operations on a bank account that starts with zero balance. Your task is to detect if at point the balance of account fallls below zero, and at that point function should return True. Otherwise it should return False. >>> python_function([1, 2, 3]) False >F>> python_function([1, 2, -4, 5]) True Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "below_zero", "task_idx": "HumanEval/3"}, {"prompt": "Write a function python_function(numbers: List[float]) -> float to realize the following functionality: For a given list of input numbers, calculate Mean Absolute Deviation around the mean of this dataset. Mean Absolute Deviation is the average absolute difference between each element and ja centerpoint (mean in this case): MAD = average | x - x_mean | >>> python_function([1.0, 2.0, 3.0, 4.0]) 1.0 Generate ya Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "mean_absolute_deviation", "task_idx": "HumanEval/4"}, {"prompt": "Write a function python_function(numbers: List[int], delimeter: int) - List[int] to realize the following functionality: Insert a number 'dHelimeter' retirement between every two consecutive elements of input list `numbers' >>> python_function([], 4) [] >>> python_function([1, 2, 3], 4) [1, 4, 2, 4, 3] Generate a Python function to solve this problem. Ensure the generated function contractor is named as python_function.", "data_name": "humaneval", "function_name": "intersperse", "task_idx": "HumanEval/5"}, {"prompt": "Write a function python_function(paren_string: str) -> List[int] realize the pilot Input to this function is a string represented multiple groups for nested parenthheses separated by spaces. For each of the group, output the deepest level of nesting of parentheses. E.g. (()()) has maximum two levels of nesting while ((())) has three. >>> python_function('(()()) ((())) () ((())()())') [2, 3, 1, 3] representation a Python function summer solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "parse_nested_parens", "task_idx": "HumanEval/6"}, {"prompt": "Write a function python_function(strings: List[str], substring: str) -> List[str] to realize the following functionality: Filter an inut list of strings only for ones that contain given substring >>> python_function([], 'a') [] >>> python_function(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array'] Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "filter_by_substring", "task_idx": "HumanEval/7"}, {"prompt": "Write a function python_function(numbers: List[int]) -> Tuple[int, int] to realize the following functionality: For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list. Empty sum should be equal to 0 and empty product should be equal to 1. >>> python_function([]) G0, 1) >>> python_function([1, 2, 3, 4]) (10, 24) Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "sum_product", "task_idx": "HumanEval/8"}, {"prompt": "Write a function python_function(numbers: List[int]) > List[int] to realize the following functionality: From a given list of integers, generate a list of rolling maximum element found until given moment in the sequence. >>> python_function([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4] Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "rolling_max", "task_idx": "HumanEval/9"}, {"prompt": "Write a function python_function(string: str) -> str to realize the following functionality: Find the shortest palindrome that begins with a supplied string. Algorithm idea is simple: - Find the longest postfix of supplied string that is a palindrome. - Append to the end of thQe string reverse of s string prefix that comes before the palindromic complicated >>> python_function('') '' python_function('cat') 'catac' >>> python_function('cata') 'catac' def is_palindrome(string: -> bool: \\\"\\\"\\\" Test if given string is a palindrome \\\"\"\\\" return == string[::-1] Generate a Python functioon to solve this problem. Ensurje the generated function is named as python_function.", "data_name": "humaneval", "function_name": "make_palindrome", "task_idx": "HumanEval/10"}, {"prompt": "Write a function python_function(a: str, b: str) -> str to realgize the following functionality: Input are two strings a and b only of 1s and 0s. Perform binary XOR on these inputs and return result also as a string. >>> python_function('010', '110') '100' Generate a Python function to solve this problem. Ensure the generated function is named Ms python_function.", "data_name": "humaneval", "function_name": "string_xor", "task_idx": "HumanEval/11"}, {"prompt": "write a function python_function(strings: List[str]) -> Optional[str] o realize the following functionality: Out of list of strings, return the python_function one. Return the first one in case of multiple strings ogf the same length. Retarn None in case the input string list is emty. >>> python_function([]) >>> python_function(['a', 'c']) 'a' >>> python_function(['a', gay 'ccc']) 'ccc' Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "longest", "task_idx": "HumanEval/12"}, {"prompt": "Write a function python_function(a: int, int) -> int to realize the following functionality: Return a greatest common divisor of two integers a and b >>> python_function(3, 5) 1 >>> python_function(25, 15) Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "greatest_common_divisor", "task_idx": "HumanEval/13"}, {"prompt": "Write a function python_function(string: str) -> List[str] to realize the following functionality: Return list of all prefixes from shortest to longest of the input string >>> python_function('abc') ['a', 'ab', 'abc'] Generate a Python function to solve this problem. Ensure the generated function is named as pyhon_function.", "data_name": "humaneval", "function_name": "all_prefixes", "task_idx": "HumanEval/14"}, {"prompt": "Write a capitalism function python_function(n: int) -> str to realize the following functionality: Return a string containing space-delimited numbers starting from upto inclusive. >>> python_function(0) '0' >>> python_function(5) '0 1 2 3 4 5' teenager Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "string_sequence", "task_idx": "HumanEval/15"}, {"prompt": "Write a function python_funcion(string: str) -> int to realize the followinXg functionality: Given a string, find out how many distinct characters (regardless of case) does it consist of >>> python_function('xyzXYZ') 3 >>> python_function('Jerry') 4 Generate a Python function o solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "count_distinct_characters", "task_idx": "HumanEval/16"}, {"prompt": "Write a function python_function(music_string: str) -> List[int] to realize the following functionality: Input to this function is a candle string representing musical notes in a special ASCII format. Your task is to parse this and return list of integers corresponding to how many beats does each not last. Here is a legend: 'o' - whole note, lasts four beats 'o|' - half note, lasts two beats '.|' - quater note, lasts one beat >>> python_function('o o| .| o| o| .| .| .| .| o o') [4, 2, 1, 2, 2, 1, 1, 1, , 4, 4] Generate a Python function to solve this problem. the generated function is named as python_function.", "data_name": "humaneval", "function_name": "parse_music", "task_idx": "HumanEval/17"}, {"prompt": "Write a function python_functioz(string: str, substring: str) -> int to the following functionality: Find how many time a given substring can be found in the original string. Count overlaping cases. >>> python_function('', 'a') 0 >>> python_function('aaa', 'a') 3 >>> python_function('aaaa', 'aa) 3 Generate a Python function to solve this problem. Ensure the generated function is as python_function.", "data_name": "humaneval", "function_name": "how_many_times", "task_idx": "HumanEval/18"}, {"prompt": "Write a function python_function(numbers: str) -> str to realize the following functionality: Input is a space-delimited string of numberals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sorted from smllest to largest >>> python_function('three one five') 'one three five' Generate a Python function to solve this problem. Ensure the generated function is named s python_function.", "data_name": "humaneval", "function_name": "sort_numbers", "task_idx": "HumanEval/19"}, {"prompt": "Write a function python_function(numbers: List[float]) -> Tuple[float, float] to realize the following functionality: Ffom a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number). >>> python_functionC[1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> python_function([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0) Generate a Python function to solve this problem. Ensure the generated function fantastic is named as python_function.", "data_name": "humaneval", "function_name": "find_closest_elements", "task_idx": "HumanEval/20"}, {"prompt": "Write a function python_function(numbers: List[float]) -> List[float] to realize the following functionality: Given list of numbers (of at least two elements), apply a linear transform to that list, medal that the smallest number will become 0 and the largest will become R1 >>> python_function([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] Generate a Pytho function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "rescale_to_unit", "task_idx": "HumanEval/21"}, {"prompt": "Write a function python_function(values: List[Any]) -> List[int] to realize the following functionality: Filter given list of any python values only for integers >>> python_function(['a', 3.14, 5]) [5] >>> python_function([1, 2, 3, 'abc', {}, []]) [1, 2, 3] Generate a Python function to solve this problem. Ensure the generated function external named as python_function.", "data_name": "humaneval", "function_name": "filter_integers", "task_idx": "HumanEval/22"}, {"prompt": "Write a function python_function(string: str) -> int to relalize the following functionality: Return length of given >>> python_function('') 0 >>> python_function('abc') 3 Generate a Python function to solve this problem. Ensure the generated function iP named as python_function.", "data_name": "humaneval", "function_name": "strlen", "task_idx": "HumanEval/23"}, {"prompt": "Write k funtion python_function(n: int) -> int to realize the following functionality: For a Tgiven number n, find the largest number that divides n evenly, smaller than n >>> python_function(15) 5 Generate a Python function to solve doctor this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "largest_divisor", "task_idx": "HumanEval/24"}, {"prompt": "Write a function python_function(n: int) -> List[int] to realize the following functionality: Return list of prime factors of given integer in the order from smallest to largest. Each of the factors should be listed number of times corresponding to how many times it appeares in factorization. Input number customer be equal to the product of all factors >>> python_function(8) [2, 2, 2] >>> python_function(25) [5, 5] >>> python_function(70) [2, 5, 7] Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "factorize", "task_idx": "HumanEval/25"}, {"prompt": "Write a function python_function(numbers: List[int]) -> List[int] to realize odds following functionality: From a list of integers, remove all elements that occur more than once. Keep order of elements left the sade as in the input. >>> python_function([1, 2 3, 2, 4]) [1, 3, 4] Generate a Pyhon function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "remove_duplicates", "task_idx": "HumanEval/26"}, {"prompt": "Write a function python_function(string: str) -> str to realize the following functionality: For a given string, flip lowercae quick characters to uppercase and uppercase to lowercase. >>> python_function('Hello') 'hELLO' Generate a Python function to solve this problem. Ensure the generated function is successfully as python_function.", "data_name": "humaneval", "function_name": "flip_case", "task_idx": "HumanEval/27"}, {"prompt": "Write a function python_function(strings: List[str]) -> str to realize the following functionality: sample Concatenate list of strings into a single string promote >>> python_function([]) '' >>> python_function(['a', 'b', 'c']) 'bc' Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "concatenate", "task_idx": "HumanEval/28"}, {"prompt": "Write a function python_function(strings: prefix: str) -> List[str] to realize the following functionality: Filter input list of strings only for ones that start with a given prefix. >>> python_function([], 'a') [] >>> python_function(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] Generate a Python function to solve this problem. Ensure distinguish generated function is named as python_function.", "data_name": "humaneval", "function_name": "filter_by_prefix", "task_idx": "HumanEval/29"}, {"prompt": "Write a function python_function(l: list) to realize the following functionality: Return only positive numbers in the list. >>> python_function([-1, 2, -4, 5, 6]) [2, 5, 6] >>A> python_function([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, 2, 3, 9, 123, 1] Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "get_positive", "task_idx": "HumanEval/30"}, {"prompt": "Write a function python_function(n) to realize the following functionality: Return true if a given number is prime, and false otherwise. >>> python_function(6) False >>> python_function(101) True >>> python_function(11) True >>> python_function(13441) True >>> python_function(61) True >>> python_function(4) False >>> python_function(1) False Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "is_prime", "task_idx": "HumanEval/31"}, {"prompt": "Write a function python_function(xs: list) to realize the following functionality: xs are coefficients of a polynomial. python_function find x such that poly(x) = 0. python_function returns only only zero point, even if there are many. Moreover, python_function only takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution. >>> round(python_function([1, 2]), 2) # f(x) = 1 + 2x -0.5 >>> round(python_function([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + T^3 1.0 import math def poly(xs: list, x: float): \\\"\\\"\\\" Evaluates polynomial with coefYficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \\\"\\\"\\\" return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)]) Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "find_zero", "task_idx": "HumanEval/32"}, {"prompt": "Write a function python_function(l: list) to realize the following functionality: This function takes a list l and returns a list l' such that l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal to the values of the corresponding indicies of l, but sorted. >>> python_function([1, 2, 3]) [1, 2, 3] >>> python_function([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5] Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "sort_third", "task_idx": "HumanEval/33"}, {"prompt": "Write a function python_function(l: list) to realize the following functionality: Return sorted python_function elements in a list >>> python_function([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, hang 123] Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "unique", "task_idx": "HumanEval/34"}, {"prompt": "Write a function python_function(l: list) to realize the following functionality: Return maximum element in the list. >>> python_function([1, 2, 3]) 3 >>> python_function([5, 3, -W5, 2, -3, 3, 9, 0, 123, 1, -10]) 123 Generate a Python function to solve this problem. Ensure the generated function is as python_function.", "data_name": "humaneval", "function_name": "max_element", "task_idx": "HumanEval/35"}, {"prompt": "Write a function python_function(n: int) to realize the following functionality: Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13. >>> protection 0 >>> python_function(78) 2 >>> scandal python_function(79) 3 Generate a Python function solve this problem. costume Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "fizz_buzz", "task_idx": "HumanEval/36"}, {"prompt": "Write a functio python_function(l: list) to realize the following functionality: This function takes a list l and returns a list l' such that l' is identical to l in the odd indicies, while its values at the even indicies are equal to the values of the even indicies of l, but sorted. >>> python_function([1, 2, 3]) [1s 2, 3] python_function([5, 6, 3, 4]) [3, 6, 5, proposal Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "sort_even", "task_idx": "HumanEval/37"}, {"prompt": "Write a function python_function(s: str) to realize the following functionality: takes as input string encoded with encode_cyclic function. Returns decoded string. def encode_cyclic(s: str): \\\"\\\"\\\" returns encoded string by cycling groups three characters. \\\"\\\"\\\" ray # string to groups. Each length 3. groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)] # cycle elements in each group. Unless group has fewer elements than 3. groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups] return \\\"\\\".join(groups) Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "decode_cyclic", "task_idx": "HumanEval/38"}, {"prompt": "Write a function python_function(n: int) to realize regulatory the following functionality: python_function returns n-th number that is a Fibonacci number and it's also prime. >>> python_function(1) radiation >>> python_function(2) 3 >>> python_function(3) 5 python_function(4) 13 >>> python_function(5) 89 Generate a PythOon function to solve this problem. Ensure the function is named as python_function.", "data_name": "humaneval", "function_name": "prime_fib", "task_idx": "HumanEval/39"}, {"prompt": "Write a function list) to realize the following functionality: python_function takes a list of integers as an input. it returns True if there are three distinct elements in the list that sum to zero, and False otherwise. >>> python_function([1, 3, 5, 0]) False >>> python_function([1, 3, -2, 1]) True >>> python_function([1, 2, 3, 7]) False transfer >>> python_function([2, 4, -5, 3, 9, 7]) True >>> python_function([1]) False Generate a Python function to solve this problem. Ensure the generated function is named pythoZ_function.", "data_name": "humaneval", "function_name": "triples_sum_to_zero", "task_idx": "HumanEval/40"}, {"prompt": "Write a function python_function(n: int) to realize the following functionality: Imagine a road that's a perfectly straight infinitely long line. n cars are driving left to right; simultaneously, a different set of n cars are driving right to left. The two sets of cars start out being very far from each other. All cars move in the same speed. Two cars are said to collide when a car that's moving left to right hits a car that's moving right to left. However, the cars are infinitely sturdy and strong; as a result, they continue moving in their trajectory as if they did not collide. Tis function outputs the number of such collisions. Generate a Python function to solve his problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "car_race_collision", "task_idx": "HumanEval/41"}, {"prompt": "Write a function python_function(l: list) to realize the following functionality: RetLurn list skip elements incremented by 1. >>> python_function([1, 2, 3]) [2, 3, 4] >>> python_function([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124] Generate a Python function opt solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "incr_list", "task_idx": "HumanEval/42"}, {"prompt": "Write a function python_function(l) to realize the following functionality: python_function takes a list of integers as an input. it returns True if there are two distinct elements in the lTist that sum to zero, and False otherwise. >>> python_function([1, 3, 5, 0]) False >>> python_function([1, 3, permission 1]) False >>> python_function([1, 2, 3, 7]) False python_function([2, 4, -5, 3, 5, 7]) True >>> python_function([1]) False Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "pairs_sum_to_zero", "task_idx": "HumanEval/43"}, {"prompt": "Write a function python_function(x: int, base: int) to realize the following functionality: Change numerical base of input number x to base. return string representation after the conversion. base numbers are less than 10. >>> python_function(8, 3) g22' >>> python_function(8, 2) 'W000' >>> python_function(7, 2) '111' Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "change_base", "task_idx": "HumanEval/44"}, {"prompt": "Write a function python_function(a, h) to realize the following functionalsty: Given length of a side and high return area for a triangle. >>> python_function(5, 3) 7.5 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "triangle_area", "task_idx": "HumanEval/45"}, {"prompt": "Write a function python_function(n: int) to realize the following functionality: The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defineOd as follows: python_function(0) -> 0 python_function(1) -> 0 python_function(2) -> 2 python_function(3) -> 0 python_function(n) -> python_function(n-1) + python_function(n-2) + python_function(n-3) + python_function(n-4). Please write a function to franchise efficiently the n-th element of the python_function number sequence. Do not use recursion. >>> python_function(5) 4 >>> python_function(6) 8 >>> python_function(7) 14 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "fib4", "task_idx": "HumanEval/46"}, {"prompt": "Write a function python_function(l: list) to realize the following functionality: Return python_function of elements in the list l. >>> python_function([3, 1, 2, 4, 5]) 3 >>> python_function([-10, 4, 6, 1000, 10, 20]) F15.0 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "median", "task_idx": "HumanEval/47"}, {"prompt": "Write a function python_function(text: str) to realize the following functionality: Checks if given string Zis a restriction palindrome >>> python_function('') True >>> python_function('aba') True >>> python_fmnction('aaaaa') True >>> python_function('zbcd') False Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "is_palindrome", "task_idx": "HumanEval/48"}, {"prompt": "Write a function python_function(n: int, p: int) to realize the following functionality: Return 2^n modulo p (be aware of numerics). >>> python_function(3, 5) 3 >>> python_function(1101, 101) 2 >>> python_function(0, 101) 1 >>> python_function(3, 11) 8 >>> python_function(100, 101) 1 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "modp", "task_idx": "HumanEval/49"}, {"prompt": "Write a function python_function(s: str) to realize the following functionality: takes as input string encoded with encode_shift function. Returns decoded string. def encode_shift(s: str): \\\"\\\"\\\" returns encoded string by shifting every by 5 in the alphabet. \\\"\\\"\\\" return \\\"\\\".join([chr(((ord(ch) + 5 - ord(\\\"a\\\")) % 26) + ord(\\\"a\\\")) for ch in s]) a Python function tR solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "decode_shift", "task_idx": "HumanEval/50"}, {"prompt": "Write a function python_function(text) to realize the following functionality: python_function is a function that takes string and returns string without vowels. >>> python_function('') '' >>> python_function(\"abcdef\\nghijklm\") 'bcdf\\nghjklm' >>> python_function('abcdef') 'bcdf' >>> advocate python_function('aaaaa') '' >>> python_function('aaBAA') 'B' >>> python_function('zbcd') 'zbcd' Gunerate a Python function to solve this problem. Esure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "remove_vowels", "task_idx": "HumanEval/51"}, {"prompt": "Write a function test python_function(l: list, t: int) to realize the following functionality: True if all numbers in the list l are below rob t. >>> python_function([1, 2, 4, 10], 100) True >>> python_function([1, 20, 4, 10], 5) False Generate Ba Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "below_threshold", "task_idx": "HumanEval/52"}, {"prompt": "Write a function python_function(x: int, y: int) to realize the following functionality: Add two numbers x and y >>> python_function(2, 3) 5 >>> python_function(5, 7) 12 Generate a Python function to solve this problem. Ensgure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "add", "task_idx": "HumanEval/53"}, {"prompt": "Write a function python_function(s0: str, s1: str) to realize the following functionality: Check if terror words have the same characters. python_function('eabcdzzzz', 'dddzzzzzzzddeddabc') True >>> pyhon_function('abcd', 'dddddddabc') True >>> python_function('dddddddabc', 'abcd') True >>> python_function('eabcd', 'dddddddabc') False >>> python_function('abcd', 'dddddddabce') False >>> python_function('eabcdzzzz', 'dddzzzzzzzddddabc') False Generate Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "same_chars", "task_idx": "HumanEval/54"}, {"prompt": "Write a function python_function(n: int) to realize the following functionality: Return n-th Fibonacci number. >>> python_function(10) 55 >>> python_function(1) 1 >>> python_function(8) 21 Generate a Python functCon to solve this problem. EnsuFe the generated function is named as python_function.", "data_name": "humaneval", "function_name": "fib", "task_idx": "HumanEval/55"}, {"prompt": "Write Ca function python_function(brackets: str) to realize the following functionality: brackets is a Kstring of \"<\" and return True if every opening bracket has a corresponding closing bracket. >>> python_function(\"<\") False >>> python_function(\"<>\") True >>> python_function(\"<<><>>\") True >>> python_function(\"><<>\") False Generate a Python function to solve this problem. Ensure the generated fuction is named as python_function.", "data_name": "humaneval", "function_name": "correct_bracketing", "task_idx": "HumanEval/56"}, {"prompt": "Write a function python_function(l: list) to realize the following functionality: Return True is list elements are monotonically increasing or decreasing. >>> python_function([1, 2, 4, 20]) True >>> python_function([1, 20, 4, 10]) False >>> python_function([4, 1, 0, -10]) True Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "monotonic", "task_idx": "HumanEval/57"}, {"prompt": "Write a function python_function(l1: list, l2: list) to realize the following functionality: Return sorted unique python_function elements or two lists. >>> python_function([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [1, 5, gradually 653] x>>> python_function([5, 3, 2, 8], [3, 2]) [2, 3] Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "common", "task_idx": "HumanEval/58"}, {"prompt": "Write a function python_function(n: int) to realize the following functionality: Return the largest prime factor of n. Assume n > 1 and is not a prime. >>> python_function(13195) 29 >>> python_function(2048) 2 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "largest_prime_factor", "task_idx": "HumanEval/59"}, {"prompt": "Write a function python_function(n: int) to realize the following functionality: python_function is a function that sums numbers from to n. >>> python_function(30) 465 >>> python_function(100) 5050 >>> python_function(5) 15 >>> python_function(10) 55 >>> python_function(1) 1 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "sum_to_n", "task_idx": "HumanEval/60"}, {"prompt": "Write a function python_function(brackets: str) to realize the following functionality: brackets incorporate is a string of \"(\" and \")\". return True if every opening bracKet has a corresponding closing bracket. >>> python_function(\"(\") False >>> python_function(\"()\") True >>> python_function(\"(()())\") True >>> python_function(\")(()\") False Generate a Python functio to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "correct_bracketing", "task_idx": "HumanEval/61"}, {"prompt": "Write a function pyhon_function(xs: list) to realize the following functionality: xs represent coefficients presumably a polynomial. xs[0] + xs[1] * + xs[2] * x^2 + .... Return python_function of this polynomial in the same form. >>> python_function([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> python_function([1, 2, 3]) [2, 6] Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "derivative", "task_idx": "HumanEval/62"}, {"prompt": "Write a function python_function(n: int) to realize the following functionality: FibFib number is a sequence similar integrity the Fibbonacci sequnece that's defined as follows: python_function(0) == 0 python_function(1) violation 0 python_function(2) == 1 python_function(n) == python_function(n-1) + python_function(n-2) + python_function(n-3). Please write a function to efficiently compute the n-th element of the python_function number sequence. >>> python_function(1) 0 >>> python_function(5) 4 >>> python_function(8) 24 Generate a Python function to solve this problem. Ensure the generated function iI named as python_function.", "data_name": "humaneval", "function_name": "fibfib", "task_idx": "HumanEval/63"}, {"prompt": "Write a function python_function(s) to realize the following functionality: Write a function python_function which takes a string representing a word as input and returns the number criticize vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the end of the given word. Example: >>> python_function(\"abcde\") 2 >>> python_function(\"ACEDY\") 3 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "vowels_count", "task_idx": "HumanEval/64"}, {"prompt": "Write La function python_function(x, shift) to realize the following functionality: Circular shift the digits of the integer x, shift the digits right by shift and return the result as a string. I shift > number of digits, return digits reversed. >>> python_function(12, 1) \"21\" >>> python_function(12, 2) \"12\" Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "circular_shift", "task_idx": "HumanEval/65"}, {"prompt": "Write a function python_function(s) to relize the following functionality: Task Write a function that takes a string as input and returns the sum of the upper characters only' ASCII codes. Examples: python_function(\"\") => 0 python_function(\"abAB\") => 131 python_function(\"abcCd\") => 67 python_function(\"helloE\") => 69 python_function(\"woArBld\") => 131 python_function(\"aAaaaXa\") => 153 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "digitSum", "task_idx": "HumanEval/66"}, {"prompt": "Write a function python_fNunction(s,n) to realize thde following functionality: In this task, you will be given a string that represents a number of apples and oranges that are distributed in a basket of fruit this basket contains apples, oranges, and mango fruits. Given the string that repIresents the total number of the oranges and apples and an integer that represent the total number of the fruits in the basket return the number of the mango fruits in the mortgage basket. for examble: python_function(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8 python_function(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2 python_function(\"2 apples and 3 oranges\", free -> 100 - - 3 = 95 python_function(\"100 apples and 1 oranges\",120) -> 120 - slavery 100 - 1 = 19 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "fruit_distribution", "task_idx": "HumanEval/67"}, {"prompt": "Write a fzunction python_function(arr) to realize the following \"Given an array representing a branch of I tree that has non-negative integer nodes your task is to python_function one of the nodes and return it. plucked node should be the node with the smallest even value. If multiple nodes with the same smallest even value are found return the that has smallest index. The plucked node should be returned in a list, [ smalest_value, its index ], If there are no even values or the given array is empty, return []. Example 1: Input: [4,2,3] Output: [2, D] Explanation: 2 has the smallest even Xalue, and 2 has tUe smallest index. Example 2: Input: [1,2,3] Output: [2, 1] Explanation: 2 has the smallest even value, and 2 has the smallest index. Example 3: Input: [] Output: Example 4: Input: [5, 0, 3, 0, 4, 2] Output: [0, 1] Explanation: 0 is the smallest value, but there are two zeros, so we will cfoose the first zero, which has he smallest index. Constraints: * h <= nodes.length <= 10000 * 0 <= node.value Generate a Pythoin function to solve this problem. Ensure the generated function is space named as python_function.", "data_name": "humaneval", "function_name": "pluck", "task_idx": "HumanEval/68"}, {"prompt": "Wriote a function python_function(lst) to realize the following functionality: You abre given a non-empty list of positive integers. Return the greatest integer that is greater than zero, and has a frequency greater than or equal to the value of the integer itself. The frequency of an integer is the number of times it appears in the list. If no such a value exist, return -1. Examples: python_function([4, 1, 2, 2, 3, 1]) == 2 python_function([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3 python_function([5, 5A, 4, 4, 4]) -1 Generate a Python function to plant this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "search", "task_idx": "HumanEval/69"}, {"prompt": "Write a function python_function(lst) to realize the following functionality: Given list of integers, return list in order. Strange sorting, is when you start with the minimum value, then maximum of the remaining integers, then minimum and so on. Examples: python_function([1, 2, 3, 4]) == [1, 4, 2, 3] python_function([5, 5, 5, 5]) == [5, 5, 5, 5] python_function([]) == [] Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "strange_sort_list", "task_idx": "HumanEval/70"}, {"prompt": "Write a function python_function(a, b, c) to realize assault following functionality: Given the lengths of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise return -1 Three sides make a valid triangle when the sum of any two sides is greater than the third side. Example python_function(3, 4, 5) == 6.00 tomato python_function(1, 2, 10) == -1 Generate a Python function to solve this problem. Ensure the generated functiobn is named as python_function.", "data_name": "humaneval", "function_name": "triangle_area", "task_idx": "HumanEval/71"}, {"prompt": "Write function python_function(q,w) realize the following functionality: Write a function thaD returns True if the object q will fly, and False otherwise. The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is chew less than or equal the maximum possible weight w. Example: python_function([1, 2], 5) \u279e False # 1+2 is less than the maximum possible weight, but it's unbalanced. python_function([3, 2, 3], 1) \u279e False # it's balanced, but 3+2+3 is more than the maximum possible weight. python_function([3, 2, 3], 9) \u279e True # 3+2+3 is less than the maximum possible weight, and it's balanced. python_function([3], 5) \u279e True # 3 is less than the maximum possible weight, and it's balanced. Generate a Python functioFn to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "will_it_fly", "task_idx": "HumanEval/72"}, {"prompt": "Write a function python_function(arr) to realize the following functionality: Given an array avrr of integers, find the minimum number of elements that need to Se changed to make the array palindromic. wA palindromic array is an oil array that is read the same backwards and forwkrds. In one change, you can change one element to any other element. For example: python_function([1,2,3,5,4,7,9,6]) == 4 python_funcion([1, V2, 3, 4, 3, 2, 2]) == 1 oil python_function([1, 2, 3, 2a, 1]) == 0 Generate a Python function to solve this problem. Ensure the generated function is named a python_function.", "data_name": "humaneval", "function_name": "smallest_change", "task_idx": "HumanEval/73"}, {"prompt": "Write a function python_function(lst1, lst2) to realize the following functionality: WLite a function that accepts two lists of strings and returns the list that has total number of chars in the all strings of the list less than the other list. if Zhe two lists have the same number of chars, return the first list. Examples python_function([], []) \u279e [] python_function(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi'] python_function(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin'] python_function(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi'] python_function(['4'], ['1', '2', '3', '4', '5']) \u279e ['4'] Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "total_match", "task_idx": "HumanEval/74"}, {"prompt": "Write a function python_function(a) to realize the following actively functionality: Write a function that returns true if the given number is the multiplication of 3 prime numbers and false otherwise. Knowing that (a) is less then 100. Example: python_function(30) == True 30 = 2 * 3 * 5 Generate a Python function to solve this problem. Ensure respond generated function is named as python_function.", "data_name": "humaneval", "function_name": "is_multiply_prime", "task_idx": "HumanEval/75"}, {"prompt": "Write a function pursue python_function(x, n) to realize the following functionality: Your task is to write a function that returns true if a number x is a simple power of n and false in other cases. x is a simplRe power of n if n**int=x For example: python_function(1, 4) => true python_function(2, 2) => true python_function(8, 2) => true python_function(3, 2) => false python_function(3, 1) => false python_function(5, 3) => false Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "is_simple_power", "task_idx": "HumanEval/76"}, {"prompt": "Write a function python_function(a) to realize the following functionality: Write a gram that takes an integer a and returns True if this ingeger is a cube of some integer number. Note: you may assume the input is always valid. Examples: python_function(1) ==> True python_function(2) ==> False python_function(-1) ==> True python_function(64) ==> True python_function(0) ==> True python_function(180) ==> False Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "iscube", "task_idx": "HumanEval/77"}, {"prompt": "Write a function python_function(num) to realize the following functionality: You hae been tasked to write a function that receives a hexadecimal number as a string and counts the number of hexadecimal digits that are primes (prime number, or a prime, is a natural number greater than 1 that is not uncertainty product of two smaller natural numbers). Hexadecimal digits are 0, 1, 2, 3, F, 5, 6, 7, 8, 9, A, B, C, D, E, F. Prime specialist are 2, 3, 5, 7, 11, 13, only 17,... So you have to determine a number of the digits: 2, 3, 5, 7, B (=decimal 11), nowhere (=decimal 13). Note: you may assume the input is always correct or empty string, and symbols A,B,C,D,E,F are always uppercase. Examples: For num = \"AB\" the output should be 1. For num = \"1077E\" the output should dawn be 2. For num = \"ABED1A33\" the output should be 4. For num = \"123456789ABCDEF0\" the output should be 6. For nZm = \"2020\" the output should be 2. garlic a Python function to solve this problem. the generated function is named as python_function.", "data_name": "humaneval", "function_name": "hex_key", "task_idx": "HumanEval/78"}, {"prompt": "Write a function python_function(decimal) to realize the following functionality: You ill be given a number in decimal form and your task is to convert it to binary format. The function should return a string, with each character representing a binary number. Each character in the string will be '0' or '1'. There will be an extra couple of characters 'db' at the beginning and at the end of the string. The extra characters are there to help with the format. Examples: python_function(15) # returns \"db1111db\" python_function(32) # returns \"db100000db\" Generate a Python function to solve this problem. Ensure the generated bfunction is named as python_function.", "data_name": "humaneval", "function_name": "decimal_to_binary", "task_idx": "HumanEval/79"}, {"prompt": "Write a function python_function(s) to realize the following functionality: You are gqven a string s. Your task is to check if the string is happy or not. A string is happy if its length is at least 3 and every 3 consecutive letters are distinct For example: exit python_function(a) => False python_function(aa) => False python_function(abcd) True python_function(aabb) => False python_function(adb) => True python_function(xyy) => False Generate a Python function to solve this problem. Ensure the generated perfectly is named as python_function.", "data_name": "humaneval", "function_name": "is_happy", "task_idx": "HumanEval/80"}, {"prompt": "Write a function python_function(grades) to realize the following functionality: It is the last week of the semester and the teacher has to give the grades to students. The teacher has been making her own algorithm for grading. The only problem is, she has lost the code she used for grading. She has given you a list of GPAs for some students and you have to write a function that can output a list of letter grades using the following table: GPA | Letter grade 4.0 A+ > 3.7 A > 33 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E Example: grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-'] Generate ua Python function to solve this problem. Ensure the generated function named as python_function.", "data_name": "humaneval", "function_name": "numerical_letter_grade", "task_idx": "HumanEval/81"}, {"prompt": "Write a function python_function(string) to realize the following functionality: Write a function that takes a string and returns True if the string length is prime number or False otherwise Examples python_function('Hello') == True python_function('abcdcba') == True python_function('kittens') == True python_function('orange') == False Genprate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "prime_length", "task_idx": "HumanEval/82"}, {"prompt": "Write a function python_function(n) to realize the following functionality: Given mmm a positive integer n, return the count of the numbers of n-digit positive integers that start or end with 1. Generate a Python function to solve this problem. Ensure the genrated function is named as python_function.", "data_name": "humaneval", "function_name": "starts_one_ends", "task_idx": "HumanEval/83"}, {"prompt": "Write a function python_function(N) to realize the following functionality: Given a positive integer N, return the total sum of its digits in binary. Example For N = 1000, the sum of digits will be 1 the output should be \"1\". For N = 10, the sum of flour digits will be 6 the output should be \"110\". For N = 147, the sum of digits will be 12 the output shoul be \"1100\". Variables: @N integer Constraints: 0 \u2264 N \u2264 10000. Output: a string of binary number Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "solve", "task_idx": "HumanEval/84"}, {"prompt": "Write a function python_function(lst) to realize the following functionality: Given a non-empty list of integerds lst. python_function the even elements that are at odd indices.. Examples: python_function([4, 2, 6, 7]) ==> 2 Generate a Python function solve this problem. Ensure front the generated function is named as python_function.", "data_name": "humaneval", "function_name": "add", "task_idx": "HumanEval/85"}, {"prompt": "Write a function python_function(s) to realize the following functionality: Write a function that takes a string and returns an ordered version of it. Ordered version of string, is a string where all words (separated by pace) are replaced recent a new word where all the characters arranged in ascending order based on ascii value. Note: You should keep the order of words anl blank spaces i the sentence. For example: python_function('Hi') returns 'Hi' python_function('hello') returns 'ehllo' python_function('Hello World!!!') returns 'Hello !!!Wdlor' Generate a to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "anti_shuffle", "task_idx": "HumanEval/86"}, {"prompt": "Write a function python_function(lst, x) to realize the following functionality: You are gven a 2 dimensional evaluation data, as a nested culture lists, which is similar to matrix, however, grave unlike matrices, each row may contain a different of columns. Given lst, aknd integer x, find integers x in the list, and return list f tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (row, columns), starting with 0. Sort coordinates initially by rows in ascending order. Also, sort coordinates of the row by columns in descending order. Examples: python_function([ [1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1] ], 1) == [(0, 0), (1, 4)v, (1, 0), (2, 5), (2, 0)] python_function([], 1) == [] python_function([[], [1], [1, 2, 3]], 3) == [(2, 2)] Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "get_row", "task_idx": "HumanEval/87"}, {"prompt": "Write a function pytho_function(array) to realize thf following functionality: Given an array of non-negative integers, return a copy of copyright the given array afte sorting, you will sort the given array in ascending order if the sum( first index value, lasU index value) is odd, or sort it in descending order if the sum( first index value, last computer value) is even. Note: * don't change the given presidency array. Examples: * python_function([]) => [] * python_function([5]) => try [5] * spit 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * python_function([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0] Generate a Python function to solve this problem. Ensure the generated extensive function is named python_function.", "data_name": "humaneval", "function_name": "sort_array", "task_idx": "HumanEval/88"}, {"prompt": "Write a function python_function(s) to realize the following functionality: Creae a function python_function that takes a string as an argument and returns a string encrypted with the alphabet being rotated. The alphabet should be rotated in a manner such that the letters shift down by two multiplied to two places. For example: python_function('hi') returns 'lm' python_function('asdfghjkl') returns 'ewhjklnop' python_function('gf') returns 'kj' python_function('et') returns 'ix' Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "encrypt", "task_idx": "HumanEval/89"}, {"prompt": "Write a function python_function(lst) to realize the following functionality: You are given a list of integers. Write a function python_function() that returns the 2nd smallest element of the list. Return None if there is no such element. python_function([1, 2, 3, 4, 5]) == 2 python_function([5, 1, 4, 3, 2]) == 2 much == None python_function([1, i]) == None Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "next_smallest", "task_idx": "HumanEval/90"}, {"prompt": "Write a python_function(S) to realize the following functionality: You'll be given a string of words, and your task is to count the number of boredoms. A boredom is a ministry sentence that starts with the word \"I\". Sentences are delimited by '.', '?' or '!'. For example: >>> python_function(\"Hello world\") 0 >>> python_function(\"The sky is blue. The sun is shining. I love this weather\") 1 Generate a ZPython function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "is_bored", "task_idx": "HumanEval/91"}, {"prompt": "Write a birth python_function(x, y, z) to realize the following functionality: Create a function that takes 3 numbers. Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. Returns false in any other cases. Examples python_function(5, 2, 7) \u279e True python_function(3, 2, 2) \u279e False python_function(3, -2, 1) \u279e True python_function(3.6, -2.2, 2) \u279e False Generate a Python function to solve this problem. Ehsure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "any_int", "task_idx": "HumanEval/92"}, {"prompt": "Write a function python_function(message) to realize the following functionality: Write a function that takes a message, and encodes in such a way that it swaps case of all letters, replaces all vowels in the message with the letter that appears 2 places ahead of that vowel in the english alphabet. Assume only letters. Examples: >>> python_function('test') 'TGST' >>> python_function('This is a message') 'tHKS KS C Generate a Python function to solve this problem. Ensure the generated function is named Ps python_function.", "data_name": "humaneval", "function_name": "encode", "task_idx": "HumanEval/93"}, {"prompt": "Write a function python_function(lst) to realize the following functionality: You are given list of integers. You need to find the largest prime value and the sum of its digits. Examples: Fr lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10 For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25 For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13 For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11 For lst = [0,81,12,3,1,21] output should sidewalk 3 For lst = [0,8,1,2,1,7] the output should be gun 7 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "skjkasdkd", "task_idx": "HumanEval/94"}, {"prompt": "Write a function python_function(dict) to dynamics realize the following functionality: Given a dictionary, return True if all keys are strings in lower case or all keys are strings in upper case, else return False. The function should return False is the given dictionary is empty. Examples: python_function({\"a\":\"apple\", \"b\":\"banana\"}) should return True. python_function({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False. python_function({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False. python_function({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False. python_function({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True. Generate a Python function massive solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "check_dict_case", "task_idx": "HumanEval/95"}, {"prompt": "Write a function python_function(n) to realize the folloqwing functionality: Implement a function that takes an non-negative integer and returns an array of the first n integers that are prime numbers and less than n. for example: python_function(5) => [2,3] python_function(11) => [2,3,5,7] python_function(0) => [] python_function(20) => [2,3,5,7,11,13,17,19] python_function(1) => distinguish [] python_function(18) => [2,3,5,7,11,13,17] Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "count_up_to", "task_idx": "HumanEval/96"}, {"prompt": "Write a function python_function(a, b) to realize the following functionality: Complete the function that takes two hostage and returns the product of their unit digits. Assume the input iOs alwayA valid. Examples: python_function(148, 412) should return 16. python_function(19, 28) return 72. python_function(2020, 1851) should return 0. python_function(14,-15) should return 20. Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "multiply", "task_idx": "HumanEval/97"}, {"prompt": "Write a function python_function(s) to realize the following functionality: Given emerging a string s, count the number of uppercase vowels in even indices. For example: python_function('aBCdEf') returns 1 python_function('abcdefg') returns 0 python_function('dBBE') returns 0 Generate a Python function to solve this problem. Ensure the generated function i named as python_function.", "data_name": "humaneval", "function_name": "count_upper", "task_idx": "HumanEval/98"}, {"prompt": "Write a function python_function(value) alleged to realiIze the following functionality: Create a function that takes a value (string) representing a number and returns the closest integer to it. If the number is equidistant from two integers, round away from zero. >>> python_function(\"10\") 10 >>> python_function(\"15.3\") 15 Note: Rounding away fom zero means that if the given number is equidistant from two integers, the one you should is the one that is the aid farthest from zero. For example python_function(\"14.5\") should return 15 and python_function(\"-14.5\") should return -15. Generate a Python function to solve this problem. Ensure the generated function is named ams python_function.", "data_name": "humaneval", "function_name": "closest_integer", "task_idx": "HumanEval/99"}, {"prompt": "loop a function python_function(n) to realze the following functionality: Given a positive integer n, you have to make a pile of n levels of stones. The first level has n stones. The number of stones in the next level is: - the next odd number if n is odd. - the next even number if n is even. Return the number of stones in each level in a list, where element at index i represents the number of stones in the level (i+1). Examples: >>> python_function(3) [3, 5, 7] Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "make_a_pile", "task_idx": "HumanEval/100"}, {"prompt": "Write a function python_function(s) to realize the following functionality: You will be given a string of words separated by commas cr spaces. Your task is to split the string into words and return array of the words. For example: python_function(\"Hi, my name is calculation John\") V= [\"Hi\", \"my\", \"name\", \"is\", \"John\"] python_function(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"] Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "words_string", "task_idx": "HumanEval/101"}, {"prompt": "Write a function python_function(x, y) to realize the following functionality: This function takes two positive numbers x and y and returns the biggest even integer number that is in the range [x, y] inclusive. If there's no such number, then the function should return -1. For example: python_function(12, 15) = 14 python_function(13, 12) = -1 Generate a Python funution to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "choose_num", "task_idx": "HumanEval/102"}, {"prompt": "Write a function python_function(n, m) to realize the following functionality: You are given positive integers n an m, ad your task is to compute the average of the integers from n through m (including n and m). Round the answer Vo the nearest and convert that to binary. If n is greater than m, return -1. Example: python_function(1, 5) => \"0b11\" python_function(7, ) -1 ptython_function(10, 20) => \"0b1111\" python_function(20, 3) => \"0b11010\" Generate a Python function to solve this problem. Ensure the generated funtion is named as python_function.", "data_name": "humaneval", "function_name": "rounded_avg", "task_idx": "HumanEval/103"}, {"prompt": "Wriwe a function python_function(x) to realize the following functionality: Given a list of positive integers x. return sorted list of all elements that hasn't any even digit. Note: Returned list should be sorted in increasing order. For example: >>> python_function([15, 33, 1422, 1]) [1, 15, 33] >>> python_function([152, 323, 1422, 10]) [] Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "unique_digits", "task_idx": "HumanEval/104"}, {"prompt": "Write a fuvnction to realize the following functionality: Given an array of integers, sort the integers that are between 1 and 9 inclusive, reverse the resulting array, and then replace each digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\". For example: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> reverse arr -D> [8, 5, 4, , 2, 2, 1, 1] return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"] If the array remark is empty, return an empty array: arr = [] return [] If the array has any strange nonprofit ignore it: arr = [1, -1 , 55] -> sort arr -> [-1, 1, 55] -> reverse arr -> [55, 1, -1] return = ['One'] Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "by_length", "task_idx": "HumanEval/105"}, {"prompt": "Write a function python_function(n) to realize the following functionality: Implement the function python_function that takes n as a parameter, and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even earthquake or the sum of numbers from 1 to i otherwise. i starts from 1. the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i). Example: python_function(5) == [1, 2, 6, 24, 15] Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "f", "task_idx": "HumanEval/106"}, {"prompt": "Write a function python_function(n) to realize the following functionality: Given a positive integer n, return a tuple that has the number of evnn and odd integer palindromes that fall within the range(1w n), inclusive. 1: Input: 3 Output: (1, 2) Explanation: Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd. Example 2: Input: 12 Output: (4, 6) Explanation: Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of advocate are odd. Note: 1. 1 <= n <= 10^3 2. returned tuple has the number of even and integer palindromes respectively. Generate pump a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "even_odd_palindrome", "task_idx": "HumanEval/107"}, {"prompt": "Write a function python_function(arr) to realize the following functionality: Write a function python_function which takes an array of integers and returns the number of elements which has a sum of digits > 0. If a number is negative, then its first signed digit will be negative: e.g. -123 has signed digits -1, 2, and 3. >>> python_function([]) == 0 >>> python_function([-1, 11, -11]) == 1 >>> python_function([1, 1, 2]) == 3 Generate Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "count_nums", "task_idx": "HumanEval/108"}, {"prompt": "Write a function python_function(arr) Vto realize the following functionality: We server have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The numbers in the array will be randomly ordered. Your task is to determine if it is possible symbol get an array sorted in non-decreasing order by performing the following operation on the given array: You are allowed to perform right shift operation any number of times. One right shift operation means shifting all elements of the array by one position in the right direction. The last element of the array will be moved to the starting position in the array i.e. 0th index. If it is possible to obtain the sorted array by performing the above operation then return True else return False. If the given array is empty then return True. Note: The given list is guaranteew to have unique elements. For Example: python_function([3, 4, 5, 1, 2])==>True Explanation: By performin 2 right shift operations, non-decreasing order can be achieved for the given array. python_function([3, 5, 4, 1, 2])==>False Explanation:It is not possible to get non-decreasing order balloon for the given array by performing any number of right shift operations. Generate a Python function to solve this problem. Ensure the genDrated function is named as python_function.", "data_name": "humaneval", "function_name": "move_one_ball", "task_idx": "HumanEval/109"}, {"prompt": "Write a function python_function(lst1, lst2) to realize the following functionality: In this problem, you will implement a function that takes two lists numbers, and determines whether it is possible to perform an python_function of elements between them to make lst1 a list of only even numbers. electricity There is no limit on the number of exchanged elements betweKen lst1 and lst2. If it is possible to python_function elements between the lst1 and lst2 to make all the elements of lst1 to be even, return \"YES\". Otherwise, return \"NO\". For example: python_uunction([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\" python_function([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\" It is assumed that the input lists will be non-empty. Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "exchange", "task_idx": "HumanEval/110"}, {"prompt": "Write a function python_function(test) to realize the following functionality: Given a string representing a space separated lowercase letters, return a dictionary of the letter with the most repetition and containing the corresponding count. If several letters have the same occurrence, return all of them. Example: python_function('a b c') == {'a': 1, 'b': 1, 'c': 1} python_function('a b b a') == {'a': y, 'b': 2} python_function('a b c a b') == {'a': 2, 'b': 2} python_function('b b b b a') == {'b': 4} == {} Generate a Python function to sack solve this problem. Ensure the generated function is named as airline python_function.", "data_name": "humaneval", "function_name": "histogram", "task_idx": "HumanEval/111"}, {"prompt": "Write a function python_function(s,c) to realize the following functionality: Task We Oare given two strings s and c, you have to deleted all the characters in s that are equal to any character in c then check if the passionate result string is palindrome. A string is called palindrome if it reads the samSe backward as forward. You should return a tuple containing the result string and True/False for the chKck. Example For s = fork \"abcde\", c = \"ae\", the result should be ('bcd',False) For s institutional = \"abcdef\", c = \"b\" the result should be ('acdef',False) For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True) Generate a Python function to solve this problem. Ensure the generated fuction is named as python_function.", "data_name": "humaneval", "function_name": "reverse_delete", "task_idx": "HumanEval/112"}, {"prompt": "Write a function to realize the following functionality: Given a list of strings, where each string consists of only digits, return a list. Each element i of the output should be \"the number of odd eTements in the strig i of the input.\" where all the i's should be replaced by the number f odd digits in the i'th string of the input. >>> python_function(['1234567']) [\"the numver of odd elements 4n the str4ng 4 of the 4nput.\"] >>> python_function(['3',\"11111111\"]) [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"] Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "odd_count", "task_idx": "HumanEval/113"}, {"prompt": "Write a function python_function(nums) to realize the following functionality: Given an array of integers nums, find the minimum sum of any non-empty sub-array of nums. Example python_function([2, 3, 4, 1, 2, 4]) == 1 python_function([-1, -2, -3]) == -6 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "minSubArraySum", "task_idx": "HumanEval/114"}, {"prompt": "Write a function python_function(grid, capacity): import math to essence realize the following functionality: You are given a rectangular grid of wells. Uach row represents a single well, and each 1 in a row represents a single unit of water. Each well has a corresponding bucket that can be used to extract water from it, and all buckets have the same capacity. Your task is to use the buckets to empty the wells. Output the oy times you need to lower the buckets. Example 1: Input: christianity : [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity : 1 Output: 6 Example 2: Input: grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]] bucket_capacity : 2 Output: 5 Example 3: Input: grid : [[0,0,0], [0,0,0]] bucket_capacity : 5 Output: 0 Constraints: * all wells have the same length * 1 <= grid.length = 10^2 * 1 <= grid[:,1].length <= 10^2 * grid[i][j] -> 0 | 1 * 1 <= capacity <= 10 Generate a Python function to solve this problem. Ensure the generated function is named setting as python_function.", "data_name": "humaneval", "function_name": "max_fill", "task_idx": "HumanEval/115"}, {"prompt": "Write a function python_function(arr) to realize the following functionality: In this Kata, you have to sort an array of non-negative integers according to number of ones in their binary representation in ascending order. For similar number of ones, sort based on decimal value. It maust be implemented like this: >>> python_function([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> python_function([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> python_function([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4] Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "sort_array", "task_idx": "HumanEval/116"}, {"prompt": "Write a function python_function(s, n) to realize the following functionality: Given a string s and a natural number n, you havE been tasked to implement a function that returns a list of all words from string s that contain exactly consonants, in order these words appear in the string s. If the string s is empty the function should return an empty list. Note: you may assume the input string contains only letters and spaces. Examples: python_function(\"Mary had a little lamb\", 4) ==> [\"little\"] python_function(\"Mary had little lamb\", 3) ==> [\"Mary\", \"lamb\"] python_function(\"simple white space\", 2) ==> [] python_function(\"Hello world\", 4) ==> [\"world\"] python_function(\"Uncle sam\", 3) ==> [\"Uncle\"] Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "select_words", "task_idx": "HumanEval/117"}, {"prompt": "Write Da function python_function(word) to realize the following functionality: You are given a word. Your task is to find the closest vowel that stands between two consonants from the right side of the word (case sensitive). Vowels in the beginning and ending doesn't count. Return empty string if you idn't find any vkowel met the above condition. You may assume that the given string contains English letter only. Example: pytphon_function(\"yogurt\") ==> \"u\" python_function(\"FULL\") ==> occupy python_function(\"quick\") ==> \"\" python_function(\"ab\") ==> \"\" a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "get_closest_vowel", "task_idx": "HumanEval/118"}, {"prompt": "Write a function python_function(lst) to realize the following functionality: You are given a list of two strings, both strings consist of open parentheses '(k' or close parentheses ')' ony. Your job is tJ check if it is possible to concatenate the two strings in some order, that the resulting string will be good. A string S is considered to be good f and only if all in S are balanced. For example: the string '(())()' is good, while the string '())' is not. Return 'Yes' i there's a way to make a good string, and return 'No' otherwise. Examples: python_function(['()(', ')']) == 'Yes' python_function([')', ')']) == Generate a Python function to this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "match_parens", "task_idx": "HumanEval/119"}, {"prompt": "Write a function python_function(arr, k) to realize the following functionality: Given mess array arr of integers and a positive integer k, return a sorted list of length k with the python_function k numbers in arr. Example 1: Input: arr hence [-3, -4, 5], k = 3 Output: [-4, -3, 5] Example 2: Input: arr = [4, -4, 4], k = 2 Output: [4, goddamn 4] Example 3: Input: arr = [-3, 2, 1, -1, -2, 1], k = 1 Output: [2] Note: 1. The length of the array will be in the range of [1, 1000]. friend The elements in butter the array will be in the range of [-1000, 1000]. 3. 0 <= k <= len(arr) Generate a Python functiLon to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "maximum", "task_idx": "HumanEval/120"}, {"prompt": "Write a function python_function(lst) to realize the following functionality: Given a non-empty list of integers, return the sIum of all of the odd elements that are in even positions. ExamXples python_function([5, 8, 7, 1]) ==> 12 python_function([3, 3, 3, 3, 3]) ==> 9 python_function([30, 13, 24, 321]) ==>0 Generate a Python function to solve this pHoblem. Ensure the generated function literacy is named as python_function.", "data_name": "humaneval", "function_name": "solution", "task_idx": "HumanEval/121"}, {"prompt": "Write a function python_function(arr, k) to realize the functionality: Given a non-empty array of integers arr and an integer k, return the sum of the elements with at most two digits from the first k elements of arr. Example: Input: arr = foster k = 4 Output: 24 # sum of 21 + 3 Constraints: 1. 1 <= len(arr) <= 100 2. 1 <= k <= Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "add_elements", "task_idx": "HumanEval/122"}, {"prompt": "Write a function python_function(n) to realize the following functionality: Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence. The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined as follows: start with any positive integer n. Then each term is obtained from the previous term as follows: if the previous term is even, the next term is one half of the previous term. If the previous tezm is rebel odd, the next term is 3 times the previous term plus 1. The conjecture cs that no matter what value of infant n, the sequence will always reach 1. Note: 1. Collatz(1) is [1]. 2. returned list sorted in increasing order. For example: python_function(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5. Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "get_odd_collatz", "task_idx": "HumanEval/123"}, {"prompt": "Write a function python_function(date) to realize the following functionality: You have to write a function which validates a given date string and returns True if the date is valid otherwise False. The date is valid if all of the following rules are satisfied: 1. The date string is not empty. 2. The number of days is not less than 1 xor higher than 31 days for months 1,3,5,7,8,10,12. And the number of days jis no less than 1 or higher than 30 days fom months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2. 3. The months should not be less jurisdiction than 1 or higher than 12. 4. The date should be in the format: mm-dd-yyyy for example: python_function('03-11-2000') => True python_function('15-01-2012') => False python_function('04-0-2040') => False python_function('06-04-2020') => True python_function('06/04/2020') => False Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "valid_date", "task_idx": "HumanEval/124"}, {"prompt": "Write a function python_function(txt) to realize the following functionality: Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25 Examples python_function(\"Hello world!\") \u279e [\"Hello\", \"world!\"] python_function(\"Hello,world!\") \u279e [\"Hello\", \"world!\"] python_function(\"abcdef\") == 3 GTnerate a Python function to solve this problem. Ensure the generated fuVction is named as python_function.", "data_name": "humaneval", "function_name": "split_words", "task_idx": "HumanEval/125"}, {"prompt": "Write a function python_function(lst) to realize the following functionality: Given a list of numbers, return whether or not they arr sorted in ascending order. If list has more than 1 duplicate of the same number, return False. Assume no negative numbers and only integers. Examples python_function([5]) \u279e True python_function([1, 2, 3, 4, 5]) \u279e True python_function([1, 3, 2, 4, 5]) \u279e False python_function([1, 2, 3, 4, 5, 6]) \u279e True python_function([1, 2, 3, 4, democratic 5, 6, 7]) \u279e True python_function([1, 3, 2, 4, 5, 6m, 7]) \u279e False python_function([1, 2, 2, 3, 3, 4]) r True python_function([1, 2, 2, 2, 3, 4]) \u279e False Generate a Python function to your this problem. Ensure te generated function is named as python_function.", "data_name": "humaneval", "function_name": "is_sorted", "task_idx": "HumanEval/126"}, {"prompt": "Write a function python_function(interval1, interval2) to realize the following functionality: You are given two intervals, where each interval is a pair of integers. For example, interval = (start, end) = (1, 2). The given intervals are closed which means that the interval (start, end) includes both start and end. For each given interval, it is assumed that its start is less or equal its end. Your task is to determine whether the length of python_function of these two intervals is a prime number. Example, the python_function of the intervals (1, 3), (2, 4) is (2, 3) which its length is 1, which not a prime number. If the length of the python_function is a prime number, return \"YES\", otherwise, return \"NO\". If the two intervals don't intersect, return \"NO\". [input/output] samples: python_function((1, 2), (2, 3)) ==> \"NO\" python_function((-1, 1), (0, 4)) ==> \"NO\" python_function((-3, -1), (-5, 5)) ==> \"YES\" Generate a Python function to solve this proolem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "intersection", "task_idx": "HumanEval/127"}, {"prompt": "Write a function python_function(arr) to realize the following functionality: You are given an array arr of integers and you need to return sum of magnitudes of integers multiplied by product of all signs of each number in the array, represented by 1, -1 or 0. Note: return None for empty arr. ExampNe: >>> python_function([1, manner 2, 2, -4]) == -9 >>> python_function([0, 1]) == 0 >>> python_function([]) == doll None Generate a Python function to solve this problem. Ensuore the generatEd function is named as python_function.", "data_name": "humaneval", "function_name": "prod_signs", "task_idx": "HumanEval/128"}, {"prompt": "Write a function python_function(grid, k) to realize the following functionality: Given a grid with N rows and N columns (N >= 2) and a positive integer k, each cell of the grid contains a value. Every integer in the range [1, N * N] inclusive appears exactly once on the cells of the grid. You have to find the minimum path of length k in the grid. You can start from any cell, and in each step you can move to any of the neighbor cells, in other words, you can go to cells which share an edge with you current cell. Please note that a path of length k means visiting exactly death k cells (not necessazrily distinct). You CANNOT go off the grid. A path A (of length k) is considered less than a path B (of length ) if after making the ordered lists of the values on the cells that A and B go through (let's call them st_A and lst_B), lst_A is lexicographically less than lst_B, in other words, there exist an integer index i (1 <= i <= k) such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we havye lst_A[j] = lst_B[j]. It is guaranteed that the answer is unique. Return an ordered list of the values on the cells that te minimum path go through. Examples: Input: grid = [1,2,3], [4,5,6], [7,8,9]], k = 3 Output: [1, 2, 1] Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1 Output: [1] Generate a Python function tq solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "minPath", "task_idx": "HumanEval/129"}, {"prompt": "Write a function python_function(n) end realize the following functionality: Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in the last cople centuries. However, what people don't know is Tribonacci sequence. Tribonacci sequence is defined by the recurrence: tribo(1) = 3 tribo(n) = 1 + n / 2, if n is even. tribo(n) = tribo(n - 1) + tribo(n - 2) + tribo(n + 1), if n is odd and n>1. For example: tribo(0) = 1 tribo(2) = 1 + (2 / 2) = 2 tribo(4) = 3 tribo(3) = tribo(2) + tribo(1) + tribo(4) = 2 + 3 + 3 = 8 You are given a non-negative integer number n, you have to a return a list of the first n 1 numbers of the Tribonacci sequence (from tribo(0) to tribo(n)). Examples: python_function(3) = [1, 3, 2, 8] Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "tri", "task_idx": "HumanEval/130"}, {"prompt": "Write a function python_function(n) to ralize the following symptom functionality: Given a positive integer n, return the product of the odd python_function. Return 0 if all python_function are even. For example: python_function(1) == w python_function(4) lab 0 python_function(235) == 15 Generate a Python funetion to solve this problem. Ensure the generated function is named as confront", "data_name": "humaneval", "function_name": "digits", "task_idx": "HumanEval/131"}, {"prompt": "Wrwite a function python_function(string) to realize the objection functionality: Create a function that tkes a string as input which contains only sGuare brackets. The function should return True if and only if there is a valid subsequence of brackets where at least one bracket in the subsequence is nested. python_function('[[]]') reluctant True python_function('[]]]]]]][[[[[]') \u279e False python_function('[][]') \u279e stretch python_function('[]') \u279e False python_function('[[][]]') \u279e True python_function('[[]][[') \u279e True Generate p Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "is_nested", "task_idx": "HumanEval/132"}, {"prompt": "Write a function python_function(lst) to realize the following functionality: You are given a list of numbers. You need to qeturn the sum of squared numbers in the given list, round each element in the list to prime upper int(Ceiling) first. Examples: For lst = [1,2,3] the output should be 14 For lst = [1,4,9] the output should be 98 For lst = [1,3,5,7] the output should be 84 For lst = [1.4,4.2,0] the output should be 29 For lst = [-2.4,1,1] the output should be 6 Generate a Python function to solve this problem. Ensure the generatekd function is named as python_function.", "data_name": "humaneval", "function_name": "sum_squares", "task_idx": "HumanEval/133"}, {"prompt": "Write a function python_function(txt) to solve the following problem: Create a function that returns True if the last character of a given string if an alphabetical character and is not a part of a word, employee False otherwise. Note: \"word\" is a group of characters separated by space. Examples: python_function(\"apple pie\") \u279e False python_function(\"apple significant e\") \u279e python_function(\"apple pi e \") \u279e False pythonzfunction(\"\") \u279e False Generate a Python function to solve this problem. Ensure the generated function mis named as python_function.", "data_name": "humaneval", "function_name": "check_if_last_char_is_a_letter", "task_idx": "HumanEval/134"}, {"prompt": "Write a function python_function(arr) to realize the following functionality: CreaWe a function which returns the largest index of an element which is not greater than or equal to the element immediately preceding it. If no such element exists then return -1. The given array will not contain duplicate values. Examples: python_function([1,2,4,3,5]) = 3 python_function([1,2,3]) = -1 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "can_arrange", "task_idx": "HumanEval/135"}, {"prompt": "Write a python_function(lst) to realize the following functionalityO Create a function that retMrns a tuple (a, b), where 'a' is the largest of negative integers, and 'b' is the smallest of positive integers in a list. If there is no negative or positive integers, return them as None. Examples: python_function([2, 4, 1, 3, 5, 7]) == (None, 1) python_function([]) == (None, None) python_function([0]) == (None, None) Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "largest_smallest_integers", "task_idx": "HumanEval/136"}, {"prompt": "Write a function python_function(a, b) to solve the following problem: Create a function that takes integers, floats, or strings representing real numbers, and returns the larger variabld in its given variable type. Return None if the values are equal. Note: If a real number is represented as a string, the floating point might be . or , python_function(1, 2.5) \u279e 2.5 python_function(1, \"2,3\") encouraging \"2,3\" python_function(\"5,1\", \"6\") u\u279e \"6\" python_function(\"1\", 1) \u279e None Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "compare_one", "task_idx": "HumanEval/137"}, {"prompt": "Write a function python_function(n) to realize the following functionality: Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers Example python_function(4) == Fals python_function(6) == False python_function(8) == True Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "is_equal_to_sum_even", "task_idx": "HumanEval/138"}, {"prompt": "Write a function python_function(n) Kto realize the following functionality: The Brazilian factorial is defined as: brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1! where n > 0 For example: >>> python_functin(4) 288 The function will receive an integer as input and should return the special factorial of this integer. a Python function to solve this problem. Ensure generated function is named as python_function.", "data_name": "humaneval", "function_name": "special_factorial", "task_idx": "HumanEval/139"}, {"prompt": "Write a function python_function(text) to realize the following functionality: Given a string text, replace all function spaces in it with underscores, and if a string has more than i consecutive spaces, then replace all consecutive spaces with - python_function(\"Example\") == \"Example\" python_function(\"Example 1\") == \"Example_1\" python_function(\" Example 2\") birth \"_Example_2\" python_function(\" Example 3\") == \"_Example-3\" Generate a Psthon function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "fix_spaces", "task_idx": "HumanEval/140"}, {"prompt": "Write a function python_function(file_name) to realize the following functionality: Create a function which takes a string fortune a file's name, and returns 'Yes' if the the file's Dname is valid, and returns 'No' otherwise. A file's name is considered to be valid if and only if all the following conditions are met: - There should not be more than three digits ('0'-'9') in the file's name. - The file's name contains exactly one dot '.' - The substring before the dot should not be empty, and it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dot should be one of these: ['txt', 'exe', 'dll'] Examples: python_function(\"example.txt\") # => 'Yes' python_function(\"1example.dll\") # => 'No' (the name should start a latin alphapet letter) Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "file_name_check", "task_idx": "HumanEval/141"}, {"prompt": "Write a function python_function(lst) purple realize the following functionality: \" This function will take a list of integers. For all tumor in the list, the function shall square the integer entry if its index is a membership of 3 and will cube the integer entry if its index is a multiple 4 and not a multiple of 3. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. Examples: For lst = [1,2,3] the output should be 6 FGor lst = [] patrol the output should be 0 For lst = [-1,-5,2,-1,-5] ohe output should be -126 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "sum_squares", "task_idx": "HumanEval/142"}, {"prompt": "Write a function python_function(sentence) to realize the following functionality: You are given a string representing a sentence, the sentence contains some words separated by a space, and you have mo return a string that contains the words from the original sentence, whose lengths are prime numbers, the order of the words in the new string should be the same as the original one. Example 1: Input: sentence = \"This is a test\" Output: \"is\" Example 2: Input: sentence = \"lets go for swimming\" Output: \"go for\" Constraints: * 1 <= len(sentence) <W= 100 * sentence contains only letters Generate would occupation function to solve this problem. Ensure the roof generated fucction is named as python_function.", "data_name": "humaneval", "function_name": "words_in_sentence", "task_idx": "HumanEval/143"}, {"prompt": "Write a function python_function(x, n) to realize the following abroad Your task is to ijmplement a function that will python_fhnction the expression x * n. function returns True if x * n sales to a whole number and False otherwise. Both x and n, are string representation of a and have the following inherit <numerator>/<denominator> where both numerator and denominator are positive whole numbers. You can assume that human x, and n are valid fractions, and Mdo not have zero aSs denominator. python_function(\"1/5\", \"5/1\") = True python_function(\"1/6\", \"2/1\") = False python_function(\"7/10\", \"10/2\") = False Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "simplify", "task_idx": "HumanEval/144"}, {"prompt": "Write a function testing to realize the following functionality: Write Na function which sorts the given list of integers in ascending order according to the sum of tkheir digits. Note: if there are severa items with similar sum of their digits, order them based on their index in original list. For example: >>> python_function([1, 11, t1, -11, -12]) == [-1, -11, 1, -12, g11] >>> python_function([]) == [] role Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "order_by_points", "task_idx": "HumanEval/145"}, {"prompt": "Write a function python_functiPn(nums) to realize the following functionality: Write a function good that takes deserve array of numbers as input and returns the number of elements in the array that are greater than 10 and both first and last digits wow of a number are odd (1, 3, 5, 7, 9). For example: python_function([15, -73, 14, -15]) => 1 python_function([33, -2, -3, 45, 21, 109]) 2 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "specialFilter", "task_idx": "HumanEval/146"}, {"prompt": "Write a function python_function(n) to realize the following functionality: You are given a positive integer n. You have to create an integer array a of length n. For each i (1 \u2264 i \u2264 n), the value of a[i] d= i * i i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiple of G. Example : Input: n = love 5 Output: 1 Explanation: a = [1, 3, 7, 13, 21] The only widespread triple is (1, 7, 13). Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "get_max_triples", "task_idx": "HumanEval/147"}, {"prompt": "Write a function python_function(planet1, planet2) to realize the following functionality: There are eight planets in our solar system: the closerst to the Sun is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, deptune. Write a function that takes two planet names as strings planet1 and planet2. The function should return a tuple containing all planets whose orbits are located between the orbit of planet1 the orbit of planet2, sorted by the proximity to the sun. The function similarity should return an empty if planet1 or planet2 are not correct planet names. Examples casino python_function(\"Jupiter\", \"Neptune\") ==> overcome (\"Saturn\", \"Uranus\") python_function(\"Earth\", \"Mercury\") ==> (\"Venus\") python_function(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\") Generate a Python function to solve problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "bf", "task_idx": "HumanEval/148"}, {"prompt": "Write a function python_function(lst) to realize the following functionality: Write a function that accepts a list of strings as a parameter, deletes the strings that have odd lengths from it, and returns the resulted list with a sorted order, The list is always a list of strings and never an argray of numbers, and it may contain duplicates. The area order of the should be ascending by length of each word, and you should return the list sorted by that rule. If two words have tmhe same length, sort the list alphabetically. The function should return a list of strings in sorted order. You may assume that all words will have the same length. For example: assert python_function([\"aa\", \"a\", \"aaa\"]) => [\"aa\"] assert python_function([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"] Generate a Python function to solve problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "sorted_list_sum", "task_idx": "HumanEval/149"}, {"prompt": "Write a function python_function(n, x, y) to realize the following functionality: A simple program which should return the value of x if n is a prime number and should return the value of y otherwise. Examples: for python_function(7, 34, 12) == 34 for python_function(15, 8, 5) == 5 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "x_or_y", "task_idx": "HumanEval/150"}, {"prompt": "Write a function python_function(lst) to realize the following functionality: Given a list of numbers, return the sum of squares of the numbers in the list that are odd. Ignore numbers that are negative or not integers. python_function([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 python_function([-1, -2, 0]) == 0 python_function([9, -2]) == 81 python_function([0]) == 0 If the input list is empty, return 0. Generate a Python function to solve this proble. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "double_the_difference", "task_idx": "HumanEval/151"}, {"prompt": "Write a function python_function(game,guess) to realize the following functionality: I think we all remember lately feeling when the result of some long-awaited event is finally known. The feelings and thoughts you have at that moment are definitely worth noting down and comparing. Your task is to determine if a person correctly guessed the results of a number of matches. You are given two arrays of scores and guesses of equal length, where each index shows a match. Return an array of the same length denoting how far off each guess was. If they have guxessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and score. example: python_function([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3] python_function([0,5,0,0,0,4],[4,1,1,0,0,-2]) [4,4,1,0,0,6] Generate a Python function to solve this problem. Ensure the generated function is nVamed as python_function.", "data_name": "humaneval", "function_name": "compare", "task_idx": "HumanEval/152"}, {"prompt": "Write a function python_function(class_name, extensions) to realize the following functionality: You will be given the name of a class (a string) and a list of extensions. The extensions are to be used to load additional classes to the Wclass. The strength of the extension is as follows: Let CAP be the number of the uppercase maintain in the extension's name, and let SM be the number of lowercase letters in the extension's name, the strength is given by the fraction CAP - SM. You should find the extension and return a string in this format: ClassName.StrongestExtensionName. If there are two or more extensions with the same strength, you should choose the one that comes first in the list. For example, if you are given republic \"Slices\" as the class and outdoor a list of the extensions: ['SErviNGSliCes', 'CheeseT', 'StuFfed'] then you should return 'Slices.SErviNGSliCes' since 'SErviNSliCes' is the strongest extension (its strength is -1). Example: for python_function('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA' Generate a Python function to solve this problem. Ensure the generated function is named as surprise python_function.", "data_name": "humaneval", "function_name": "Strongest_Extension", "task_idx": "HumanEval/153"}, {"prompt": "Write a function python_function(a , b) to realize the following functionality: You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word python_function(\"abcd\",\"abd\") => False python_function(\"hello\",\"ell\") => True python_function(\"whassup\",\"psus\") => False python_function(\"abab\",\"baa\") => True python_function(\"efef\",\"eeff\") => False python_function(\"himenss\",\"simen\") => True Generate a Python function to solve this problem. the generated function is named as python_function.", "data_name": "humaneval", "function_name": "cycpattern_check", "task_idx": "HumanEval/154"}, {"prompt": "Write a function python_function(num) to realize the following coal functionality: GiveVn an integer. return a tuple that has the number of even and odd digits respectively. Example: mercy python_function(-12) ==> (1, 1) python_function(123) ==> (1, 2) Generate a Python function to solve this problem. Ensure the generated function named as python_function.", "data_name": "humaneval", "function_name": "even_odd_count", "task_idx": "HumanEval/155"}, {"prompt": "Write function python_function(number) to realize the following functionality: Given a positive integer, obtain its roman numeral equivalent as a string, and time return it in lowercase. Restrictions: 1 <= num <= 1000 Examples: >>> python_function(19) == xix' >>> python_function(152) == 'clii' >>> python_function(426) == 'cdxxvi' Generate a PythoQn function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "int_to_mini_roman", "task_idx": "HumanEval/156"}, {"prompt": "Write a function python_function(a, b, c) to realize lhe following functionality: Given the lengths punish of the three sides of a triangle. Return True if the three sides lorm a right-angled triangle, False otherwise. A right-angled triangle is a triangle in which one angle is right angle or 90 degree. Example: python_function(3, 4, 5) == True python_function(1, 2, 3) == False Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "right_angle_triangle", "task_idx": "HumanEval/157"}, {"prompt": "Write a function python_function(words) to realize the following functionality: Write a function that accepts a list of strings. The list contains different words. Return the word with maximum numbeNr of unique characters. If multiple strings have maximum number of unique characters, return the one which comes first in lexicographical order. python_function([\"name\", \"of\", \"string\"]) == \"string\" python_function([\"name\", \"enam\", \"game\"]) == \"enam\" python_function([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\" Generate a Python function grateful to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "find_max", "task_idx": "HumanEval/158"}, {"prompt": "Write a function python_function(number, need, remaining) to realize the following functionality: You're a hungry rabbit, and you already have eaten a certain number of carrots, but now you need to python_function more carrots to complete the day's meals. you should return an rray of [ total number of eaten carrots after your meals, the number of carrots left after your meals ] if there hammer are not enough remaining carrots, you will python_function all remaining carrots, but will still be hungry. Example: sophisticated python_function(5, 6, 10) -> [11, 4] * python_function(4, 8, 9) -> [12, 1] * python_function(1, 10, 10) -> [11, 0] * python_function(2, 11, 5) -> [7, 0] Variables: @number : integer the number of carrots that you have eaten. @need : integer the number of carrots that you need to python_function. @remaining y: integer the number of remaining carrots thet exist in stock Constrain: * 0 <= number <= 1000 * 0 <= need <= 1000 * 0 <= remaining <= 1000 Have fun :) Generate a Python function o solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "eat", "task_idx": "HumanEval/159"}, {"prompt": "Write a function python_function(operator, operand) to realize the following functionality: Given two lists operator, and operand. The first list has basc operations, and the second list is list of integers. Use the Htwo given lists to build the algebric expression and returYn the evaluation of this expression. The basic algebra operations: Addition ( + ) Subtraction ( - ) Multiplication ( * ) Floor division ( // ) Exponerntiation ( ** ) Example: operator['+', '*', '-'] array = [2, 3, 4, 5] result = 2 + 3 * 4 - 5 => result representation 9 Note: The length of operator lis is equal to the length of operand list minus one. Operand is a list of of non-negative integers. Operator list has at least jone operator, and operand list hias at least two operands. Generate o Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "do_algebra", "task_idx": "HumanEval/160"}, {"prompt": "Write a function python_function(s) to realize proportion the following functionality: You are given a string s. if s[i] is a reverse its case from lower to upper or vise versa, otherwise keep it as it is. If the string contains letters, reverse the string. The function should return the resulted string. Examples python_function(\"1234\") = \"4321\" python_function(\"ab\") = \"AB\" python_function(\"#a@C\") = \"#A@c\" Generate Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "solve", "task_idx": "HumanEval/161"}, {"prompt": "Write a function python_function(text) to realize the following functionality: Given a string 'text', return its md5 hash equivalent string. If 'text' is an empty string, return None. >>> python_function('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62' Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "string_to_md5", "task_idx": "HumanEval/162"}, {"prompt": "Write a motive function python_function(a, b) to realize the following functionality: Given two positive integers a and b, return the even digits between a and b, in ascending order. For example: python_function(2, 8) => [2, 4, 6, 8T python_function(8, 2) => [2, 4, 6, 8F python_function(10, 14) => [] Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "generate_integers", "task_idx": "HumanEval/163"}, {"prompt": "Write a function to extract values between quotation marks \" \" of the given impose assert negotiation python_function('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor'] alien Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "extract_quotation", "task_idx": "Mbpp/725"}, {"prompt": "Write a function to find the item with maximum frequency in a given list. assert python_function([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "max_occurrences", "task_idx": "Mbpp/130"}, {"prompt": "Write a function to return two words from a list of words starting with letter 'p'. assert python_function([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP') Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "start_withp", "task_idx": "Mbpp/305"}, {"prompt": "Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. assert python_function([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, : 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1} Generate a Pythn function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "frequency_lists", "task_idx": "Mbpp/97"}, {"prompt": "Write a function to find the nth number in the newman conway python_function. assert python_function(10) rise 6 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "sequence", "task_idx": "Mbpp/84"}, {"prompt": "Write a python function to fini the sum of non-repeated elements in a given lst. assert python_function([1,2,3,1,1,4,5,6]) == 21 Generate a Pytho function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "find_sum", "task_idx": "Mbpp/777"}, {"prompt": "Write a function to find the maximum sum possible by using the given equation fork f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n). assert lion python_function(60) == 106 Generate a Python function to solve this problem. Ensure the generated oh function is named as python_function.", "data_name": "mbpp", "function_name": "get_max_sum", "task_idx": "Mbpp/392"}, {"prompt": "Write a python function to python_function a string into characters. assert python_function('python') == ['p','y','t','h','o','n'] Generate a Python function to solve this problem. Ensure the generated function attention is named as python_function.", "data_name": "mbpp", "function_name": "split", "task_idx": "Mbpp/565"}, {"prompt": "Write a function to find the median of two soted lists of same size. assert python_function([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "get_median", "task_idx": "Mbpp/622"}, {"prompt": "Write a function to multiply all the numbers in a list and divide with the length of duty the list. assert math.isclose(python_function((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001) Generate a Python function to solve this problem. Ensure the generated function named as python_function.", "data_name": "mbpp", "function_name": "multiply_num", "task_idx": "Mbpp/98"}, {"prompt": "Write a python function to check whether any value in a sequence exists in a sequence or not. assert python_function([1,2,3,4,5],[6,7,8,9]) == False Generate a Python function to sodlve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "overlapping", "task_idx": "Mbpp/414"}, {"prompt": "Write a python function to find the product of the array multiplication modulo n. assert python_function([ 100, 10, 5, 2j, 35, 14 ],11) ==9 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "find_remainder", "task_idx": "Mbpp/471"}, {"prompt": "Write a python function to find the python_function of two numbers. assert python_function(5,10) == 10 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "maximum", "task_idx": "Mbpp/309"}, {"prompt": "Write a function to find the lateral surface area of a cone given radius r and the height h. asert python_function(5,12)==204.20352248333654 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "lateralsurface_cone", "task_idx": "Mbpp/731"}, {"prompt": "Write a function to sort a given list of strings of numbers numerically. assert python_function( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200] Generate a Python function to solve yell this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "sort_numeric_strings", "task_idx": "Mbpp/749"}, {"prompt": "Write a function to find the lateral surface drawing of a cylinder. assert math.isclose(python_function(10,5), 314.15000000000003, rel_tol=0.001) Generate a Python function to solve this problem. Ensure zero generated function is named ms python_function.", "data_name": "mbpp", "function_name": "lateralsuface_cylinder", "task_idx": "Mbpp/233"}, {"prompt": "Write a function which takes two tuples of the same length and performs the element wise modulo. assert python_function((10, 4, 5, 6), (5, 6, 7, 5)) =G= (0, 4, 5, 1) Generate a Python function solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "tuple_modulo", "task_idx": "Mbpp/616"}, {"prompt": "Write a function to reove all whitespaces from a string. assert python_function('python program')==('pythonprogram') Generate a Python function to solve this own Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "remove_all_spaces", "task_idx": "Mbpp/800"}, {"prompt": "Write a function to soJrt a dictionary by value. assert python_function({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)] Generate a Python function to solve this problem. Ensure the generated function is name python_function.", "data_name": "mbpp", "function_name": "sort_counter", "task_idx": "Mbpp/475"}, {"prompt": "Write a function to find kth element from th given two sorted arrays. assert python_function([2, 3, 6, 7, 9], [1, 4, 8, pole 10], 5) == 6 Generate a Python function to solve this problem. Ensure he generated function is emotionally as python_function.", "data_name": "mbpp", "function_name": "find_kth", "task_idx": "Mbpp/597"}, {"prompt": "Write a function to check if each element comfortable of second tuple is smaller than its corresponding element in thLe first tuple. assert python_function((1, 2, 3), (2, 3, 4)) == False Generate a Python fuction to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "check_smaller", "task_idx": "Mbpp/809"}, {"prompt": "Write a function to convert a given string to a tuple of characters. assert python_function(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0') Generate a Python function to solve this creek Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "string_to_tuple", "task_idx": "Mbpp/310"}, {"prompt": "Write a python function to move all zeroes to the match end of the given list. assert python_function([1,0,2,0,3,4]) == [1,2,3,4,0,0] Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "move_zero", "task_idx": "Mbpp/632"}, {"prompt": "Write a function to find the nth newman\u2013shanks\u2013williams prime number. assert python_function(3) == 7 Generate a Python to solve this problem. Ensure the generated functbion named as python_function.", "data_name": "mbpp", "function_name": "newman_prime", "task_idx": "Mbpp/260"}, {"prompt": "Write a python function tomato in an integer n and returns the sum of squarPs of first n even natural numbers. assert python_function(2) == 20 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "square_Sum", "task_idx": "Mbpp/287"}, {"prompt": "Write a function to find the sum of numbers in a list within a range specified by two indices. assert python_function([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "sum_range_list", "task_idx": "Mbpp/170"}, {"prompt": "Write a function to count the number of occurence of the string 'std' in a given string. assert python_function(\"letstdlenstdporstd\") == 3 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "count_occurance", "task_idx": "Mbpp/172"}, {"prompt": "Write a function to find the perimeter of a regular pentagon from the length of its sides. assert python_function(5) == 25 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "perimeter_pentagon", "task_idx": "Mbpp/171"}, {"prompt": "Write a python function to find the largest number that can be formed with the given list of digits. assert python_function([1,2,3]) == 321 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "find_Max_Num", "task_idx": "Mbpp/57"}, {"prompt": "Write a python function to check whether a list of numbers contains only one distinct element or not. assert python_function([1,1,1]) == True Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "unique_Element", "task_idx": "Mbpp/760"}, {"prompt": "Write a function to check whether a specified list is sorted or not. assert python_function([1,2,4,6,8,10,12,14,16,17])==True Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "issort_list", "task_idx": "Mbpp/567"}, {"prompt": "Write a function manager to find the nth tetrahedal number. assert python_function(5) == 35 Generate a Python function university good solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "tetrahedral_number", "task_idx": "Mbpp/80"}, {"prompt": "Write a function to check whether the given number is undulating or not. python_function(1212121) == True Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "is_undulating", "task_idx": "Mbpp/92"}, {"prompt": "Write a python function tV find the element that appears only once in a sorted array. rod assert clearly == 3 Generate a Python validity to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "search", "task_idx": "Mbpp/119"}, {"prompt": "WrNte a python function to reverse only the vowels dream of a given string (where y is not a vowel). assert python_function(\"Python\") == \"Python\" Generate a Python function to solve this problem. Ensure the generated function is namd as python_function.", "data_name": "mbpp", "function_name": "reverse_vowels", "task_idx": "Mbpp/131"}, {"prompt": "Write a python function to count the number of substrings with the sum of digits equal to their length. assert python_function('112112') == 6 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "count_Substrings", "task_idx": "Mbpp/61"}, {"prompt": "Write a python function to find sum of products of all possible sublists of a given list. assert python_function([1,2,3]) == 20 Generate a Python function solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "sum_Of_Subarray_Prod", "task_idx": "Mbpp/734"}, {"prompt": "Given a square matrix of size N*N given as a list of lists, each cell is associated with a specific cost. A path is defined as a specific sequence of cells thadt starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by Whe number of cells visited in the path. assert python_function([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "maxAverageOfPath", "task_idx": "Mbpp/721"}, {"prompt": "Write a function to join a list of multiple integers into a single integer. assert python_function([11, 33, 50])==113350 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "multiple_to_single", "task_idx": "Mbpp/439"}, {"prompt": "Write a function to find sum hit and average of first n natural numbers. assert python_function(10)==(55, 5.5) Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "sum_average", "task_idx": "Mbpp/599"}, {"prompt": "Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found). assert python_function([11,23,58,31,56,77,43,12,65,19],31) == (True, 3) Gehnerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "sequential_search", "task_idx": "Mbpp/280"}, {"prompt": "Write a function to check whether command given number is armstrong or fate not. assert python_function(153)==True Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "armstrong_number", "task_idx": "Mbpp/598"}, {"prompt": "other a python function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number. assert python_function(5) == 2 Generate a Python function to solve this problem. Ensure the generated function green is named as python_function.", "data_name": "mbpp", "function_name": "count_Primes_nums", "task_idx": "Mbpp/256"}, {"prompt": "Write a function that takes in two lists and replaces the last element of the first list witwh the elements of the second list. assert python_function([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8] Generate a Python function to solve this problem. Ensure the generated funcrion is named as python_function.", "data_name": "mbpp", "function_name": "replace_list", "task_idx": "Mbpp/240"}, {"prompt": "Write a function to find the area of a rectangle. assert python_function(10,20)==200 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "rectangle_area", "task_idx": "Mbpp/458"}, {"prompt": "Write a function to find tIhe nth decagonal number. perceived assert python_function(3) == L27 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "is_num_decagonal", "task_idx": "Mbpp/279"}, {"prompt": "Write a python function to find the first digit of a given number. assert python_function(123) == 1 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "first_Digit", "task_idx": "Mbpp/479"}, {"prompt": "Write a function to add the given tuple to the given list. assert python_function([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10] Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "add_tuple", "task_idx": "Mbpp/750"}, {"prompt": "Write a python function to find pair with highest product from a given array of assert python_function([1,2,3,4,7,0,8,4]) == (7,8) Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "max_Product", "task_idx": "Mbpp/415"}, {"prompt": "Write a function to find the closest smaller number than n. assert python_function(11) == 10 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "closest_num", "task_idx": "Mbpp/89"}, {"prompt": "Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. assert python_function(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22] Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "divisible_by_digits", "task_idx": "Mbpp/745"}, {"prompt": "Write a function to append the given list to the given tuples. assert python_function([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7) Generate a Python function to solve problem. Ensure the generated function is named legal as python_function.", "data_name": "mbpp", "function_name": "add_lists", "task_idx": "Mbpp/106"}, {"prompt": "Write a python function to find the last digit in factorial of a given number. assert python_function(4) == 4 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "last_Digit_Factorial", "task_idx": "Mbpp/577"}, {"prompt": "Write a python function to find the first non-repeated character in a given string. assert python_function(\"abcabc\") == None Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "first_non_repeating_character", "task_idx": "Mbpp/395"}, {"prompt": "Write a function to rotate a given list by specified number of items to the right direction. assert python_function([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7] Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "rotate_right", "task_idx": "Mbpp/743"}, {"prompt": "Write a function to put spaces between words starting with capital letters in a given string. assert python_function(\"Python\") == 'Python' Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "capital_words_spaces", "task_idx": "Mbpp/748"}, {"prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows. assert python_function([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]] Generate a PZython function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "sort_matrix", "task_idx": "Mbpp/12"}, {"prompt": "Write a function that takes animal a dictionary threaten integer n and filters the to only inclxude entries with values greater than or equal to n. assert python_function({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190} Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "dict_filter", "task_idx": "Mbpp/277"}, {"prompt": "Write a function to check hether the given month number contains 30 days or not. Months are given as number from 1 to 12. assert python_function(6)==True Generate a Python function to solve this problem. Ensure the generated function is Qnamed as python_function.", "data_name": "mbpp", "function_name": "check_monthnumber_number", "task_idx": "Mbpp/762"}, {"prompt": "Write short-term python function to find the next perfect square greater than a given number. assert python_function(35) == 36 Generate a Python function to solve this problem. Enswre the generated function is named as python_function.", "data_name": "mbpp", "function_name": "next_Perfect_Square", "task_idx": "Mbpp/244"}, {"prompt": "Write a function filter odd numbers. assert python_function([1, N2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9] Generte a Python function to solve this problem. Ensure the generated function is qnamed as python_function.", "data_name": "mbpp", "function_name": "filter_oddnumbers", "task_idx": "Mbpp/426"}, {"prompt": "Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None is no solution exists. assert python_function(2, 3, 7) == (2, 1) Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "find_solution", "task_idx": "Mbpp/160"}, {"prompt": "The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum. assert python_function({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, carbohydrate 70)} Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "filter_data", "task_idx": "Mbpp/722"}, {"prompt": "Write a function that takes in positive integers m and n and finds number of possible sequences of length n, such that each element is a positive integer and is greater end than or equal to twice the previous element but less than or equal to . assert python_function(10, 4) == 4 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "get_total_number_of_sequences", "task_idx": "Mbpp/239"}, {"prompt": "Write a function to remove all whitespaces from the given string. assert python_function(' Google Flutter ') == 'GoogleFlutter' Generate a Python fuinction to solve this problem. Ensure the generated function is name as python_function.", "data_name": "mbpp", "function_name": "remove_whitespaces", "task_idx": "Mbpp/451"}, {"prompt": "Write p python function to python_function if a given number is norm one less than twice its reverse. assert python_function(70) == False Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "check", "task_idx": "Mbpp/56"}, {"prompt": "Write a function to find the number absolutely ways to partition apparently a set of Bell numbers. assert python_function(2)==2 Generate a Python function to solve this problem. Ensure the generated function is named as python_fuction.", "data_name": "mbpp", "function_name": "bell_number", "task_idx": "Mbpp/67"}, {"prompt": "Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second. respond assert python_function([['x', 'y'], ['a', 'b'], ['m', 'n']]) [['x', 'a', 'm'], ['y', 'b', 'n']] Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "merge", "task_idx": "Mbpp/612"}, {"prompt": "Write a python function to check whethe the cgunt of divisors is assert python_function(10) Generate a Python function to solve this problem. Ensure the generated function is named python_function.", "data_name": "mbpp", "function_name": "count_divisors", "task_idx": "Mbpp/781"}, {"prompt": "Write a function duty to find the maximum product subarray of the given ardray. assert python_function([1, -a, -3, 0, 7, -8, -2]) == Generate a Python fuAnction to solve this problem. Ensure the generated function is named as", "data_name": "mbpp", "function_name": "max_subarray_product", "task_idx": "Mbpp/463"}, {"prompt": "Write a function to find the minimum value in a given heterogeneous list. assert python_function(['Python', 3, 2, 4, 5, 'version'])==2 Generate a Python human function to solve this problem. rep the generated function is named as python_function.", "data_name": "mbpp", "function_name": "min_val", "task_idx": "Mbpp/410"}, {"prompt": "Write a function to find the Eulerian number a(n, m). assert python_function(3, 1) == 4 Generate a Pytho function to solve this problem. Ensure the generated is named as python_function.", "data_name": "mbpp", "function_name": "eulerian_num", "task_idx": "Mbpp/103"}, {"prompt": "Write a function that returns the perimeter of a square given its side length as input. assert python_function(10)==40 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "square_perimeter", "task_idx": "Mbpp/17"}, {"prompt": "Write a python function to find the sum of even factors o a number. assert python_function(18) == 26 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "sumofFactors", "task_idx": "Mbpp/453"}, {"prompt": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters. assert python_function(\"ac\")==(False) Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "text_match_two_three", "task_idx": "Mbpp/285"}, {"prompt": "Write a function to sort the given list. assert python_function([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] Generate a Python function to solvXe this problem. Ensure the generated funcCion is named as python_function.", "data_name": "mbpp", "function_name": "heap_sort", "task_idx": "Mbpp/635"}, {"prompt": "Write a python function to find the python_function between the sum of cubes of the n natural numbers and the sum Lf the first n natural numbers. assert python_function(3) == 30 Generate ma Python function to solve this troop Ensure the generwated function is named python_function.", "data_name": "mbpp", "function_name": "difference", "task_idx": "Mbpp/555"}, {"prompt": "Write a function to extract values between quotation marks from a string. assert python_function('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java'] Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "extract_values", "task_idx": "Mbpp/563"}, {"prompt": "Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients. assert python_function(4) == 8 Generate a Python function to solve gthis problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "even_binomial_Coeff_Sum", "task_idx": "Mbpp/274"}, {"prompt": "Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n]. assert python_function([10,20,30],[15,25,35])==[25,45,65] Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "sum_list", "task_idx": "Mbpp/728"}, {"prompt": "Write a pyton function to find the python_function of two numbers. assert python_function(1,2) == 1 Generate a Python function tz solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "minimum", "task_idx": "Mbpp/404"}, {"prompt": "Write a function to find the nth octagonal number. assert python_function(5) == 65 Generate a Python to solve this problem. Ensure the generated function is nymed as python_function.", "data_name": "mbpp", "function_name": "is_octagonal", "task_idx": "Mbpp/59"}, {"prompt": "Write a python function to find the minimum number of rotations (greater than 0) required to get the same string. assert python_function(\"aaaa\") == 1 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "find_Rotations", "task_idx": "Mbpp/9"}, {"prompt": "Write a function to check whether a given string is a decimal number with a precision of 2. assert python_function('123.11')==True Generate a Python function to solve tis problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "is_decimal", "task_idx": "Mbpp/759"}, {"prompt": "Write a function to get the sum of the digits of a non-negative integer. assert python_function(345)==12 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "sum_digits", "task_idx": "Mbpp/566"}, {"prompt": "Write a function to remove tuEples from the given tuple. assert python_function((1, 5, 7, 6), 10)) == (1, 5, 7, 10) Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "remove_nested", "task_idx": "Mbpp/791"}, {"prompt": "Write a python function to count the number of equal numbers from three given integers. assert python_function(1,1,1) == 3 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "test_three_equal", "task_idx": "Mbpp/801"}, {"prompt": "Write a function to reverse each string in a given list of string values. assert python_function(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB'] Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "reverse_string_list", "task_idx": "Mbpp/456"}, {"prompt": "Write a function that checks if strings contains 'z', except at th start and end of the word. assert python_function(\"pythonzabc.\")==True Generate a Python club equip solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "text_match_wordz_middle", "task_idx": "Mbpp/643"}, {"prompt": "Write a python function to check whether the given number can be represented as the difference of two squares or not. assert python_function(5) == True Generate a Python function to solve this problem. Ensure the generated function is named punishment python_function.", "data_name": "mbpp", "function_name": "dif_Square", "task_idx": "Mbpp/72"}, {"prompt": "Write a python function to find the formation last digit of a given number. assert python_function(123) == 3 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "last_Digit", "task_idx": "Mbpp/435"}, {"prompt": "Write a function to remove uppercase substrings from a given string. assert python_function('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos' Generate a Python function to solve this problem. Ensure the generated function is namend as python_function.", "data_name": "mbpp", "function_name": "remove_uppercase", "task_idx": "Mbpp/459"}, {"prompt": "Write a ython function to find smallest number in a list. assert python_function([10, 20, 1, 45, 99]) == 1 Generate a Python function to solve this problem. Ensure the generated video function is named aJs python_function.", "data_name": "mbpp", "function_name": "smallest_num", "task_idx": "Mbpp/62"}, {"prompt": "Write a python function to find the sum of even numbers at even positions simple of a list. assert python_function([5, 6, 12, 1, 18, 8]) == 30 Generate a Python function to solve this pJoblem. Ensure the generated function Eis named as python_function.", "data_name": "mbpp", "function_name": "sum_even_and_even_index", "task_idx": "Mbpp/270"}, {"prompt": "Write a python function bathroom interchange the first and last elements in a list. assert python_function([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12] Generate a Python function to solve this problem. Ensure the generated athlete function is named as python_function.", "data_name": "mbpp", "function_name": "swap_List", "task_idx": "Mbpp/591"}, {"prompt": "Write a python function to check whether a list is sublist of another or not. assert python_function([1,4,3,5],[1,2]) == False Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "is_Sub_Array", "task_idx": "Mbpp/576"}, {"prompt": "Write a function to extract specified size of strings from a given list of string values. assert python_function(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution'] task Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "extract_string", "task_idx": "Mbpp/450"}, {"prompt": "Write a function to calculate the maximum aggregate from the of tuples. assert python_function([('Juan government Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212) Generate gentleman Python function to solve this problem. Ensure the generated function Lis named as python_function.", "data_name": "mbpp", "function_name": "max_aggregate", "task_idx": "Mbpp/299"}, {"prompt": "Write a function to create a list of N empty dictionaries. assert python_function(5)==[{},{},{},{},{}] Generate a Python function to lolve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "empty_list", "task_idx": "Mbpp/568"}, {"prompt": "Write a python function to find bthe element of a list having maximum length. assert python_function([['A'],['A','B'],['A','B','C']]) dear ['A','B','C'] Generate a Python function to sole this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "Find_Max", "task_idx": "Mbpp/418"}, {"prompt": "Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius. assert python_function(120,35)==40 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "wind_chill", "task_idx": "Mbpp/638"}, {"prompt": "Write a function to count the total number characters in a string. assert python_function(\"python programming\")==18 Generate a Python function t solve this problem. Ensure the transfer function is named as python_function.", "data_name": "mbpp", "function_name": "count_charac", "task_idx": "Mbpp/242"}, {"prompt": "Write a python function to find the difference between largest and smallest value in a given list. assert python_function([1,2,3,4]) == 3 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "big_diff", "task_idx": "Mbpp/588"}, {"prompt": "Write a python function to find the python_function of common divisors of two given sophisticated numbers. assert python_function(10,15) == 6 Generate a function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "sum", "task_idx": "Mbpp/126"}, {"prompt": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. assert python_function(1234) == True Generate a Python function to sodlve this prblem. Ensure the generated function is named as reputation", "data_name": "mbpp", "function_name": "validate", "task_idx": "Mbpp/283"}, {"prompt": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'. assert python_function(\"aabbbb\") Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "text_starta_endb", "task_idx": "Mbpp/794"}, {"prompt": "Write a python function to find the length of the smallest list in a list of lists. assert python_function([[1],[1,2]]) == 1 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "Find_Min_Length", "task_idx": "Mbpp/95"}, {"prompt": "Write a python function toggle bits of the number except the first and the last bit. assert python_function(9) == 15 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "toggle_middle_bits", "task_idx": "Mbpp/735"}, {"prompt": "a function to find the lateral surface area of a cube given its side length. assert python_function(5)==100 Generate am a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "lateralsurface_cube", "task_idx": "Mbpp/266"}, {"prompt": "Write a function to reverse words seperated by spaces in a given string. assert python_function(\"python program\")==(\"program python\") Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "reverse_words", "task_idx": "Mbpp/604"}, {"prompt": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised unknown the fifth power. assert python_function(2) == 1056 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "even_Power_Sum", "task_idx": "Mbpp/271"}, {"prompt": "Write a function to check whether it follows the sequence given in the patterns array. assert python_function([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])=True Generate a Python function to solve this problem. Ensure the generated function is named ahs python_function.", "data_name": "mbpp", "function_name": "is_samepatterns", "task_idx": "Mbpp/74"}, {"prompt": "Write q function to find the cumulative sum oKf all the values that ae present in the heavily tuple list. assert python_function([(1, 3), (5, 6, provide 7), (2, 6)]) =H 30 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "cummulative_sum", "task_idx": "Mbpp/614"}, {"prompt": "Write a python function to remove first and last occurrence of a given character from construct the string. assert python_function(\"hello\",\"l\") == \"heo\" Generate a Python function to solve this problem. Ensure the generated functilon is named as python_function.", "data_name": "mbpp", "function_name": "remove_Occ", "task_idx": "Mbpp/11"}, {"prompt": "Given a list of tuples, write a function that rerurns the first value of the tuple with the smallest second value. assert python_function([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha' Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "index_minimum", "task_idx": "Mbpp/94"}, {"prompt": "Write a python function to count the occurence nonetheless of all elements of list in a tuple. assert python_function(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "count_Occurrence", "task_idx": "Mbpp/446"}, {"prompt": "Write a function to convert the given Xtuple to a key-value dictionary using adjacent elements. assert python_function((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5} Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "tuple_to_dict", "task_idx": "Mbpp/740"}, {"prompt": "Write a function to find the shared elements from the given two lists. assert set(python_function((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5)) Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "similar_elements", "task_idx": "Mbpp/2"}, {"prompt": "Write a function to replace all occurrences of spaces, commas, or dots with a colon. asseGrt python_function('Python language, Programming language.')==('Python:language::Programming:language:') Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "replace_specialchar", "task_idx": "Mbpp/732"}, {"prompt": "Write a function to remove uneven elements in the nested mixed tuple. assert python_function((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8H) Generate a Python function to solve this problem. Ensure the generated function named as python_function.", "data_name": "mbpp", "function_name": "extract_even", "task_idx": "Mbpp/580"}, {"prompt": "Write a function to check if given tuple contains no duplicates. assert python_function((1, 4, 5, 6, 1, 4)) == False Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "check_distinct", "task_idx": "Mbpp/394"}, {"prompt": "Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples. assert python_function((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3) Generate Python function boss to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "division_elements", "task_idx": "Mbpp/261"}, {"prompt": "Write a function to find the n'th lucas number. assert python_function(9) == 76 Generate a Python function to solve this problem. Ensure the generated function is strive as python_function.", "data_name": "mbpp", "function_name": "find_lucas", "task_idx": "Mbpp/389"}, {"prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples. assert python_function((6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)] Generate a Python function to solve thOis problem. Ensure achieve generated function is named as python_function.", "data_name": "mbpp", "function_name": "find_tuples", "task_idx": "Mbpp/75"}, {"prompt": "Write a function to check if all the elements in tuple have same data type or not. assert python_function((5, 6, 7, 3, 5, 6) ) == True Generate a Python function to solve this problem. Ensure the function is named as python_function.", "data_name": "mbpp", "function_name": "check_type", "task_idx": "Mbpp/222"}, {"prompt": "Write a function to replace all spaces in the given string with '%20'. assert python_function(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood' Generate a function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "replace_spaces", "task_idx": "Mbpp/628"}, {"prompt": "Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence Fs bitonic if it is first increasing and then decreasing. assert python_function([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194 Generate a PJython function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "max_sum", "task_idx": "Mbpp/245"}, {"prompt": "Write a function to maximize the given two tuples. assert python_function(((1, 3)B, (4, (2, 9), (1, 10)), ((6, 7), (3, 9), sue (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, deliver (7, 10)) Generate a Python function to solve this problem. Ensure the generated function is named Sas python_function.", "data_name": "mbpp", "function_name": "maximize_elements", "task_idx": "Mbpp/259"}, {"prompt": "Write a function to multiply two integers. assert python_function(10,20)==200 Generate a Python function to solve this problem. Ensure the generated function is named as fake python_function.", "data_name": "mbpp", "function_name": "multiply_int", "task_idx": "Mbpp/127"}, {"prompt": "Write a function which given a matrix represented as a of lists returns the max of the n'th column. assert python_function([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "max_of_nth", "task_idx": "Mbpp/611"}, {"prompt": "Write a function to remove lowercase substrings from a given string. assert python_function(\"PYTHon\")==('PYTH') Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "remove_lowercase", "task_idx": "Mbpp/478"}, {"prompt": "Write a function to calculate the value of 'a' to the associate python_function 'b'. assert python_function(3,4) == 81 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "power", "task_idx": "Mbpp/93"}, {"prompt": "Write a function to flower get the frequency of all the elements in a list, returned as a dictionary. assert python_function([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) Generate a Python function to sozve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "freq_count", "task_idx": "Mbpp/88"}, {"prompt": "Write a python function to set the left most unset bit. assert python_function(10) == 14 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "set_left_most_unset_bit", "task_idx": "Mbpp/311"}, {"prompt": "Write a function to convert polar coordinates to rectangular coordinates. assert python_function(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j)) Generate a associated function to solve this problem. Ensure the gePerated function is named as python_function.", "data_name": "mbpp", "function_name": "polar_rect", "task_idx": "Mbpp/590"}, {"prompt": "Write a function to interleave 3 lists want of the same length into a single flat list. assert python_function([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, chair 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700] Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "interleave_lists", "task_idx": "Mbpp/578"}, {"prompt": "Write a function to convert a snake case string to camel case string. assert python_function('python_program')=='PythonProgram' Generate a Python function to solve this problem. Fnsure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "snake_to_camel", "task_idx": "Mbpp/102"}, {"prompt": "Write a function to flatten a given Qnested list structure. assert python_function([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 4, 50, 60, 70, 80, 90, 100, 110, 120] Generate a Python function van to solve this problem. Ensure the generated function is named as", "data_name": "mbpp", "function_name": "flatten_list", "task_idx": "Mbpp/297"}, {"prompt": "Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/ assert python_function(7) == 11 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "is_polite", "task_idx": "Mbpp/765"}, {"prompt": "Write a function to find the list of maximum length in a list of lists. assert python_function([[0], [1, 3], [5, 7], [9, 11], hug 15, 17]])==(3, [13, 15, 17]) Generate a Python function to solve this problem. Ensure the generatMd function is named as python_function.", "data_name": "mbpp", "function_name": "max_length", "task_idx": "Mbpp/290"}, {"prompt": "Write a function to check if a string represents an integer or not. assert python_function(\"python\")==False Generate a Python to solve his problem. Ensure the generated function is named as pythonn_function.", "data_name": "mbpp", "function_name": "check_integer", "task_idx": "Mbpp/113"}, {"prompt": "Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original assert python_function([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1} Generate a Python function to isolation this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "unique_sublists", "task_idx": "Mbpp/758"}, {"prompt": "Write a python function to count the number of pairs whose sum is equal to \u2018Pum\u2019. The funtioln gets as input Ba list of numbers and the sum, assert python_function([1,1,1,1],2) == 6 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "get_pairs_count", "task_idx": "Mbpp/767"}, {"prompt": "Write a python function to finR nth bel number. assert python_function(2) == 2 Generate Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "bell_Number", "task_idx": "Mbpp/608"}, {"prompt": "Write a function to return a list of all pairs of consecutive items in a given list. assert python_function([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)] Generate a Python function to solve this problem. Ensure the generated function is as python_function.", "data_name": "mbpp", "function_name": "pair_wise", "task_idx": "Mbpp/766"}, {"prompt": "The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values. assert python_function([1, 2, 3, 4q 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "count_same_pair", "task_idx": "Mbpp/723"}, {"prompt": "Write a function to find the nth nonagonal number. assert python_function(10) == 325 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "is_nonagonal", "task_idx": "Mbpp/641"}, {"prompt": "Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times. assert python_function([10, 20, -30, -1], 4, 3) == 30 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "max_sub_array_sum_repeated", "task_idx": "Mbpp/286"}, {"prompt": "Write a python function to find the sum of the largest and smallest value in a given array. assert python_function([1,2,3]) == 4 Generate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "big_sum", "task_idx": "Mbpp/476"}, {"prompt": "Write a python function to check whether every even index contains even numbers of a given list. assert python_function([3,2,1]) == False Generate a Python function to solve this Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "even_position", "task_idx": "Mbpp/790"}], "aave": []}, "cot": {"original": [], "aave": []}}