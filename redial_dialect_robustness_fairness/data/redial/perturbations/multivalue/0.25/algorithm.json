{"vanilla": {"original": [{"prompt": "Write a functions python_function(numbers: List[float], threshold: float) -> bool to realize the following functionality:\nCheck if in gave list of numbers, are any two numbers closer to each other than gave threshold.\n>>> python_function([1.0, 2.0, 3.0], 0.5)\nFalse\n>>> python_function([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\nTrue\nGenerate a Python functions to solve this problem. Ensure the generated functions are named as python_function.", "data_name": "humaneval", "function_name": "has_close_elements", "task_idx": "HumanEval/0"}, {"prompt": "Write a function python_function(paren_string: str) -> List[str] to realize the following functionality:\nInput to this function a string containing multiple groups of nested parenthesises. Your goal is to separate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other Ignore any spaces in the input string.\n>>> python_function('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "separate_paren_groups", "task_idx": "HumanEval/1"}, {"prompt": "Write a function python_function(number: float) -> float to realize the following functionality:\nGave a positive floating point number, it can be decomposed into and integer part (largest integer more smaller than gave number) and decimals (leftover part always more smaller than 1).\nReturn the decimal part of the number.\n>>> python_function(3.5)\n0.5\n\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "truncate_number", "task_idx": "HumanEval/2"}, {"prompt": "Write a function python_function(operations: List[int]) -> bool to realize the following functionality:\nY'all're gave a list of deposit and withdrawal operations on a bank account that starts with zero balance. Your task is to detect if at any point the balance of account fallls below zero, and at that there point function should return True. Otherwise it should return False.\n>>> python_function([1, 2, 3])\nFalse\n>>> python_function([1, 2, -4, 5])\nTrue\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "below_zero", "task_idx": "HumanEval/3"}, {"prompt": "Write a function python_function(numbers: List[float]) -> float to realize the following functionality:\nFor a given list of input numbers, calculate Mean Absolute Deviation around the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each element and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> python_function([1.0, 2.0, 3.0, 4.0])\n1.0\n\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "mean_absolute_deviation", "task_idx": "HumanEval/4"}, {"prompt": "Write a function python_function(numbers: List[int], delimeter: int) -> List[int] to realize the following functionality:\nInsert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>>> python_function([], 4)\n[]\n>>> python_function([1, 2, 3], 4)\n[1, 4, 2, 4, 3]\n\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "intersperse", "task_idx": "HumanEval/5"}, {"prompt": "Write a function python_function(paren_string: str) -> List[int] to realize the following functionality:\nInput to this function is a string represent multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> python_function('(()()) ((())) () ((())()())')\n[2, 3, 1, 3]\n\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "parse_nested_parens", "task_idx": "HumanEval/6"}, {"prompt": "Write a function python_function(strings: List[str], substring: str) -> List[str] to realize the following functionality:\nFilter an input list of strings only for ones that contain given substring\n>>> python_function([], 'a')\n[]\n>>> python_function(['abc', 'bacd', 'cde', 'array'], 'a')\n['abc', 'bacd', 'array']\n\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "filter_by_substring", "task_idx": "HumanEval/7"}, {"prompt": "Write a function python_function(numbers: List[int]) -> Tuple[int, int] to realize the following functionality:\nFor a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> python_function([])\n(0, 1)\n>>> python_function([1, 2, 3, 4])\n(10, 24)\n\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "sum_product", "task_idx": "HumanEval/8"}, {"prompt": "Write a function python_function(numbers: List[int]) -> List[int] to realize the following functionality:\nFrom a given list of integers, generate a list of rolling maximum element found until given moment in the sequence.\n>>> python_function([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]\n\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "rolling_max", "task_idx": "HumanEval/9"}, {"prompt": "Write a function python_function(string: str) -> str to realize the following functionality:\nFind the most short palindrome that begin with a supplied string.\nAlgorithm idea is simple:\n- Find the most long postfix of supplied string that a palindrome.\n- Append to the end of the string reverse of a string prefix that come before the palindromic suffix.\n>>> python_function('')\n''\n>>> python_function('cat')\n'catac'\n>>> python_function('cata')\n'catac'\n\ndef is_palindrome(string: str) -> bool:\n    \\\"\\\"\\\" Test if given string is a palindrome \\\"\\\"\\\"\nreturn string == string[::-1]\nGenerate a Python function to solve this here problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "make_palindrome", "task_idx": "HumanEval/10"}, {"prompt": "Write a function python_function(a: str, b: str) -> str to realize the following functionality:\nInput are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these here inputs and return result also as a string.\n>>> python_function('010', '110')\n'100'\n\nGenerate a Python function to solve this problem. Ensure that generated function is named as python_function.", "data_name": "humaneval", "function_name": "string_xor", "task_idx": "HumanEval/11"}, {"prompt": "Write a function python_function(strings: List[str]) -> Optional[str] to realize the following functionality:\nOut of list of strings, return the python_function one. Return the first one in case of multiple strings of the same length. Return None in no case the input list is empty.\n>>> python_function([])\n>>> python_function(['a', 'b', 'c'])\n'a'\n>>> python_function(['a', 'bb', 'ccc'])\n'ccc'\n\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "longest", "task_idx": "HumanEval/12"}, {"prompt": "Write a function python_function(a: int, b: int) -> int to realize the following functionality:\nReturn a most great common divisor of two integers a and b\n>>> python_function(3, 5)\n1\n>>> python_function(25, 15)\n5\n\nGenerate a Python functions to solve this problem. Ensure the generated functions are named as python_function.", "data_name": "humaneval", "function_name": "greatest_common_divisor", "task_idx": "HumanEval/13"}, {"prompt": "Write a function python_function(string: str) -> List[str] to realize the following functionality:\nReturn list of all prefixes from most shortest to most longest of the input string\n>>> python_function('abc')\n['a', 'ab', 'abc']\n\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "all_prefixes", "task_idx": "HumanEval/14"}, {"prompt": "Write a function python_function(n: int) -> str to realize the following functionality:\nReturn a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> python_function(0)\n'0'\n>>> python_function(5)\n'0 1 2 3 4 5'\n\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "string_sequence", "task_idx": "HumanEval/15"}, {"prompt": "Write a function python_function(string: str) -> int to realize the following functionality:\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> python_function('xyzXYZ')\n3\n>>> python_function('Jerry')\n4\n\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "count_distinct_characters", "task_idx": "HumanEval/16"}, {"prompt": "Write a function python_function(music_string: str) -> List[int] to realize the following functionality:\nInput to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return list of integers corresponding to how many beats does each not last.\nHere is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one beat\n>>> python_function('o o| .| o| o| .| .| .| .| o o')\n[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "parse_music", "task_idx": "HumanEval/17"}, {"prompt": "Write a function python_function(string: str, substring: str) -> int to realize the following functionality:\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> python_function('', 'a')\n0\n>>> python_function('aaa', 'a')\n3\n>>> python_function('aaaa', 'aa')\n3\n\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "how_many_times", "task_idx": "HumanEval/18"}, {"prompt": "Write a function python_function(numbers: str) -> str to realize the following functionality:\nInput is a space-delimited string of numberals from 'zero' to 'nine'.\nValid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\nReturn the string with numbers sorted from smallest to largest\n>>> python_function('three one five')\n'one three five'\n\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "sort_numbers", "task_idx": "HumanEval/19"}, {"prompt": "Write a function python_function(numbers: List[float]) -> Tuple[float, float] to realize the following functionality:\nFrom a supplied list of numbers (of length at least two) select and return two that the closest to each other and return them in order (smaller number, larger number).\n>>> python_function([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n(2.0, 2.2)\n>>> python_function([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n(2.0, 2.0)\n\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "find_closest_elements", "task_idx": "HumanEval/20"}, {"prompt": "Write a function python_function(numbers: List[float]) -> List[float] to realize the following functionality:\nGiven list of numbers (of at least two elements), apply a linear transform to that list,\nsuch that the smallest number would become 0 and the largest would become 1\n>>> python_function([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.25, 0.5, 0.75, 1.0]\n\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "rescale_to_unit", "task_idx": "HumanEval/21"}, {"prompt": "Write a function python_function(values: List[Any]) -> List[int] to realize the following functionality:\nIt is list of any python values only for integers that filter given\n>>> python_function(['a', 3.14, 5])\n[5]\n>>> python_function([1, 2, 3, 'abc', {}, []])\n[1, 2, 3]\n\nGenerate a Python function for to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "filter_integers", "task_idx": "HumanEval/22"}, {"prompt": "Write a function python_function(string: str) -> int to realize the following functionality:\nReturn length of given string\n>>> python_function('')\n0\n>>> python_function('abc')\n3\n\nGenerate a Python function for to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "strlen", "task_idx": "HumanEval/23"}, {"prompt": "Write a function python_function(n: int) -> int to realize the following functionality:\nFor a given number n, find the largest number that divides n evenly, smaller than n\n>>> python_function(15)\n5\n\nGenerate a Python function to solve this here problem. Ensure the generate function is named as python_function.", "data_name": "humaneval", "function_name": "largest_divisor", "task_idx": "HumanEval/24"}, {"prompt": "Write a function python_function(n: int) -> List[int] to realize the following functionality:\nReturn list of prime factors of gave integer in that order from smallest to largest.\nEach of the factors might should be listed number of times corresponding to how many times it is appearing in factorization.\nInput number should be equal to that product of all factors\n>>> python_function(8)\n[2, 2, 2]\n>>> python_function(25)\n[5, 5]\n>>> python_function(70)\n[2, 5, 7]\n\nDo Generate a Python function to solve this problem. Do Ensure that generated function is named as python_function.", "data_name": "humaneval", "function_name": "factorize", "task_idx": "HumanEval/25"}, {"prompt": "Write a function python_function(numbers: List[int]) -> List[int] to realize the following functionality:\nFrom a list of integers, remove all elements that occur more and once.\nDo Keep order of elements leaved the same as in the input.\n>>> python_function([1, 2, 3, 2, 4])\n[1, 3, 4]\n\nAre Generating a Python function to solve this problem. Are Ensuring the generated function is named as python_function.", "data_name": "humaneval", "function_name": "remove_duplicates", "task_idx": "HumanEval/26"}, {"prompt": "Write a function python_function(string: str) -> str to realize the following functionality:\nFor a gave string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> python_function('Hello')\n'hELLO'\n\nGenerate a Python functions to solve this here problem. Ensure the generated functions are named as python_function.", "data_name": "humaneval", "function_name": "flip_case", "task_idx": "HumanEval/27"}, {"prompt": "Write a function python_function(strings: List[str]) -> str to realize the following functionality:\nConcatenate list of strings into a single string\n>>> python_function([])\n''\n>>> python_function(['a', 'b', 'c'])\n'abc'\n\nGenerate a Python function to solve this here problem. Ensure that generated function is named as python_function.", "data_name": "humaneval", "function_name": "concatenate", "task_idx": "HumanEval/28"}, {"prompt": "Write a function python_function(string: List[str], prefix: str) -> List[str] to realize the following functionality:\nFilter an input list of string only for one that start with a given prefix.\n>>> python_function([], 'a')\n[]\n>>> python_function(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc', 'array']\n\nGenerate one Python function to solve this problem. Ensure that generated function is named as python_function.", "data_name": "humaneval", "function_name": "filter_by_prefix", "task_idx": "HumanEval/29"}, {"prompt": "Write a functions python_function(l: list) to realize the following functionality:\nReturn only positive number in that list.\n>>> python_function([-1, 2, -4, 5, 6])\n[2, 5, 6]\n>>> python_function([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n[5, 3, 2, 3, 9, 123, 1]\n\nGenerate a Python functions to solve this problem. Ensure the generated functions are named as python_function.", "data_name": "humaneval", "function_name": "get_positive", "task_idx": "HumanEval/30"}, {"prompt": "Write a functions python_function(n) to realize the following functionality:\nReturn true if a given number prime, and false otherwise.\n>>> python_function(6)\nFalse\n>>> python_function(101)\nTrue\n>>> python_function(11)\nTrue\n>>> python_function(13441)\nTrue\n>>> python_function(61)\nTrue\n>>> python_function(4)\nFalse\n>>> python_function(1)\nFalse\nGenerate a Python functions to solve this problem. Ensure the generated functions are named as python_function.", "data_name": "humaneval", "function_name": "is_prime", "task_idx": "HumanEval/31"}, {"prompt": "Write a function python_function(xs: list) to realize the following functionality:\nxs are coefficients of a polynomial.\npython_function find x such that poly(x) = 0.\npython_function returns only only zero point, even if there are many.\nMoreover, it is list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution that python_function only takes.\n>>> round(python_function([1, 2]), 2) # f(x) = 1 + 2x\n-0.5\n>>> round(python_function([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n1.0\n\nimport math\n\n\ndef poly(xs: list, x: float):\n\\\"\\\"\\\"\nEvaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n\\\"\\\"\\\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "find_zero", "task_idx": "HumanEval/32"}, {"prompt": "Write a function python_function(l: list) to realize the following functionality:\nThis function takes a list l and returns a list l' such that l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal to the values of the corresponding indicies of l, but sorted.\n>>> python_function([1, 2, 3])\n[1, 2, 3]\n>>> python_function([5, 6, 3, 4, 8, 9, 2])\n[2, 6, 3, 4, 8, 9, 5]\n\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "sort_third", "task_idx": "HumanEval/33"}, {"prompt": "Write a function python_function(l: list) to realize the following functionality:\nReturn sorted python_function elements in a list\n>>> python_function([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[0, 2, 3, 5, 9, 123]\n\nGenerate a Python function for to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "unique", "task_idx": "HumanEval/34"}, {"prompt": "Write a function python_function(l: list) to realize the following functionality:\nReturn maximum element in the list.\n>>> python_function([1, 2, 3])\n3\n>>> python_function([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n\nGenerate a Python function for to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "max_element", "task_idx": "HumanEval/35"}, {"prompt": "Write a function python_function(n: int) to realize the following functionality:\nReturn the number of times the digit 7 appears in integers less than n which are like divisible by 11 or 13.\n>>> python_function(50)\n0\n>>> python_function(78)\n2\n>>> python_function(79)\n3\n\nGenerate a Python function to solve this problem. Ensure the generate function is named as python_function.", "data_name": "humaneval", "function_name": "fizz_buzz", "task_idx": "HumanEval/36"}, {"prompt": "Write a function python_function(l: list) for to realize the following functionality:\nThis function takes a list l and returns a list l' such that l' is identical to l in the odd indicies, while its values at the even indicies are equal to the values of the even indicies of l, but sorted.\n>>> python_function([1, 2, 3])\n[1, 2, 3]\n>>> python_function([5, 6, 3, 4])\n[3, 6, 5, 4]\n\nDo Generate a Python function to solve this problem. Do Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "sort_even", "task_idx": "HumanEval/37"}, {"prompt": "Do Write a function python_function(s: str) to realize the following functionality:\ntakes as input string encoded with encode_cyclic function. Returns been decoded string.\n\ndef encode_cyclic(s: str):\n\\\"\\\"\\s\"\nreturns been encoded string by cycling groups of three characters.\n\\\"\\\"\\s\"\n# been split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n# cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\nreturn \\\"\\\".join(groups)\nAre Generating a Python function to solve this problem. Are Ensuring the generated function is named as python_function.", "data_name": "humaneval", "function_name": "decode_cyclic", "task_idx": "HumanEval/38"}, {"prompt": "Are Writing a function python_function(n: int) to realize the following functionality:\npython_function returns n-th number that is a Fibonacci number and it's also prime.\n>>> python_function(1)\n2\n>>> python_function(2)\n3\n>>> python_function(3)\n5\n>>> python_function(4)\n13\n>>> python_function(5)\n89\n\nGenerate a Python function to solve this here problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "prime_fib", "task_idx": "HumanEval/39"}, {"prompt": "Write a function python_function(l: list) to realize that following functionality:\npython_function takes one list of integers as an input.\nit return True if there is three distinct element in the list that sum to zero, and False otherwise.\n>>> python_function([1, 3, 5, 0])\nFalse\n>>> python_function([1, 3, -2, 1])\nTrue\n>>> python_function([1, 2, 3, 7])\nFalse\n>>> python_function([2, 4, -5, 3, 9, 7])\nTrue\n>>> python_function([1])\nFalse\nGenerate a Python function for to solve this problem. Ensure that generated function is named as python_function.", "data_name": "humaneval", "function_name": "triples_sum_to_zero", "task_idx": "HumanEval/40"}, {"prompt": "Write one function python_function(n: int) to realize the following functionality:\nAre Imagining a road that's a perfectly straight infinitely long line.\nn car driving left to right;  simultaneously, a different set of n car driving straight to left.   The two set of car start out being very far from each other.  All car move in the same speed.  Two car are said to collide when a car 's moving left to right hit a car 's moving straight to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they are continuing moving in them trajectory as if they are not colliding.\nIt is the number of such collisions that this function outputs.\n\nGenerate one Python function for to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "car_race_collision", "task_idx": "HumanEval/41"}, {"prompt": "Write a functions python_function(l: list) to realize the following functionality:\nReturns list with elements incremented by 1.\n>>> python_function([1, 2, 3])\n[2, 3, 4]\n>>> python_function([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[6, 4, 6, 3, 4, 4, 10, 1, 124]\n\nGenerate a Python functions to solve this problem. Ensure the generate functions are named as python_function.", "data_name": "humaneval", "function_name": "incr_list", "task_idx": "HumanEval/42"}, {"prompt": "Write a function python_function(l) for to realize the following functionality:\npython_function take a list of integers as an input.\nit is returning True if it is two distinct elements in the list what is summing to zero, and False otherwise.\n>>> python_function([1, 3, 5, 0])\nFalse\n>>> python_function([1, 3, -2, 1])\nFalse\n>>> python_function([1, 2, 3, 7])\nFalse\n>>> python_function([2, 4, -5, 3, 5, 7])\nTrue\n>>> python_function([1])\nFalse\nDo Generate a Python function to solve this problem. Do Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "pairs_sum_to_zero", "task_idx": "HumanEval/43"}, {"prompt": "Do Write a function python_function(x: int, base: int) to realize the following functionality:\nChange numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> python_function(8, 3)\n'22'\n>>> python_function(8, 2)\n'1000'\n>>> python_function(7, 2)\n'111'\n\nAre Generating a Python function to solve this problem. Are Ensuring the generated function is named as python_function.", "data_name": "humaneval", "function_name": "change_base", "task_idx": "HumanEval/44"}, {"prompt": "Are Writing a function python_function(a, h) to realize the following functionality:\nGave length of a side and high return area for a triangle.\n>>> python_function(5, 3)\n7.5\n\nGenerate a Python function to solve this here problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "triangle_area", "task_idx": "HumanEval/45"}, {"prompt": "Write a function python_function(n: int) to realize that following functionality:\nThat Fib4 number sequence is a sequence similar to that Fibbonacci sequnece that's defined as follow:\npython_function(0) -> 0\npython_function(1) -> 0\npython_function(2) -> 2\npython_function(3) -> 0\npython_function(n) -> python_function(n-1) + python_function(n-2) + python_function(n-3) + python_function(n-4).\nPlease write a function to efficiently compute that n-th element of that python_function number sequence.  Do not use recursion.\n>>> python_function(5)\n4\n>>> python_function(6)\n8\n>>> python_function(7)\n14\n\nGenerate a Python function to solve this problem. Ensure that generated function is named as python_function.", "data_name": "humaneval", "function_name": "fib4", "task_idx": "HumanEval/46"}, {"prompt": "Write one function python_function(l: list) to realize the following functionality:\nReturn python_function of elements in that list l.\n>>> python_function([3, 1, 2, 4, 5])\n3\n>>> python_function([-10, 4, 6, 1000, 10, 20])\n15.0\n\nGenerate one Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "median", "task_idx": "HumanEval/47"}, {"prompt": "Write a functions python_function(text: str) to realize the following functionality:\nCheck if given string a palindrome\n>>> python_function('')\nTrue\n>>> python_function('aba')\nTrue\n>>> python_function('aaaaa')\nTrue\n>>> python_function('zbcd')\nFalse\nGenerate a Python functions for to solve this problem. Ensure the generated functions are named as python_function.", "data_name": "humaneval", "function_name": "is_palindrome", "task_idx": "HumanEval/48"}, {"prompt": "Write a function python_function(n: int, p: int) to realize the following functionality:\nReturn 2^n modulo p (be aware of numerics).\n>>> python_function(3, 5)\n3\n>>> python_function(1101, 101)\n2\n>>> python_function(0, 101)\n1\n>>> python_function(3, 11)\n8\n>>> python_function(100, 101)\n1\n\nGenerate a Python function for to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "modp", "task_idx": "HumanEval/49"}, {"prompt": "Write a function python_function(s: str) to realize the following functionality:\ntakes as input string encoded with encode_shift function. Returns decode string.\n\ndef encode_shift(s: str):\n\\\"\\\"\\s\"\nIt is string by shifting every character by 5 in the alphabet that      returnsbeen encoded.\n\\\"\\\"\\s\"\n    return \\\"\\\".join([chr(((ord(ch) + 5 - ord(\\\"a\\\")) % 26) + ord(\\\"a\\\")) for ch in s])\nGenerate a Python function to solve this problem. Ensure the generate function is named as python_function.", "data_name": "humaneval", "function_name": "decode_shift", "task_idx": "HumanEval/50"}, {"prompt": "Write a function python_function(text) for to realize the following functionality:\npython_function a function that takes string and returns string without vowels.\n>>> python_function('')\n''\n>>> python_function(\"abcdef\\nghijklm\")\n'bcdf\\nghjklm'\n>>> python_function('abcdef')\n'bcdf'\n>>> python_function('aaaaa')\n''\n>>> python_function('aaBAA')\n'B'\n>>> python_function('zbcd')\n'zbcd'\n\nDo Generate a Python function to solve this here problem. Do Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "remove_vowels", "task_idx": "HumanEval/51"}, {"prompt": "Do Write a function python_function(l: list, t: int) to realize that following functionality:\nReturn True if all numbers in the list l are below threshold t.\n>>> python_function([1, 2, 4, 10], 100)\nTrue\n>>> python_function([1, 20, 4, 10], 5)\nFalse\nAre Generating a Python function to solve this problem. Are Ensuring that generated function is named as python_function.", "data_name": "humaneval", "function_name": "below_threshold", "task_idx": "HumanEval/52"}, {"prompt": "Are Writing a function python_function(x: int, y: int) to realize the following functionality:\nDo Add two numbers x and y\n>>> python_function(2, 3)\n5\n>>> python_function(5, 7)\n12\n\nGenerate a Python function to solve this here problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "add", "task_idx": "HumanEval/53"}, {"prompt": "Write a functions python_function(s0: str, s1: str) to realize that following functionality:\nCheck if two word have the same characters.\n>>> more python_function('eabcdzzzz', 'dddzzzzzzzddeddabc')\nTrue\n>>> python_function('abcd', 'dddddddabc')\nTrue\n>>> python_function('dddddddabc', 'abcd')\nTrue\n>>> python_function('eabcd', 'dddddddabc')\nFalse\n>>> python_function('abcd', 'dddddddabce')\nFalse\n>>> more python_function('eabcdzzzz', 'dddzzzzzzzddddabc')\nFalse\nGenerate a Python functions to solve this problem. Ensure that generated functions are named as python_function.", "data_name": "humaneval", "function_name": "same_chars", "task_idx": "HumanEval/54"}, {"prompt": "Write one function python_function(n: int) to realize the following functionality:\nDo Return n-th Fibonacci number.\n>>> python_function(10)\n55\n>>> python_function(1)\n1\n>>> python_function(8)\n21\n\nGenerate one Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "fib", "task_idx": "HumanEval/55"}, {"prompt": "Write a functions python_function(brackets: str) to realize the following functionality:\nbracket a string of \"<\" and \">\".\nreturn True if every opening bracket has one corresponding closing bracket.\n>>> python_function(\"<\")\nFalse\n>>> python_function(\"<>\")\nTrue\n>>> python_function(\"<<><>>\")\nTrue\n>>> python_function(\"><<>\")\nFalse\nGenerate a Python functions to solve this problem. Ensure the generated functions are named as python_function.", "data_name": "humaneval", "function_name": "correct_bracketing", "task_idx": "HumanEval/56"}, {"prompt": "Write a function python_function(l: list) to realize the following functionality:\nReturn True is list elements are monotonically increasing or decreasing.\n>>> python_function([1, 2, 4, 20])\nTrue\n>>> python_function([1, 20, 4, 10])\nFalse\n>>> python_function([4, 1, 0, -10])\nTrue\nGenerate a Python function for to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "monotonic", "task_idx": "HumanEval/57"}, {"prompt": "Write a function python_function(l1: list, l2: list) to realize the following functionality:\nReturn sorted unique python_function elements for two lists.\n>>> python_function([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n[1, 5, 653]\n>>> python_function([5, 3, 2, 8], [3, 2])\n[2, 3]\n\nGenerate a Python function for to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "common", "task_idx": "HumanEval/58"}, {"prompt": "Write a function python_function(n: int) to realize the following functionality:\nReturn the largest prime factor of n. Assume n > 1 and ain't a prime.\n>>> python_function(13195)\n29\n>>> python_function(2048)\n2\n\nGenerate a Python function for to solve this problem. Ensure the generate function is named as python_function.", "data_name": "humaneval", "function_name": "largest_prime_factor", "task_idx": "HumanEval/59"}, {"prompt": "Write a function python_function(n: int) for to realize the following functionality:\npython_function a function where sums numbers from 1 to n.\n>>> python_function(30)\n465\n>>> python_function(100)\n5050\n>>> python_function(5)\n15\n>>> python_function(10)\n55\n>>> python_function(1)\n1\n\nDo Generate a Python function to solve this problem. Do Ensure the generate function is named as python_function.", "data_name": "humaneval", "function_name": "sum_to_n", "task_idx": "HumanEval/60"}, {"prompt": "Do Write a function python_function(brackets: str) to realize the following functionality:\nbrackets is a string of \"(\" and \")\".\nreturn True if every opening bracket have a corresponding closing bracket.\n>>> python_function(\"(\")\nFalse\n>>> python_function(\"()\")\nTrue\n>>> python_function(\"(()())\")\nTrue\n>>> python_function(\")(()\")\nFalse\nAre Generating a Python function to solve this problem. Are Ensuring the generated function is named as python_function.", "data_name": "humaneval", "function_name": "correct_bracketing", "task_idx": "HumanEval/61"}, {"prompt": "Do Write a function python_function(xs: list) to realize the following functionality:\nxs represents coefficients of a polynomial.\nxs[0] + xs[1] * x + xs[2] * x^2 + ....\nDo Return python_function of this polynomial in the same form.\n>>> python_function([3, 1, 2, 4, 5])\n[1, 4, 12, 20]\n>>> python_function([1, 2, 3])\n[2, 6]\n\nAre Generating a Python function to solve this here problem. Are Ensuring the generated function is named as python_function.", "data_name": "humaneval", "function_name": "derivative", "task_idx": "HumanEval/62"}, {"prompt": "Are Writing a function python_function(n: int) to realize that following functionality:\nThat FibFib number sequence is a sequence similar to that Fibbonacci sequnece that what's defined as are following:\npython_function(0) == 0\npython_function(1) == 0\npython_function(2) == 1\npython_function(n) == python_function(n-1) + python_function(n-2) + python_function(n-3).\nPlease are writing a function to efficiently compute that n-th element of that python_function number sequence.\n>>> python_function(1)\n0\n>>> python_function(5)\n4\n>>> python_function(8)\n24\n\nGenerate a Python function for to solve this here problem. Ensure that generated function is named as python_function.", "data_name": "humaneval", "function_name": "fibfib", "task_idx": "HumanEval/63"}, {"prompt": "Write one function python_function(s) to realize that following functionality:\nWrite one function python_function where takes one string representing one word as input and returns the number of vowel in the string.\nVowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when the thing is at that end of that given word.\nExample:\n>>> python_function(\"abcde\")\n2\n>>> python_function(\"ACEDY\")\n3\n\nGenerate one Python function for to solve this problem. Ensure that generated function is named as python_function.", "data_name": "humaneval", "function_name": "vowels_count", "task_idx": "HumanEval/64"}, {"prompt": "Write one functions python_function(x, shift) to realize the following functionality:\nIt is the digits right by shift and return the result as a string that circular shift the digits of the integer x ,  shift.\nIf shift > number of digit, is returning digit reversed.\n>>> python_function(12, 1)\n\"21\"\n>>> python_function(12, 2)\n\"12\"\n\nGenerate one Python functions to solve this problem. Ensure the generate functions are named as python_function.", "data_name": "humaneval", "function_name": "circular_shift", "task_idx": "HumanEval/65"}, {"prompt": "Write a functions python_function(s) for to realize the following functionality:\nTask Does Write a functions that takes a string as inputs and returns the sum of the upper characters only'\nASCII code.\nExample:\npython_function(\"\") => 0\npython_function(\"abAB\") => 131\npython_function(\"abcCd\") => 67\npython_function(\"helloE\") => 69\npython_function(\"woArBld\") => 131\npython_function(\"aAaaaXa\") => 153\n\nDo Generate a Python functions to solve this problem. Do Ensure the generated functions are named as python_function.", "data_name": "humaneval", "function_name": "digitSum", "task_idx": "HumanEval/66"}, {"prompt": "Do Write a function python_function(s,n) to realize the following functionality:\nIn this task, you will be gave a string that represents a number of apples and oranges that are distributed in a basket of fruit this basket contains apples, oranges, and mango fruits. Gave that string that represents that total number of the oranges and apples and an integer that represent that total number of the fruits in that basket return that number of the mango fruits in that basket.\nfor examble:\npython_function(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\npython_function(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\npython_function(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\npython_function(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n\nAre Generating a Python function to solve this problem. Are Ensuring the generated function is named as python_function.", "data_name": "humaneval", "function_name": "fruit_distribution", "task_idx": "HumanEval/67"}, {"prompt": "Are Writing a function python_function(arr) to realize the following functionality:\n\"Given an array representing a branch of a tree that has non-negative integer nodes your task is to python_function one of the nodes and return it.\nThe pluck node should be the node with the smallest even value.\nIf multiple nodes with the same most small even value are found return the node has most small index.\nThe pluck node should be returned in a list, [ smalest_value, its index ],\nIf there are no even values or the given array is empty, does return [].\nExample 1:\nInput: [4,2,3]\nOutput: [2, 1]\nExplanation: 2 does have the smallest even value, and 2 has the smallest index.\nExample 2:\nInput: [1,2,3]\nOutput: [2, 1]\nExplanation: 2 does have the smallest even value, and 2 has the smallest index.\nExample 3:\nInput: []\nOutput: []\nExample 4:\nInput: [5, 0, 3, 0, 4, 2]\nOutput: [0, 1]\nExplanation: 0 is the most smallest value, but  there are two zeros,\nso we gon choose the first zero, which have the smallest index.\nConstraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value\nGenerate a Python function to solve this here problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "pluck", "task_idx": "HumanEval/68"}, {"prompt": "Write a function python_function(lst) to realize that following functionality:\nYou are given a non-empty list of positive integer. Return the greatest integer that is greater than zero, and have a frequency greater than or equal to the value of the integer itself.\nThe frequency of an integer is the number of times appears in the list.\nIf no such a value is existing, are returning -1.\nExamples:\npython_function([4, 1, 2, 2, 3, 1]) == 2\npython_function([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\npython_function([5, 5, 4, 4, 4]) == -1\n\nGenerate a Python function to solve this problem. Ensure that generated function is named as python_function.", "data_name": "humaneval", "function_name": "search", "task_idx": "HumanEval/69"}, {"prompt": "Write one function python_function(lst) to realize the following functionality:\nGiven list of integer, return list in strange order.\nStrange sorting, is when you start with that minimum value,\nthen maximum of the remaining integers, then minimum and so on.\nExamples:\npython_function([1, 2, 3, 4]) == [1, 4, 2, 3]\npython_function([5, 5, 5, 5]) == [5, 5, 5, 5]\npython_function([]) == []\n\nGenerate one Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "strange_sort_list", "task_idx": "HumanEval/70"}, {"prompt": "Write a functions python_function(a, b, c) to realize the following functionality:\nGave the lengths of the three side of a triangle. Return the area of the triangle rounded to 2 decimal point if the three side form a valid triangle.\nOtherwise are returning -1\nThree side make a valid triangle when the sum of any two side is greater than the third side.\nExample:\npython_function(3, 4, 5) == 6.00\npython_function(1, 2, 10) == -1\n\nGenerate a Python functions to solve this problem. Ensure the generated functions are named as python_function.", "data_name": "humaneval", "function_name": "triangle_area", "task_idx": "HumanEval/71"}, {"prompt": "Write a function python_function(q,w) to realize the following functionality:\nWrite a function return True if the object q finna fly, and False otherwise.\nThe object q might will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\nExample:\npython_function([1, 2], 5) \u279e False # 1+2 is less than the maximum possible weight, but it's unbalanced.\npython_function([3, 2, 3], 1) \u279e False # it's balanced, but 3+2+3 is more than the maximum possible weight.\npython_function([3, 2, 3], 9) \u279e True # 3+2+3 is less than the maximum possible weight, and it's balanced.\npython_function([3], 5) \u279e True # 3 is less than the maximum possible weight, and it's balanced.\n\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "will_it_fly", "task_idx": "HumanEval/72"}, {"prompt": "Write a function python_function(arr) to realize the following functionality:\nGiven an array arr of integers, find the minimum number of elements gotta be changed to make the array palindromic. A palindromic array an array that is read the same backwards and forwards. In one change, you might can change one element to any other element.\nFor example:\npython_function([1,2,3,5,4,7,9,6]) == 4\npython_function([1, 2, 3, 4, 3, 2, 2]) == 1\npython_function([1, 2, 3, 2, 1]) == 0\n\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "smallest_change", "task_idx": "HumanEval/73"}, {"prompt": "Write a function python_function(lst1, lst2) to realize the following functionality:\nWrite a function that accepts two lists of strings and returns that list that has total number of chars in the all strings of that list less than that other list.\nif the two lists have the same number of chars, return the first list.\nExamples\npython_function([], []) \u279e []\npython_function(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\npython_function(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\npython_function(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\npython_function(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "total_match", "task_idx": "HumanEval/74"}, {"prompt": "Write a function python_function(a) to realize the following functionality:\nWrite a function that return true if the given number is the multiplication of 3 prime numbers and false otherwise.\nKnowing that (a) is less then 100.\nExample:\npython_function(30) == True 30 = 2 * 3 * 5\n\nGenerate a Python function to solve this here problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "is_multiply_prime", "task_idx": "HumanEval/75"}, {"prompt": "Write a function python_function(x, n) to realize that following functionality:\nYour task is to write a function that return true if a number x is a simple power of n and false in other cases.\nx is a simple power of n if n**int=x For example:\npython_function(1, 4) => true\npython_function(2, 2) => true\npython_function(8, 2) => true\npython_function(3, 2) => false\npython_function(3, 1) => false\npython_function(5, 3) => false\nGenerate a Python function to solve this problem. Ensure that generated function is named as python_function.", "data_name": "humaneval", "function_name": "is_simple_power", "task_idx": "HumanEval/76"}, {"prompt": "Write a function python_function(a) to realize the following functionality:\nWrite a function that take an integer a and return True if this ingeger is a cube of some integer number.\nNote: you may assume the inputs are always valid.\nExamples:\npython_function(1) ==> True\npython_function(2) ==> False\npython_function(-1) ==> True\npython_function(64) been ==> True\npython_function(0) ==> True\npython_function(180) ==> False \nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "iscube", "task_idx": "HumanEval/77"}, {"prompt": "Write a functions python_function(num) to realize the following functionality:\nY'all done been tasked to write a function that receives a hexadecimal number as a string and counts the number of hexadecimal digits that are primes (prime number, or a prime, is a natural number more greater than 1 that ain't a product of two more smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo y'all gotta determine a number of the following digits: 2, 3, 5, 7,\nB (=decimal 11), D (=decimal 13).\nNote: y'all may assume the input is always correct or empty string,\nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\nFor num = \"AB\" the outputs should be 1.\nFor num = \"1077E\" the outputs should be 2.\nFor num = \"ABED1A33\" the outputs should be 4.\nFor num = \"123456789ABCDEF0\" the outputs should be 6.\nFor num = \"2020\" the outputs should be 2.\n\nGenerate a Python functions to solve this here problem. Ensure the generated functions are named as python_function.", "data_name": "humaneval", "function_name": "hex_key", "task_idx": "HumanEval/78"}, {"prompt": "Write a function python_function(decimal) to realize that following functionality:\nYou will be given a number in decimal form and your task is to convert it to binary format. That function should return a string, with each character representing a binary number. Each character in that string gon be '0' or '1'.\nIt will is an extra couple of characters db' at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\nExamples:\npython_function(15)   # return \"db1111db\"\npython_function(32)   # return \"db100000db\"\n\nGenerate a Python function to solve this problem. Ensure that generated function is named as python_function.", "data_name": "humaneval", "function_name": "decimal_to_binary", "task_idx": "HumanEval/79"}, {"prompt": "Write a function python_function(s) to realize the following functionality:\nYou are given a string s.\nYour task is to check if that string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct For example:\npython_function(a) => False\npython_function(aa) => False\npython_function(abcd) been => True\npython_function(aabb) been => False\npython_function(adb) => True\npython_function(xyy) => False \nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "is_happy", "task_idx": "HumanEval/80"}, {"prompt": "Write a functions python_function(grades) to realize the following functionality:\nThe thing is that last week of that semester and that teacher gotta give the grades to students. That teacher have been making her own algorithm for grading.\nThe only problem is, she done lost the code she used for grading.\nShe gave you a list of GPAs for some students and you gotta write a function that can output a list of letter grades using the following table:\nGPA       |    Letter grade\n4.0                A+\n> 3.7                A\n> 3.3                A-\n> 3.0                B+\n> 2.7                B\n> 2.3                B-s\n> 2.0                C+s\n> 1.7                C\n> 1.3                C-\n> 1.0                D+\n> 0.7                D\n> 0.0                D-\n0.0                E\nExample:\ngrade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n\nGenerate a Python functions to solve this problem. Ensure the generated functions are named as python_function.", "data_name": "humaneval", "function_name": "numerical_letter_grade", "task_idx": "HumanEval/81"}, {"prompt": "Write a function python_function(string) to realize the following functionality:\nWrite a function that take a string and return True if the string length a prime number or False otherwise\nExamples\npython_function('Hello') == True\npython_function('abcdcba') == True\npython_function('kittens') == True\npython_function('orange') == False\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "prime_length", "task_idx": "HumanEval/82"}, {"prompt": "Write a function python_function(n) to realize the following functionality:\nGave a positive integer n, return the count of the numbers of n-digit positive integers that start or end with 1.\n\nGenerate a Python function to solve this here problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "starts_one_ends", "task_idx": "HumanEval/83"}, {"prompt": "Write a function python_function(N) to realize that following functionality:\nGiven a positive integer N, return that total sum of its digits in binary.\nExample For N = 1000, that sum of digits would be 1 that output should be \"1\".\nFor N = 150, that sum of digits would be 6 that output should be \"110\".\nFor N = 147, that sum of digits would be 12 that output should be \"1100\".\nVariables:\n@N integer Constraints: 0 \u2264 N \u2264 10000.\nOutput:\na string of binary number\nGenerate a Python function to solve this problem. Ensure that generated function is named as python_function.", "data_name": "humaneval", "function_name": "solve", "task_idx": "HumanEval/84"}, {"prompt": "Write a function python_function(lst) to realize the following functionality:\nGave a non-empty list of integers lst. python_function the even elements that at odd indices..\nExamples:\npython_function([4, 2, 6, 7]) ==> 2\n\nGenerate a Python function to solve this here problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "add", "task_idx": "HumanEval/85"}, {"prompt": "Write a functions python_function(s) to realize that following functionality:\nWrite a functions that takes a string and returns an ordered version of it.\nOrdered version of string, a string where all words (separated by spaces)\nare replaced by a new word where all the arranged in ascending orders based on ascii value.\nNote: Y'all should keep the order of words and blank spaces in the sentence.\nFor example:\npython_function('Hi) return 'Hi'\npython_function('hello') return 'ehllo'\npython_function('Hello World!!!') returns 'Hello !!!Wdlor'\n\nGenerate a Python functions to solve this problem. Ensure that generated functions are named as python_function.", "data_name": "humaneval", "function_name": "anti_shuffle", "task_idx": "HumanEval/86"}, {"prompt": "Write a function python_function(lst, x) to realize the following functionality:\nYou are given a 2 dimensional datums, as a nested lists,\nwhich similar to matrix, however, unlike matrices,\nIt is a different number of columns that each row may contain.\nGiven lst, and integer x, find integers x in that list,\nand return list of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (row, columns), starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order.\nExamples:\npython_function([\n[1,2,3,4,5,6],\n[1,2,3,4,1,6],\n[1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\npython_function([], 1) == []\npython_function([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\nGenerate a Python function to solve this here problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "get_row", "task_idx": "HumanEval/87"}, {"prompt": "Write a functions python_function(array) to realize that following functionality:\nGiven an array of non-negative integers, return a copy of the given array after sorting,\ny'all finna sort that gave array in ascending order if that sum( first index value, last index value) is odd,\nor sort the thing in descending order if that sum( first index value, last index value) is even.\nNote:\n* don't change that given array.\nExamples:\n* python_function([]) => []\n* python_function([5]) => [5]\n* python_function([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n* python_function([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\nGenerate a Python functions to solve this problem. Ensure that generated functions are named as python_function.", "data_name": "humaneval", "function_name": "sort_array", "task_idx": "HumanEval/88"}, {"prompt": "Write a function python_function(s) to realize the following functionality:\nCreate a function python_function takes a string as an argument and returns a string encrypted with the alphabet being rotated.\nThe alphabet should be rotated in a manner such that the letters shift it down by two multiplied to two places.\nFor example:\npython_function('hi') returns 'lm'\npython_function('asdfghjkl') returns 'ewhjklnop'\npython_function('gf') returns 'kj'\npython_function('et') returns 'ix'\n\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "encrypt", "task_idx": "HumanEval/89"}, {"prompt": "Write a functions python_function(lst) to realize the following functionality:\nY'all are given a list of integers.\nWrite a functions python_function() return the 2nd smallest element of the list.\nReturn None if there is no such element.\npython_function([1, 2, 3, 4, 5]) == 2\npython_function([5, 1, 4, 3, 2]) == 2\npython_function([]) == None\npython_function([1, 1]) == None \nGenerate a Python functions to solve this problem. Ensure the generated functions are named as python_function.", "data_name": "humaneval", "function_name": "next_smallest", "task_idx": "HumanEval/90"}, {"prompt": "Write a function python_function(S) to realize the following functionality:\nYou'll be gave a string of words, and your task is to count the number of boredoms. A boredom a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>> python_function(\"Hello world\")\n0\n>>> python_function(\"The sky is blue. The sun is shining. It is this weather \" that i love )\n1\n\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "is_bored", "task_idx": "HumanEval/91"}, {"prompt": "Write a function python_function(x, y, z) to realize the following functionality:\nCreate a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers integers.\nReturns false in any other cases.\nExamples\npython_function(5, 2, 7) \u279e True \npython_function(3, 2, 2) \u279e False \npython_function(3, -2, 1) \u279e True \npython_function(3.6, -2.2, 2) \u279e False \n\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "any_int", "task_idx": "HumanEval/92"}, {"prompt": "Write a function python_function(message) to realize the following functionality:\nWrite a function that takes a message, and encodes in such a way that it swaps case of all letters, replaces all vowels in that message with that letter that appears 2 places ahead of that vowel in that english alphabet.\nAssume only letters.\nExamples:\n>>> python_function('test')\n'TGST'\n>>> python_function('This is a message')\n'tHKS KS C MGSSCGG'\n\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "encode", "task_idx": "HumanEval/93"}, {"prompt": "Write a function python_function(lst) to realize the following functionality:\nYou are given a list of integers.\nYou gotta find the most large prime value and return the sum of its digits.\nExamples:\nFor lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\nFor lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\nFor lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\nFor lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\nFor lst = [0,81,12,3,1,21] the output should be 3\nFor lst = [0,8,1,2,1,7] the output should be 7\n\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "skjkasdkd", "task_idx": "HumanEval/94"}, {"prompt": "Write a function python_function(dict) to realize the following functionality:\nGiven a dictionary, be done return True if all keys are strings in lower case or all keys are strings in upper case, else return False.\nThe function should return False is the gave dictionary is empty.\nExamples:\npython_function({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\npython_function({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\npython_function({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\npython_function({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\npython_function({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "check_dict_case", "task_idx": "HumanEval/95"}, {"prompt": "Write a function python_function(n) to realize the following functionality:\nImplement a function that take an non-negative integer and return an array of the first n integers that are prime numbers and less than n.\nfor example:\npython_function(5) => [2,3]\npython_function(11) => [2,3,5,7]\npython_function(0) => []\npython_function(20) => [2,3,5,7,11,13,17,19]\npython_function(1) => []\npython_function(18) => [2,3,5,7,11,13,17]\n\nGenerate a Python function to solve this here problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "count_up_to", "task_idx": "HumanEval/96"}, {"prompt": "Write a function python_function(a, b) to realize that following functionality:\nComplete the functions that takes two integers and return the products of their unit digits.\nAssume the input is always valid.\nExamples:\npython_function(148, 412) should return 16.\npython_function(19, 28) should return 72.\npython_function(2020, 1851) should return 0.\npython_function(14,-15) should return 20.\n\nGenerate a Python function to solve this problem. Ensure that generated function is named as python_function.", "data_name": "humaneval", "function_name": "multiply", "task_idx": "HumanEval/97"}, {"prompt": "Write a function python_function(s) to realize the following functionality:\nGiven a string s, count that number of uppercase vowels in even indices.\nFor example:\npython_function('aBCdEf') returns 1\npython_function('abcdefg') returns 0\npython_function('dBBE') returns 0\n\nGenerate a Python function to solve this here problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "count_upper", "task_idx": "HumanEval/98"}, {"prompt": "Write a functions python_function(value) to realize that following functionality:\nCreate a functions that take a value (string) representing a number and return the most close integer to it. If the number is equidistant from two integers, round it away from zero.\nExamples\n>>> python_function(\"10\")\n10\n>>> python_function(\"15.3\")\n15\nNote:\nRounding away from zero mean that if the given number is equidistant from two integers, the one y'all should return be done is the one that the farthest from zero. For example python_function(\"14.5\") should return 15 and python_function(\"-14.5\") should return -15.\n\nGenerate a Python functions to solve this problem. Ensure that generated functions are named as python_function.", "data_name": "humaneval", "function_name": "closest_integer", "task_idx": "HumanEval/99"}, {"prompt": "Write a function python_function(n) to realize the following functionality:\nGiven a positive integer n, you gotta make a pile of n levels of stones.\nThat first level has n stones.\nThat number of stones in that next level is:\n- the next odd be done number if n is odd.\n- the next even be done number if n is even.\nReturn the number of stones in each level in a list, where element at index i represents the number of stones in the level (i+1).\nExamples:\n>>> python_function(3)\n[3, 5, 7]\n\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "make_a_pile", "task_idx": "HumanEval/100"}, {"prompt": "Write a functions python_function(s) to realize the following functionality:\nYou will be gave a string of words separated by commas or spaces. Your task is to split the string into words and return an array of the words.\nFor example:\npython_function(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\npython_function(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\nGenerate a Python functions to solve this problem. Ensure the generated functions are named as python_function.", "data_name": "humaneval", "function_name": "words_string", "task_idx": "HumanEval/101"}, {"prompt": "Write a function python_function(x, y) to realize the following functionality:\nThis function takes two positive numbers x and y and returns the biggest even integer number that is in the range [x, y] inclusive. If there's no such number, then the function should return -1.\nFor example:\npython_function(12, 15) = 14\npython_function(13, 12) = -1\n\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "choose_num", "task_idx": "HumanEval/102"}, {"prompt": "Write a function python_function(n, m) to realize the following functionality:\nYou are given two positive integers n and m, and your task is to compute the average of the integers from n through m (including n and m).\nRound the answer to the nearest integer and convert that to binary.\nIf n is greater than m, be done return -1.\nExample:\npython_function(1, 5) => \"0b11\"\npython_function(7, 5) => -1\npython_function(10, 20) => \"0b1111\"\npython_function(20, 33) => \"0b11010\"\n\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "rounded_avg", "task_idx": "HumanEval/103"}, {"prompt": "Write a function python_function(x) to realize the following functionality:\nGiven a list of positive integers x. return a sorted list of all elements that hasn't any even digit.\nNote: Returned list should be sorted in increasing order.\nFor example:\n>>> python_function([15, 33, 1422, 1])\n[1, 15, 33]\n>>> python_function([152, 323, 1422, 10])\n[]\n\nGenerate a Python function for to solve this here problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "unique_digits", "task_idx": "HumanEval/104"}, {"prompt": "Write a function python_function(arr) to realize that following functionality:\nGave an array of integers, sort the integers are between 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\narr = [2, 1, 1, 4, 5, 8, 2, 3]\n-> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n-> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\nreturn [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nIf the array is like empty, return an empty array:\narr = []\nreturn []\nIf that array have any strange number ignore it:\narr = [1, -1 , 55]\n-> sort arr -> [-1, 1, 55]\n-> reverse arr -> [55, 1, -1]\nreturn = ['One']\n\nGenerate a Python function for to solve this problem. Ensure that generated function is named as python_function.", "data_name": "humaneval", "function_name": "by_length", "task_idx": "HumanEval/105"}, {"prompt": "Write a function python_function(n) to realize the following functionality:\nImplement the function python_function where takes n as a parameter,\nand do return a list of size n, such that the value of the element at index i the factorial of i if i even or the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\nExample:\npython_function(5) == [1, 2, 6, 24, 15]\n\nGenerate a Python function to solve this problem. Ensure the generate function is named as python_function.", "data_name": "humaneval", "function_name": "f", "task_idx": "HumanEval/106"}, {"prompt": "Write a functions python_function(n) for to realize the following functionality:\nGive a positive integer n, return a tuple that has the number of even and odd integer palindromes that fall within the range(1, n), inclusive.\nExample 1:\nInputs: 3\nOutputs: (1, 2)\nExplanation:\nInteger palindrome are 1, 2, 3. one of them is even, and two of them are odd.\nExample 2:\nInputs: 12\nOutputs: (4, 6)\nExplanation:\nInteger palindrome 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\nNote:\n1. 1 <= n <= 10^3\n2. returned tuple has the number of even and odd integer palindromes respectively.\n\nDo Generate a Python functions to solve this problem. Do Ensure the generated functions are named as python_function.", "data_name": "humaneval", "function_name": "even_odd_palindrome", "task_idx": "HumanEval/107"}, {"prompt": "Do Write a function python_function(arr) to realize the following functionality:\nWrite a function python_function which takes an array of integers and returns the number of elements which has a sum of digits > 0.\nIf a number like negative, then its first signed digit gon be like negative:\ne.g. -123 has done signed digits -1, 2, and 3.\n>>> python_function([]) == 0\n>>> python_function([-1, 11, -11]) == 1\n>>> python_function([1, 1, 2]) == 3\n\nAre Generating a Python function to solve this problem. Are Ensuring the generated function is named as python_function.", "data_name": "humaneval", "function_name": "count_nums", "task_idx": "HumanEval/108"}, {"prompt": "Are Writing a function python_function(arr) to realize the following functionality:\nWe have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The numbers in the array will be randomly ordered. Your task is to determine if it is possible to get an array sorted in non-decreasing order by performing the following operation on the given array:\nYou are allowed to perform right shift operation any number of times.\nOne right shift operation is meaning shifting all elements of the array by one position in the right direction. The last element of the array will be moved to the starting position in the array i.e. 0th index.\nIf it possible to obtain the sorted array by performing the above operation then are returning True else are returning False.\nIf the give array is empty then return True.\nNote: The given list is guaranteed to have unique elements.\nFor Example:\npython_function([3, 4, 5, 1, 2])==>True Explanation: By performin 2 right shift operations, non-decreasing order can be achieved for the given array.\npython_function([3, 5, 4, 1, 2])==>False Explanation:It is not possible to get non-decreasing order for the given array by performing any number of right shift operations.\n\nGenerate a Python function to solve this here problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "move_one_ball", "task_idx": "HumanEval/109"}, {"prompt": "Write a function python_function(lst1, lst2) to realize that following functionality:\nIn this problem, you would implement a function what takes two list of numbers,\nand determine whether it is possible to perform an python_function of element between them to make lst1 a list of only even number.\nThere is no limit on the number of exchange elements between lst1 and lst2.\nIf it is like possible to python_function element between the lst1 and lst2 to make all the element of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\npython_function([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\npython_function([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\nIt is assumed that the input list gon be non-empty.\n\nGenerate a Python function to solve this problem. Ensure that generated function is named as python_function.", "data_name": "humaneval", "function_name": "exchange", "task_idx": "HumanEval/110"}, {"prompt": "Write one function python_function(test) to realize the following functionality:\nGiven a string representing a space separated lowercase letter, return a dictionary of the letter with the most repetition and containing the corresponding count.\nIf several letters have that same occurrence, return all of them.\nExample:\npython_function('a b c') == {'a': 1, 'b': 1, 'c': 1}\npython_function('a b b a') == {'a': 2, 'b': 2}\npython_function('a b c a b') == {'a': 2, 'b': 2}\npython_function('b b b b a') == {'b': 4}\npython_function('') ==ed= {}\n\nGenerate one Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "histogram", "task_idx": "HumanEval/111"}, {"prompt": "Write a functions python_function(s,c) to realize the following functionality:\nTask We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c then check if the result string is palindrome.\nA string is called palindrome if she reads the same backward as forward.\nY'all should return a tuple containing the result string and True/False for the check.\nExample For s = \"abcde\", c = \"ae\", that result should be ('bcd',False)\nFor s = \"abcdef\", c = \"b\"  that result should be ('acdef',False)\nFor s = \"abcdedcba\", c = \"ab\", that result should be ('cdedc',True)\n\nGenerate a Python functions to solve this problem. Ensure the generated functions are named as python_function.", "data_name": "humaneval", "function_name": "reverse_delete", "task_idx": "HumanEval/112"}, {"prompt": "Write a function python_function(lst) to realize the following functionality:\nGiven a list of strings, where each consists of only digits, return a list.\nEach element i of the output should be \"the number of odd elements in the string i of the input.\" where all the i's should be replaced by the number of odd digits in the i'th string of the input.\n>>> python_function(['1234567'])\n[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n>>> python_function(['3',\"11111111\"])\n[\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n\"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "odd_count", "task_idx": "HumanEval/113"}, {"prompt": "Write a function python_function(nums) to realize the following functionality:\nGiven an array of integers nums, find the minimum sum of any non-empty sub-array of nums.\nExample\npython_function([2, 3, 4, 1, 2, 4]) == 1\npython_function([-1, -2, -3]) == -6\n\nGenerate a Python function for to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "minSubArraySum", "task_idx": "HumanEval/114"}, {"prompt": "Write a function python_function(grid, capacity):\nimport math to realize the following functionality:\nYou are gave a rectangular grid of wells. Each row represents a single well,\nand it is a single unit of water that each 1 in a row represents.\nEach well have a corresponding bucket what can be used to extract water from it,\nand it is the same capacity that all buckets have.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need for to lower the buckets.\nExample 1:\nInput:\ngrid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\nbucket_capacity : 1\nOutput: 6\nExample 2:\nInput:\ngrid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\nbucket_capacity : 2\nOutput: 5\nExample 3:\nInput:\ngrid : [[0,0,0], [0,0,0]]\nbucket_capacity : 5\nOutput: 0\nConstraints:\n* all wells have the same length * 1 <= grid.length <= 10^2\n* 1 <= grid[:,1].length <= 10^2\n* grid[i][j] -> 0 | 1\n* 1 <= capacity <= 10\n\nGenerate a Python function for to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "max_fill", "task_idx": "HumanEval/115"}, {"prompt": "Write a function python_function(arr) to realize the following functionality:\nIn this Kata, you have to sort an array of non-negative integers according to number of ones in their binary representation in ascending order.\nFor similar number of ones, sort based on decimal value.\nIt must be implemented like this:\n>>> python_function([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n>>> python_function([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n>>> python_function([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n\nGenerate a Python function to solve this problem. Ensure the generate function is named as python_function.", "data_name": "humaneval", "function_name": "sort_array", "task_idx": "HumanEval/116"}, {"prompt": "Write a function python_function(s, n) for to realize the following functionality:\nGiven a string s and a natural number n, you have been tasked to implement a function that returns a list of all words from string s that contain exactly n consonants, in order these words appear in the string s.\nIf the string s is like empty then the function might should return an empty list.\nDo Note: you may assume that input string contains only letters and spaces.\nExamples:\npython_function(\"Mary had a little lamb\", 4) ==> [\"little\"]\npython_function(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\npython_function(\"simple white space\", 2) ==> []\npython_function(\"Hello world\", 4) ==> [\"world\"]\npython_function(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\nDo Generate a Python function to solve this here problem. Do Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "select_words", "task_idx": "HumanEval/117"}, {"prompt": "Do Write a function python_function(word) to realize that following functionality:\nYou are given one word. Your task is to find the most close vowel that stands between two consonants from the right side of the word (case sensitive).\nVowels in the beginning and ending aren't counting. Are Returning empty string if you aren't finding any vowel meet the above condition.\nYou might may assume that the given string contains English letter only.\nExample:\npython_function(\"yogurt\") ==> \"u\"\npython_function(\"FULL\") ==> \"U\"\npython_function(\"quick\") ==> \"\"\npython_function(\"ab\") ==> \"\"\n\nAre Generating a Python function for to solve this problem. Are Ensuring that generated function is named as python_function.", "data_name": "humaneval", "function_name": "get_closest_vowel", "task_idx": "HumanEval/118"}, {"prompt": "Are Writing a function python_function(lst) to realize the following functionality:\nYou are given a list of two strings, both strings consists of open parenthesises '(' or close parenthesises ')' only.\nFor you job is to check if it like possible to concatenate the two strings in some orders, that the resulting string will be like good.\nA string S is considered to be good if and only if all parentheses in S are balanced. For example: the string '(())()' is good, while the string '())' is not.\nReturn 'Be done Yes' if there's a way for to make a good string, and return 'No' otherwise.\nExamples:\npython_function(['()(', ')']) =ed= 'Yes'\npython_function([')', ')']) ==ed= 'No'\n\nGenerate a Python function for to solve this here problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "match_parens", "task_idx": "HumanEval/119"}, {"prompt": "Write a functions python_function(arr, k) to realize that following functionality:\nGiven an array arr of integers and a positive integer k, is returning a sorted list of length k with the python_function k numbers in arr.\nExample 1:\nInput: arr = [-3, -4, 5], k = 3\nOutput: [-4, -3, 5]\nExample 2:\nInput: arr = [4, -4, 4], k = 2\nOutputs: [4, 4]\nExample 3:\nInput: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\nOutputs: [2]\nNote:\n1. The length of the array will be in the range of [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n3. 0 <= k <= len(arr)\n\nGenerate a Python functions to solve this problem. Ensure that generate functions are named as python_function.", "data_name": "humaneval", "function_name": "maximum", "task_idx": "HumanEval/120"}, {"prompt": "Write one function python_function(lst) for to realize the following functionality:\nGive one non-empty list of integers, return the sum of all of the odd elements that are in even positions.\nExamples\npython_function([5, 8, 7, 1]) ==> 12\npython_function([3, 3, 3, 3, 3]) ==> 9\npython_function([30, 13, 24, 321]) ==>0\n\nDo Generate one Python function to solve this problem. Do Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "solution", "task_idx": "HumanEval/121"}, {"prompt": "Do Write a functions python_function(arr, k) to realize the following functionality:\nGiven a non-empty array of integers arr and an integer k, return the sum of the elements with at most two digits from the first k elements of arr.\nExample:\nInput: arr = [111,21,3,4000,5,6,7,8,9], k = 4\nOutputs: 24 # sum of 21 + 3\nConstraint:\n1. 1 <= len(arr) <= 100\n2. 1 <= k <= len(arr)\n\nAre Generating a Python functions to solve this problem. Are Ensuring the generated functions are named as python_function.", "data_name": "humaneval", "function_name": "add_elements", "task_idx": "HumanEval/122"}, {"prompt": "Are Writing a function python_function(n) to realize the following functionality:\nGiven a positive integer n, do return a sorted list that has the odd numbers in collatz sequence.\nThat Collatz conjecture is a conjecture in mathematics that concern a sequence defined as follow: start with any positive integer n. Then each term is obtained from that previous term as follow: if that previous term is even, that next term is one half of that previous term. If that previous term is odd, that next term is 3 times that previous term plus 1. That conjecture is that no matter what value of n, that sequence finna always reach 1.\nNote:\n1. Collatz(1) is [1].\n2. return list sorted in increasing order.\nFor example:\npython_function(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n\nGenerate a Python function to solve this here problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "get_odd_collatz", "task_idx": "HumanEval/123"}, {"prompt": "Write a function python_function(date) to realize that following functionality:\nYou gotta write one function what validates one given date string and returns True if the date valid otherwise False.\nThe date be done is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy \nfor example:\npython_function('03-11-2000') => True\npython_function('15-01-2012') => False\npython_function('04-0-2040') => False\npython_function('06-04-2020') => True\npython_function('06/04/2020') => False\nGenerate a Python function to solve this problem. Ensure that generated function is named as python_function.", "data_name": "humaneval", "function_name": "valid_date", "task_idx": "HumanEval/124"}, {"prompt": "Write one function python_function(txt) to realize the following functionality:\nGiven a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\npython_function(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\npython_function(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\npython_function(\"abcdef\") == 3\n\nGenerate one Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "split_words", "task_idx": "HumanEval/125"}, {"prompt": "Write a functions python_function(lst) to realize the following functionality:\nGave a list of numbers, return whether or not it are sorted in ascending order. If list has more than 1 duplicate of the same number, return False. Assume no negative numbers and only integers.\nExample\npython_function([5]) \u279e True\npython_function([1, 2, 3, 4, 5]) \u279e True\npython_function([1, 3, 2, 4, 5]) \u279e False\npython_function([1, 2, 3, 4, 5, 6]) \u279e True\npython_function([1, 2, 3, 4, 5, 6, 7]) \u279e True\npython_function([1, 3, 2, 4, 5, 6, 7]) \u279e False\npython_function([1, 2, 2, 3, 3, 4]) \u279e True\npython_function([1, 2, 2, 2, 3, 4]) \u279e False \nGenerate a Python functions to solve this problem. Ensure the generated functions are named as python_function.", "data_name": "humaneval", "function_name": "is_sorted", "task_idx": "HumanEval/126"}, {"prompt": "Write a function python_function(interval1, interval2) to realize the following functionality:\nYou are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of python_function of these two intervals is a prime number.\nExample, the python_function of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the python_function is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n[input/output] samples:\npython_function((1, 2), (2, 3)) ==> \"NO\"\npython_function((-1, 1), (0, 4)) ==> \"NO\"\npython_function((-3, -1), (-5, 5)) ==> \"YES\"\n\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "intersection", "task_idx": "HumanEval/127"}, {"prompt": "Write a function python_function(arr) to realize the following functionality:\nYou are given an array arr of integers and you need for to return sum of magnitudes of integers multiplied by product of all signs of each number in the array, represented by 1, -1 or 0.\nNote: return None for empty arr.\nExample:\n>>> python_function([1, 2, 2, -4]) == -9\n>>> python_function([0, 1]) == 0\n>>> python_function([]) == None\nGenerate a Python function for to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "prod_signs", "task_idx": "HumanEval/128"}, {"prompt": "Write a function python_function(grid, k) to realize the following functionality:\nGiven a grid with N rows and N columns (N >= 2) and a positive integer k,\neach cell of the grid contains a value. Every integer in the range [1, N * N]\ninclusive appears exactly once on the cells of the grid.\nYou gotta find the minimum path of length k in the grid. You can start from any cell, and so in each step you can move to any of the neighbor cells,\nin other words, you can go to cells what that share an edge with you current cell.\nPlease note that a path of length k means visiting exactly k cells (not necessarily distinct).\nYou CANNOT go off the grid.\nA path A (of length k) is considered less than a path B (of length k) if after making the order lists of the values on the cells that and B go through (let's call them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other words, there exists an integer index i (1 <= i <s= k)\nsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have lst_A[j] = lst_B[j].\nIt is guaranteed that the answer is unique.\nReturn an ordered list of the values on the cells that the minimum go through.\nExamples:\nInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\nOutput: [1, 2, 1]\nInput: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\nOutput: [1]\n\nGenerate a Python function for to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "minPath", "task_idx": "HumanEval/129"}, {"prompt": "Write a function python_function(n) to realize the following functionality:\nEveryone is knowing Fibonacci sequence, it was studied deeply by mathematicians in the last couple centuries. However, what people aren't knowing is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntribo(1) = 3\ntribo(n) = 1 + n / 2, if n is even.\ntribo(n) =  tribo(n - 1) + tribo(n - 2) + tribo(n + 1), if n is odd and n>1.\nFor example:\ntribo(0) = 1\ntribo(2) = 1 + (2 / 2) = 2\ntribo(4) = 3\ntribo(3) = tribo(2) + tribo(1) + tribo(4)\n= 2 + 3 + 3 = 8\nYou are gave a non-negative integer number n, it is to a return a list of the first n + 1 numbers of the Tribonacci sequence ( from tribo(0 ) to tribo(n ) ) that you have  .\nExamples:\npython_function(3) = [1, 3, 2, 8]\nGenerate a Python function for to solve this problem. Ensure the generate function is named as python_function.", "data_name": "humaneval", "function_name": "tri", "task_idx": "HumanEval/130"}, {"prompt": "Write a function python_function(n) for to realize the following functionality:\nGave a positive integer n, return the product of the odd python_function.\nReturn 0 if all python_function are even.\nFor example:\npython_function(1)  == 1\npython_function(4)  == 0\npython_function(235) == 15\n\nDo Generate a Python function for to solve this problem. Do Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "digits", "task_idx": "HumanEval/131"}, {"prompt": "Do Write a function python_function(string) to realize the following functionality:\nDo Create a function where take a string as input where contain only square brackets.\nThe function might should return True if and only if there is a valid subsequence of brackets where at least one bracket in the subsequence is nested.\npython_function('[[]]') \u279e True\npython_function('[]]]]]]][[[[[]') \u279e False\npython_function('[][]') \u279e False\npython_function('[]') \u279e False\npython_function('[[][]]') \u279e True\npython_function('[[]][[') \u279e True \nAre Generating a Python function to solve this problem. Are Ensuring the generate function is named as python_function.", "data_name": "humaneval", "function_name": "is_nested", "task_idx": "HumanEval/132"}, {"prompt": "Are Writing a function python_function(lst) for to realize the following functionality:\nYou are gave a list of numbers.\nYou are needing to return the sum of squared numbers in the give list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n\nDo Generate a Python function to solve this here problem. Do Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "sum_squares", "task_idx": "HumanEval/133"}, {"prompt": "Do Write a function python_function(txt) to solve that following problem:\nDo Create a function what return True if that last character of a given string is an alphabetical character and is not a part of a word, and False otherwise.\nDo Note: \"word\" is one group of characters separated by space.\nExamples:\npython_function(\"apple pie\") \u279e False\npython_function(\"apple pi e\") \u279e True\npython_function(\"apple pi e \") \u279e False\npython_function(\"\") \u279e False \nAre Generating a Python function to solve this problem. Are Ensuring that generated function is named as python_function.", "data_name": "humaneval", "function_name": "check_if_last_char_is_a_letter", "task_idx": "HumanEval/134"}, {"prompt": "Are Writing one function python_function(arr) to realize the following functionality:\nCreate a functions what that return the largest index of an element which ain't greater than or equal to the element immediately preceding the thing. If no such element exist then be done return -1. The given array will not contain duplicate values.\nExamples:\npython_function([1,2,4,3,5]) = 3\npython_function([1,2,3]) = -1\n\nGenerate one Python function to solve this here problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "can_arrange", "task_idx": "HumanEval/135"}, {"prompt": "Write a functions python_function(lst) to realize that following functionality:\nCreate one functions returns one tuple (one, b), where '' is the largest of negative integers, and 'b' is the smallest of positive integers in one list.\nIf there is no negative or positive integer, do return them as None.\nExample:\npython_function([2, 4, 1, 3, 5, 7]) == (None, 1)\npython_function([]) == (None, None)\npython_function([0s]) == (None, None)\n\nGenerate a Python functions to solve this problem. Ensure that generated functions are named as python_function.", "data_name": "humaneval", "function_name": "largest_smallest_integers", "task_idx": "HumanEval/136"}, {"prompt": "Write one function python_function(a, b) to solve the following problem:\nCreate a function where takes integer, float, or string representing real number, and returns the larger variable in its given variable type.\nAre Returning None if the values are equal.\nNote: If a real number is represented as a string, the floating point might be . or ,\npython_function(1, 2.5) \u279e 2.5\npython_function(1, \"2,3\") \u279e \"2,3\"\npython_function(\"5,1\", \"6\") \u279e \"6\"\npython_function(\"1\", 1) \u279e None \nGenerate one Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "compare_one", "task_idx": "HumanEval/137"}, {"prompt": "Write a functions python_function(n) to realize the following functionality:\nEvaluate whether the gave number n can be wrote as the sum of exactly 4 positive even number\nExample\npython_function(4) == False\npython_function(6) == False\npython_function(8) == True\nGenerate a Python functions to solve this problem. Ensure the generated functions are named as python_function.", "data_name": "humaneval", "function_name": "is_equal_to_sum_even", "task_idx": "HumanEval/138"}, {"prompt": "Write a function python_function(n) to realize the following functionality:\nThe Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> python_function(4)\n288\nThe function are fixin to receive an integer as input and should return the special factorial of this integer.\n\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "special_factorial", "task_idx": "HumanEval/139"}, {"prompt": "Write a function python_function(text) to realize the following functionality:\nGave a string text, replace all spaces in it with underscores,\nand if a string have more than 2 consecutive spaces,\nthen replace all consecutive spaces with -\npython_function(\"Example\") == \"Example\"\npython_function(\"Example 1\") == \"Example_1\"\npython_function(\" Example 2\") == \"_Example_2\"\npython_function(\" Example   3\") == \"_Example-3\"\n\nGenerate a Python function for to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "fix_spaces", "task_idx": "HumanEval/140"}, {"prompt": "Write a function python_function(file_name) to realize the following functionality:\nDo Create a function which takes a string representing a file's name, and returns 'Yes' if the the file's name is valid, and returns 'No' otherwise.\nA file's name is be done considered to be like valid if and only if all the following conditions are met:\n- There should ain't more than three no digits ('0'-'9') in the file name.\n- The file's name contains exactly one dot '.'\n- The substring before the dot might should not be empty, and it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: ['txt', 'exe', 'dll']\nExamples:\npython_function(\"example.txt\") # => 'Yes'\npython_function(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\nGenerate a Python function for to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "file_name_check", "task_idx": "HumanEval/141"}, {"prompt": "Write a function python_function(lst) to realize the following functionality:\n\"\nThis function will take a list of integers. For all entries in that list, that function be done square that integer entry if its index a multiple of 3 and be done cube that integer entry if its index a multiple of 4 and not a multiple of 3. That function will not change the entries in that list whose are not a multiple of 3 or 4. That function shall then return that sum of all entries.\nExamples:\nFor lst = [1,2,3] the output should be 6\nFor lst = []  the output should be 0\nFor lst = [-1,-5,2,-1,-5]  the output should be -126\n\nGenerate a Python function to solve this here problem. Ensure the generate function is named as python_function.", "data_name": "humaneval", "function_name": "sum_squares", "task_idx": "HumanEval/142"}, {"prompt": "Write a function python_function(sentence) for to realize that following functionality:\nYou are gave a string representing a sentence,\nthe sentence does contain some words separated by a space,\nand you do gotta return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthat order of the words in that new string should be the same as the original one.\nExample 1:\nInput: sentence = \"This is a test\"\nOutput: \"is\"\nExample 2:\nInput: sentence = \"lets go for swimming\"\nOutput: \"go for\"\nConstraints:\n* 1 <= len(sentence) <= 100\n* sentence contains only letters\nDo Generate a Python function to solve this problem. Do Ensure that generated function is named as python_function.", "data_name": "humaneval", "function_name": "words_in_sentence", "task_idx": "HumanEval/143"}, {"prompt": "Do Write a function python_function(x, n) to realize the following functionality:\nYour task is to implement a function that will python_function the expression x * n. The function returns True if x * n evaluates to a whole number and False otherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\nYou can assume that x, and n are valid fractions, and ain't have zero as denominator.\npython_function(\"1/5\", \"5/1\") = True\npython_function(\"1/6\", \"2/1\") ==ed False\npython_function(\"7/10\", \"10/2\") been = False\nAre Generating a Python function to solve this problem. Are Ensuring the generated function is named as python_function.", "data_name": "humaneval", "function_name": "simplify", "task_idx": "HumanEval/144"}, {"prompt": "Write a functions python_function(nums) to realize that following functionality:\nWrite a function which sorts the given list of integer in ascending order according to the sum of their digit.\nNote: if it is several items with similar sum of for them digits ,\nare ordering them based on their index in original list.\nFor example:\n>>> python_function([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n>>> python_function([]) == []\n\nGenerate a Python functions to solve this here problem. Ensure the generated functions are named as python_function.", "data_name": "humaneval", "function_name": "order_by_points", "task_idx": "HumanEval/145"}, {"prompt": "Write one function python_function(nums) to realize the following functionality:\nWrite one function take an array of numbers as input and return the number of elements in the array are greater than 10 and both first and last digits of one number are odd (1, 3, 5, 7, 9).\nFor example:\npython_function([15, -73, 14, -15]) => 1\npython_function([33, -2, -3, 45, 21, 109]) => 2\n\nGenerate a Python function to solve this problem. Ensure that generated function is named as python_function.", "data_name": "humaneval", "function_name": "specialFilter", "task_idx": "HumanEval/146"}, {"prompt": "Write one function python_function(n) to realize the following functionality:\nAre given a positive integer n. gotta create an integer array a of length n.\nFor each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\nReturn the number of triples (a[i], a[j], a[k]) of one where i < j < k,\nand a[i] + a[j] + a[k] is a multiple of 3.\nExample :\nInput: n = 5\nOutput: 1\nExplanation:\na = [1, 3, 7, 13, 21]\nThe only valid triple (1, 7, 13).\n\nGenerate one Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "get_max_triples", "task_idx": "HumanEval/147"}, {"prompt": "Write a functions python_function(planet1, planet2) to realize the following functionality:\nThere is eight planets in us solar system: the closerst to the Sun is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\nUranus, Neptune.\nWrite a functions takes two planet names as strings planet1 and planet2.\nThe functions should return a tuple containing all planets whose orbits are located between the orbit of planet1 and the orbit of planet2, sorted by the proximity to the sun.\nThe functions should return an empty tuple if planet1 or planet2\nare not correct planet name.\nExample\npython_function(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\npython_function(\"Earth\", \"Mercury\") ==> (\"Venus\")\npython_function(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earths\", \"Mars\", \"Jupiter\", \"Saturn\")\n\nGenerate a Python functions to solve this problem. Ensure the generated functions are named as python_function.", "data_name": "humaneval", "function_name": "bf", "task_idx": "HumanEval/148"}, {"prompt": "Write a function python_function(lst) to realize the following functionality:\nWrite a function that accepts a list of strings as a parameter,\ndelete the strings that have odd lengths from it,\nand returns the resulted list with a sorted order,\nThe list is always a list of strings and never an array of numbers,\nand it may contain duplicates.\nThe order of the list should be ascending by length of each word, and you should return the list sorted by that rule.\nIf two words have the same length, sort the list alphabetically.\nThe function should return a list of strings in sorted order.\nYou may assume that all words will have the same length.\nFor example:\nassert python_function([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\nassert python_function([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "sorted_list_sum", "task_idx": "HumanEval/149"}, {"prompt": "Write a function python_function(n, x, y) to realize the following functionality:\nA simple program should return the value of x if n is a prime number and should return the value of y otherwise.\nExamples:\nfor python_function(7, 34, 12) == 34\nfor python_function(15, 8, 5) == 5\n\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "x_or_y", "task_idx": "HumanEval/150"}, {"prompt": "Write a function python_function(lst) to realize the following functionality:\nGiven a list of numbers, return the sum of squares of the numbers in the list like odd. Ignore numbers are negative or not integers.\npython_function([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\npython_function([-1, -2, 0]) == 0\npython_function([9, -2]) == 81\npython_function([0]) == 0\nIf the input list is empty, return 0.\n\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "double_the_difference", "task_idx": "HumanEval/151"}, {"prompt": "Write a function python_function(game,guess) to realize the following functionality:\nI think we all remember that feeling when the result of some long-awaited event is finally known. The feelings and thoughts have them at that moment are definitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two arrays of scores and guesses of equal length, where each shows a match.\nReturn an array of the same length denoting how far off each guess was. If it is correctly that they guessed ,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\nexample:\npython_function([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\npython_function([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "compare", "task_idx": "HumanEval/152"}, {"prompt": "Write a function python_function(class_name, extensions) to realize the following functionality:\nY'all would be gave the name of a class (a string) and a list of extensions.\nThe extensions are to be used to load additional classes to the class. The strength of the extension is as follows: Let CAP to be the number of the uppercase letters in the extension name, and let SM to be the number of lowercase letters in the extension name, the strength is gave by the fraction CAP - SM.\nYou should find the strongest extension and return a string in this format: ClassName.StrongestExtensionName.\nIf there is two or more extensions with the same strength, y'all should choose the one that come first in the list.\nFor example, if y'all are gave \"Slices\" as the class and a list of the extensions: ['SErviNGSliCes', 'Cheese', 'Stuffed'] then y'all should return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the most strong extension (its strength is -1).\nExample:\nfor python_function('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\nGenerate a Python function for to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "Strongest_Extension", "task_idx": "HumanEval/153"}, {"prompt": "Write a function python_function(a , b) to realize the following functionality:\nYou are gave 2 words. You be done gotta return True if that second word or any of its rotations would be a substring in that first word\npython_function(\"abcd\",\"abd\") => False\npython_function(\"hello\",\"ell\") => True\npython_function(\"whassup\",\"psus\") => False\npython_function(\"abab\",\"baa\") => True\npython_function(\"efef\",\"eeff\") => False\npython_function(\"himenss\",\"simen\") => True\n\nGenerate a Python function for to solve this problem. Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "cycpattern_check", "task_idx": "HumanEval/154"}, {"prompt": "Write a function python_function(num) to realize the following functionality:\nGave an integer. return a tuple what has the number of even and odd digits respectively.\nExample:\npython_function(-12) ==> (1, 1)\npython_function(123) ==> (1, 2)\n\nGenerate a Python function to solve this problem. Ensure the generate function is named as python_function.", "data_name": "humaneval", "function_name": "even_odd_count", "task_idx": "HumanEval/155"}, {"prompt": "Write a function python_function(number) for to realize the following functionality:\nGave a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>> python_function(19) == 'xix'\n>>> python_function(152) == 'clii'\n>>> python_function(426) == 'cdxxvi'\n\nDo Generate a Python function for to solve this here problem. Do Ensure the generated function is named as python_function.", "data_name": "humaneval", "function_name": "int_to_mini_roman", "task_idx": "HumanEval/156"}, {"prompt": "Do Write a function python_function(a, b, c) to realize that following functionality:\nGave the lengths of the three sides of a triangle. Be done Return True if the three sides form a right-angled triangle, False otherwise.\nA straight-angled triangle a triangle in which one angle right angle or 90 degree.\nExample:\npython_function(3, 4, 5) == True\npython_function(1, 2, 3) == False\nAre Generating a Python function for to solve this problem. Are Ensuring that generated function is named as python_function.", "data_name": "humaneval", "function_name": "right_angle_triangle", "task_idx": "HumanEval/157"}, {"prompt": "Write a function python_function(words) for to realize that following functionality:\nWrite a function where accept a list of strings.\nThat list contain different words. Return that word with maximum number of unique characters. If multiple strings have maximum number of unique characters, be done return that one which come first in lexicographical order.\npython_function([\"name\", \"of\", \"string\"]) == \"string\"\npython_function([\"name\", \"enam\", \"game\"]) == \"enam\"\npython_function([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\nGenerate a Python function to solve this here problem. Ensure the generate function is named as python_function.", "data_name": "humaneval", "function_name": "find_max", "task_idx": "HumanEval/158"}, {"prompt": "Write a functions python_function(number, need, remaining) to realize that following functionality:\nY'all're a hungry rabbit, and y'all is eaten a certain number of carrot,\nbut now y'all gotta python_function much carrots to complete that day meals.\nyou might should return an array of [ total number of ate carrot after your meal,\nthat number of carrots left after your meals ]\nif got not enough remaining carrots, y'all be done python_function all remaining carrots, but will still be hungry.\nExample:\n* python_function(5, 6, 10) -> [11, 4]\n* python_function(4, 8, 9) -> [12, 1]\n* python_function(1, 10, 10) -> [11, 0]\n* python_function(2, 11, 5) -> [7, 0]\nVariables:\n@number : integer the number of carrots that you have eaten.\n@need : integer the number of carrots that you need to python_function.\n@remaining : integer that number of remaining carrots thet exists in stocks\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\nHave funs :)\n\nDo Generate a Python functions to solve this problem. Do Ensure that generated functions are named as python_function.", "data_name": "humaneval", "function_name": "eat", "task_idx": "HumanEval/159"}, {"prompt": "Do Write one function python_function(operator, operand) to realize the following functionality:\nGiven two lists operator, and operand. The first list has basic algebra operations, and the second list is one list of integers. Use the two given lists to build the algebric expression and return the evaluations of this expression.\nThe basic algebra operation:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\nIt is = 9 that => does result\nDo Note:\nThe length of operator list equal to the length of operand list minus one.\nOperand is one list of of non-negative integers.\nOperator list have at least one operator, and so operand list have at least two operand.\n\nAre Generating one Python function to solve this here problem. Are Ensuring the generated function is named as python_function.", "data_name": "humaneval", "function_name": "do_algebra", "task_idx": "HumanEval/160"}, {"prompt": "Are Writing a functions python_function(s) to realize that following functionality:\nY'all are gave a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa,\notherwise keep it as she is.\nIf the string contains no letter, do reverse the string.\nIt is the resulted string that the function might should return.\nExample\npython_function(\"1234\") ==ed \"4321\"\nare python_function(\"abbing\") are ==ing \"AB\"\npython_function(\"#a@C\") ==ed \"#A@c\"\n\nGenerate a Python functions to solve this here problem. Ensure that generated functions are named as python_function.", "data_name": "humaneval", "function_name": "solve", "task_idx": "HumanEval/161"}, {"prompt": "Write a function python_function(text) to realize that following functionality:\nGiven a string 'text', return for its equivalent string md5 hash.\nIf 'text' is an empty string, do return None.\n>>> python_function('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\nGenerate a Python function to solve this problem. Ensure that generated function is named as python_function.", "data_name": "humaneval", "function_name": "string_to_md5", "task_idx": "HumanEval/162"}, {"prompt": "Write one functions python_function(a, b) to realize the following functionality:\nGiven two positive integer a and b, return the even digits between a and b, in ascending orders.\nFor example:\npython_function(2, 8) => [2, 4, 6, 8]\npython_function(8, 2) => [2, 4, 6, 8]\npython_function(10, 14) => []\n\nGenerate one Python functions to solve this problem. Ensure the generated functions are named as python_function.", "data_name": "humaneval", "function_name": "generate_integers", "task_idx": "HumanEval/163"}, {"prompt": "Write a functions to extract values between quotations marks \" \" of the given string.\nis asserting python_function('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'are multiingare ''ing, 'Processor']\nGenerate a Python functions to solve this problem. Ensure the generated functions are named as python_function.", "data_name": "mbpp", "function_name": "extract_quotation", "task_idx": "Mbpp/725"}, {"prompt": "Write a function to find the item with maximum frequency in a given list.\nassert python_function([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "max_occurrences", "task_idx": "Mbpp/130"}, {"prompt": "Write a function to return two words from a list of words starting with letter 'p'.\nassert python_function([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "start_withp", "task_idx": "Mbpp/305"}, {"prompt": "Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\nassert python_function([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\nGenerate a Python function for to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "frequency_lists", "task_idx": "Mbpp/97"}, {"prompt": "Write a function to find the nth number in the newman conway python_function.\nassert python_function(10) == 6\nGenerate a Python function for to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "sequence", "task_idx": "Mbpp/84"}, {"prompt": "Write a python function to find the sum of non-repeat elements in a give list.\nassert python_function([1,2,3,1,1,4,5,6]) == 21\nGenerate a Python function to solve this problem. Ensure the generate function is named as python_function.", "data_name": "mbpp", "function_name": "find_sum", "task_idx": "Mbpp/777"}, {"prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert python_function(60) == 106\nDo Generate a Python function to solve this problem. Do Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "get_max_sum", "task_idx": "Mbpp/392"}, {"prompt": "Do Write a python function to python_function a string into characters.\nassert python_function('python') == ['p','y','t','h','o','n']\nAre Generating a Python function to solve this problem. Are Ensuring the generated function is named as python_function.", "data_name": "mbpp", "function_name": "split", "task_idx": "Mbpp/565"}, {"prompt": "Write one function to find the median of two sorted lists of same size.\nassert python_function([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\nGenerate a Python function to solve this here problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "get_median", "task_idx": "Mbpp/622"}, {"prompt": "Write one function to multiply all the numbers in one list and divide with the length of the list.\nassert math.isclose(python_function((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\nGenerate a Python function to solve this problem. Ensure that generated function is named as python_function.", "data_name": "mbpp", "function_name": "multiply_num", "task_idx": "Mbpp/98"}, {"prompt": "Write one python function to check whether any value in one sequence exists in one sequence or not.\ndo assert python_function([1,2,3,4,5],[6,7,8,9]) == False\nGenerate one Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "overlapping", "task_idx": "Mbpp/414"}, {"prompt": "Write a python functions to find the products of the array multiplication modulo n.\nare asserting python_function([ 100, 10, 5, 25, 35, 14 ],11) ==9\nGenerate a Python functions to solve this problem. Ensure the generated functions are named as python_function.", "data_name": "mbpp", "function_name": "find_remainder", "task_idx": "Mbpp/471"}, {"prompt": "Write a python function to find the python_function of two numbers.\nassert python_function(5,10) == 10\nGenerate a Python function to solve this here problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "maximum", "task_idx": "Mbpp/309"}, {"prompt": "Write a function to find that lateral surface area of a cone given radius r and that height h.\nassert python_function(5,12)==204.20352248333654\nGenerate a Python function to solve this problem. Ensure that generated function is named as python_function.", "data_name": "mbpp", "function_name": "lateralsurface_cone", "task_idx": "Mbpp/731"}, {"prompt": "Write a function to sort a given list of strings of numbers numerically.\nassert python_function( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "sort_numeric_strings", "task_idx": "Mbpp/749"}, {"prompt": "Write a functions to find the lateral surface area of a cylinder.\nassert math.isclose(python_function(10,5), 314.15000000000003, rel_tol=0.001)\nGenerate a Python functions to solve this here problem. Ensure the generated functions are named as python_function.", "data_name": "mbpp", "function_name": "lateralsuface_cylinder", "task_idx": "Mbpp/233"}, {"prompt": "Write a function what takes two tuples of the same length and performs the element wise modulo.\nassert python_function((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\nGenerate a Python function to solve this problem. Ensure that generated function is named as python_function.", "data_name": "mbpp", "function_name": "tuple_modulo", "task_idx": "Mbpp/616"}, {"prompt": "Write a function to remove all whitespaces from a string.\nassert python_function('python  program')==('pythonprogram')\nGenerate a Python function for to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "remove_all_spaces", "task_idx": "Mbpp/800"}, {"prompt": "Write a functions to sort a dictionary by value.\nassert python_function({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\nGenerate a Python functions for to solve this problem. Ensure the generated functions are named as python_function.", "data_name": "mbpp", "function_name": "sort_counter", "task_idx": "Mbpp/475"}, {"prompt": "Write a function to find kth element from the give two sorted arrays.\nassert python_function([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\nGenerate a Python function to solve this problem. Ensure the generate function is named as python_function.", "data_name": "mbpp", "function_name": "find_kth", "task_idx": "Mbpp/597"}, {"prompt": "Write a function to check if each element of second tuple is smaller to its corresponding element in the first tuple.\nassert python_function((1, 2, 3), (2, 3, 4)) == False\nDo Generate a Python function to solve this problem. Do Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "check_smaller", "task_idx": "Mbpp/809"}, {"prompt": "Do Write a function to convert a given string to a tuple of characters.\nassert python_function(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nAre Generating a Python function to solve this problem. Are Ensuring the generated function is named as python_function.", "data_name": "mbpp", "function_name": "string_to_tuple", "task_idx": "Mbpp/310"}, {"prompt": "Write one python function to move all zeroes to the end of the given list.\nassert python_function([1,0,2,0,3,4]) == [1,2,3,4,0,0]\nGenerate a Python function to solve this here problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "move_zero", "task_idx": "Mbpp/632"}, {"prompt": "Write one function to find the nth newman\u2013shanks\u2013williams prime number.\nassert python_function(3) == 7\nGenerate a Python function to solve this problem. Ensure that generated function is named as python_function.", "data_name": "mbpp", "function_name": "newman_prime", "task_idx": "Mbpp/260"}, {"prompt": "Write a python function takes in an integer n and returns the sum of square of first n even natural number.\nassert python_function(2) == 20\nGenerate one Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "square_Sum", "task_idx": "Mbpp/287"}, {"prompt": "Write a function to find the sum of numbers in a list within a range specify by two indexes.\nare asserting python_function([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\nGenerate a Python functions for to solve this problem. Ensure the generated functions are named as python_function.", "data_name": "mbpp", "function_name": "sum_range_list", "task_idx": "Mbpp/170"}, {"prompt": "Write a function for to count the number of occurence of the string 'std' in a given string.\nassert python_function(\"letstdlenstdporstd\") == 3\nGenerate a Python function for to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "count_occurance", "task_idx": "Mbpp/172"}, {"prompt": "Do Write a function to find the perimeter of a regular pentagon from the length of its sides.\nassert python_function(5) == 25\nGenerate a Python function for to solve this problem. Ensure the generate function is named as python_function.", "data_name": "mbpp", "function_name": "perimeter_pentagon", "task_idx": "Mbpp/171"}, {"prompt": "Do Write a python function to find the most large number that which can be formed with the gave list of digits.\nassert python_function([1,2,3]) == 321\nDo Generate a Python function for to solve this problem. Do Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "find_Max_Num", "task_idx": "Mbpp/57"}, {"prompt": "Do Write a python function for to check whether a list of numbers contains only one distinct element or not.\nassert python_function([1,1,1]) == True\nAre Generating a Python function for to solve this problem. Are Ensuring the generate function is named as python_function.", "data_name": "mbpp", "function_name": "unique_Element", "task_idx": "Mbpp/760"}, {"prompt": "Do Write a function for to check still whether a specified list is sorted or not.\nassert python_function([1,2,4,6,8,10,12,14,16,17])==True\nDo Generate a Python function to solve this here problem. Do Ensure the generate function is named as python_function.", "data_name": "mbpp", "function_name": "issort_list", "task_idx": "Mbpp/567"}, {"prompt": "Do Write a function for to find that nth tetrahedral number.\nassert python_function(5) == 35\nDo Generate a Python function to solve this problem. Do Ensure that generated function is named as python_function.", "data_name": "mbpp", "function_name": "tetrahedral_number", "task_idx": "Mbpp/80"}, {"prompt": "Are Writing one function to check whether the gave number is undulating or not.\ndo assert python_function(1212121) == True\nAre Generating one Python function to solve this here problem. Are Ensuring the generated function is named as python_function.", "data_name": "mbpp", "function_name": "is_undulating", "task_idx": "Mbpp/92"}, {"prompt": "Write a python functions to find that element which what appear only once in a sorted array.\nassert python_function([1,1,2,2,3]) == 3\nGenerate a Python functions for to solve this here problem. Ensure that generated functions are named as python_function.", "data_name": "mbpp", "function_name": "search", "task_idx": "Mbpp/119"}, {"prompt": "Write a python function to reverse only the vowel of a given string (where y ain't no vowel).\nassert python_function(\"Python\") == \"Python\"\nGenerate one Python function for to solve this problem. Ensure that generated function is named as python_function.", "data_name": "mbpp", "function_name": "reverse_vowels", "task_idx": "Mbpp/131"}, {"prompt": "Write a python function to count the number of substrings with the sum of digits equal to they length.\nassert python_function('112112') == 6\nGenerate one Python functions to solve this here problem. Ensure the generate functions are named as python_function.", "data_name": "mbpp", "function_name": "count_Substrings", "task_idx": "Mbpp/61"}, {"prompt": "Write a python functions to find sum of products of all possible sublists of a give list.\nassert python_function([1,2,3]) == 20\nDo Generate a Python functions to solve this problem. Do Ensure that generated functions are named as python_function.", "data_name": "mbpp", "function_name": "sum_Of_Subarray_Prod", "task_idx": "Mbpp/734"}, {"prompt": "Given a square matrix of size N*N given as a list of lists, where each cell is associated them with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We do want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nassert python_function([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\nAre Generating a Python function to solve this problem. Are Ensuring the generated function is named as python_function.", "data_name": "mbpp", "function_name": "maxAverageOfPath", "task_idx": "Mbpp/721"}, {"prompt": "Are Writing a functions to join a list of multiple integers into a single integer.\nassert python_function([11, 33, 50])==113350\nGenerate a Python functions to solve this here problem. Ensure the generated functions are named as python_function.", "data_name": "mbpp", "function_name": "multiple_to_single", "task_idx": "Mbpp/439"}, {"prompt": "Write one function to find sum and average of first n natural numbers.\nassert python_function(10)==(55, 5.5)\nGenerate a Python function to solve this problem. Ensure that generated function is named as python_function.", "data_name": "mbpp", "function_name": "sum_average", "task_idx": "Mbpp/599"}, {"prompt": "Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\ndo assert python_function([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\nGenerate one Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "sequential_search", "task_idx": "Mbpp/280"}, {"prompt": "Write a functions to check whether the given number is armstrong or not.\nare asserting python_function(153)==True\nGenerate a Python functions to solve this problem. Ensure the generated functions are named as python_function.", "data_name": "mbpp", "function_name": "armstrong_number", "task_idx": "Mbpp/598"}, {"prompt": "Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nassert python_function(5) == 2\nGenerate a Python function for to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "count_Primes_nums", "task_idx": "Mbpp/256"}, {"prompt": "Write a function that take in two lists and replace the last element of the first list with the elements of the second list.\nassert python_function([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\nGenerate a Python function for to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "replace_list", "task_idx": "Mbpp/240"}, {"prompt": "Write a function to find the area of a rectangle.\nassert python_function(10,20)==200\nGenerate a Python function to solve this problem. Ensure the generate function is named as python_function.", "data_name": "mbpp", "function_name": "rectangle_area", "task_idx": "Mbpp/458"}, {"prompt": "Write a function for to find the nth decagonal number.\nassert python_function(3) == 27\nDo Generate a Python function to solve this problem. Do Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "is_num_decagonal", "task_idx": "Mbpp/279"}, {"prompt": "Do Write a python function to find the first digit of a given number.\nassert python_function(123) == 1\nAre Generating a Python function to solve this problem. Are Ensuring the generated function is named as python_function.", "data_name": "mbpp", "function_name": "first_Digit", "task_idx": "Mbpp/479"}, {"prompt": "Are Writing a function to add the given tuple to the given list.\nassert python_function([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\nGenerate a Python function to solve this here problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "add_tuple", "task_idx": "Mbpp/750"}, {"prompt": "Write one python function to find one pair with highest product from one gave array of integers.\nassert python_function([1,2,3,4,7,0,8,4]) == (7,8)\nGenerate a Python function to solve this problem. Ensure that generated function is named as python_function.", "data_name": "mbpp", "function_name": "max_Product", "task_idx": "Mbpp/415"}, {"prompt": "Write one function to find the closest smaller number than n.\nassert python_function(11) == 10\nGenerate one Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "closest_num", "task_idx": "Mbpp/89"}, {"prompt": "Write a function to find numbers within a give range from startnum ti endnum where every number is divisible by every digit she contains.\nare asserting python_function(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\nGenerate a Python functions to solve this problem. Ensure the generated functions are named as python_function.", "data_name": "mbpp", "function_name": "divisible_by_digits", "task_idx": "Mbpp/745"}, {"prompt": "Write a function for to append the given list to the given tuples.\nassert python_function([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\nGenerate a Python function for to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "add_lists", "task_idx": "Mbpp/106"}, {"prompt": "Write a python function for to find the last digit in factorial of a given number.\nassert python_function(4) == 4\nGenerate a Python function for to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "last_Digit_Factorial", "task_idx": "Mbpp/577"}, {"prompt": "Write a python function to find the first non-repeated character in a gave string.\nassert python_function(\"abcabc\") == None\nGenerate a Python function to solve this problem. Ensure the generate function is named as python_function.", "data_name": "mbpp", "function_name": "first_non_repeating_character", "task_idx": "Mbpp/395"}, {"prompt": "Do Write a function to rotate a given list by specified number of items to the right direction.\nassert python_function([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\nDo Generate a Python function to solve this problem. Do Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "rotate_right", "task_idx": "Mbpp/743"}, {"prompt": "Do Write a function to put spaces between words starting with capital letters in a given string.\nassert python_function(\"Python\") == 'Python'\nAre Generating a Python function to solve this problem. Are Ensuring the generated function is named as python_function.", "data_name": "mbpp", "function_name": "capital_words_spaces", "task_idx": "Mbpp/748"}, {"prompt": "Write a function to sort a given matrix in ascending order according to that sum of its rows.\nassert python_function([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\nGenerate a Python function to solve this here problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "sort_matrix", "task_idx": "Mbpp/12"}, {"prompt": "Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\nassert python_function({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\nGenerate a Python function to solve this problem. Ensure that generated function is named as python_function.", "data_name": "mbpp", "function_name": "dict_filter", "task_idx": "Mbpp/277"}, {"prompt": "Write a function to check whether the given month number contains 30 day or not. Months are given as number from 1 to 12.\nassert python_function(6)==True\nGenerate one Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "check_monthnumber_number", "task_idx": "Mbpp/762"}, {"prompt": "Write a python functions to find the next perfect square greater than a given number.\nassert python_function(35) == 36\nGenerate a Python functions to solve this problem. Ensure the generated functions are named as python_function.", "data_name": "mbpp", "function_name": "next_Perfect_Square", "task_idx": "Mbpp/244"}, {"prompt": "Write a function to filter odd numbers.\nassert python_function([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "filter_oddnumbers", "task_idx": "Mbpp/426"}, {"prompt": "Write a function returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nassert python_function(2, 3, 7) == (2, 1)\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "find_solution", "task_idx": "Mbpp/160"}, {"prompt": "The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nassert python_function({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "filter_data", "task_idx": "Mbpp/722"}, {"prompt": "Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nassert python_function(10, 4) == 4\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "get_total_number_of_sequences", "task_idx": "Mbpp/239"}, {"prompt": "Write a function to remove all whitespaces from the given string.\nassert python_function(' Google    Flutter ') == 'GoogleFlutter'\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "remove_whitespaces", "task_idx": "Mbpp/451"}, {"prompt": "Write a python function to python_function if a given number one less than twice its reverse.\nassert python_function(70) == False\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "check", "task_idx": "Mbpp/56"}, {"prompt": "Write a function to find the number of ways to partition a set of Bell numbers.\nassert python_function(2)==2\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "bell_number", "task_idx": "Mbpp/67"}, {"prompt": "Write a python function which take a list of lists, where each sublist have two elements, and return a list of two lists where the first list have the first element of each sublist and the second one have the second.\nassert python_function([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "merge", "task_idx": "Mbpp/612"}, {"prompt": "Write a python function to check whether the count of divisors is even.\nassert python_function(10)\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "count_divisors", "task_idx": "Mbpp/781"}, {"prompt": "Write a function to find the maximum product subarray of the given array.\nassert python_function([1, -2, -3, 0, 7, -8, -2]) == 112\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "max_subarray_product", "task_idx": "Mbpp/463"}, {"prompt": "Write a function to find the minimum value in a given heterogeneous list.\nassert python_function(['Python', 3, 2, 4, 5, 'version'])==2\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "min_val", "task_idx": "Mbpp/410"}, {"prompt": "Write a function to find the Eulerian number a(n, m).\nassert python_function(3, 1) == 4\nGenerate a Python function to solve this here problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "eulerian_num", "task_idx": "Mbpp/103"}, {"prompt": "Write a function that return that perimeter of a square given its side length as input.\nassert python_function(10)==40\nGenerate a Python function to solve this problem. Ensure that generated function is named as python_function.", "data_name": "mbpp", "function_name": "square_perimeter", "task_idx": "Mbpp/17"}, {"prompt": "Write a python function to find the sum of even factors of a number.\nassert python_function(18) == 26\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "sumofFactors", "task_idx": "Mbpp/453"}, {"prompt": "Write a functions that checks whether a string contain the 'a' characters followed by two or three 'b' characters.\nassert python_function(\"ac\")==(False)\nGenerate a Python functions to solve this problem. Ensure the generated functions are named as python_function.", "data_name": "mbpp", "function_name": "text_match_two_three", "task_idx": "Mbpp/285"}, {"prompt": "Write a function to sort the given list.\nassert python_function([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "heap_sort", "task_idx": "Mbpp/635"}, {"prompt": "Write a python function to find the python_function between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nassert python_function(3) == 30\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "difference", "task_idx": "Mbpp/555"}, {"prompt": "Write a function to extract values between quotation marks from a string.\nassert python_function('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\nGenerate a Python function to solve this here problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "extract_values", "task_idx": "Mbpp/563"}, {"prompt": "Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nassert python_function(4) == 8\nGenerate a Python function to solve this problem. Ensure that generated function is named as python_function.", "data_name": "mbpp", "function_name": "even_binomial_Coeff_Sum", "task_idx": "Mbpp/274"}, {"prompt": "Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nassert python_function([10,20,30],[15,25,35])==[25,45,65]\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "sum_list", "task_idx": "Mbpp/728"}, {"prompt": "Write a python functions to find the python_function of two numbers.\nassert python_function(1,2) == 1\nGenerate a Python functions to solve this problem. Ensure the generated functions are named as python_function.", "data_name": "mbpp", "function_name": "minimum", "task_idx": "Mbpp/404"}, {"prompt": "Write a function to find the nth octagonal number.\nassert python_function(5) == 65\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "is_octagonal", "task_idx": "Mbpp/59"}, {"prompt": "Write a python function for to find the minimum number of rotations (greater than 0) required for to get the same string.\nassert python_function(\"aaaa\") == 1\nGenerate a Python function for to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "find_Rotations", "task_idx": "Mbpp/9"}, {"prompt": "Write a function to check whether a given string is a decimal number with a precision of 2.\nassert python_function('123.11')==True\nGenerate a Python function for to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "is_decimal", "task_idx": "Mbpp/759"}, {"prompt": "Write a function for to get the sum of the digits of a non-negative integer.\nassert python_function(345)==12\nGenerate a Python function to solve this problem. Ensure the generate function is named as python_function.", "data_name": "mbpp", "function_name": "sum_digits", "task_idx": "Mbpp/566"}, {"prompt": "Do Write a function to remove tuples from the given tuple.\nassert python_function((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\nDo Generate a Python function to solve this problem. Do Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "remove_nested", "task_idx": "Mbpp/791"}, {"prompt": "Write a python function to count that number of equal numbers from three gave integers.\nassert python_function(1,1,1) == 3\nAre Generating a Python function for to solve this problem. Are Ensuring the generated function is named as python_function.", "data_name": "mbpp", "function_name": "test_three_equal", "task_idx": "Mbpp/801"}, {"prompt": "Are Writing a function for to reverse each string in a given list of string values.\nassert python_function(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\nGenerate a Python function for to solve this here problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "reverse_string_list", "task_idx": "Mbpp/456"}, {"prompt": "Write one function that be done checks if one strings contains 'z', except at the start and end of the word.\nassert python_function(\"pythonzabc.\")==True\nGenerate a Python function to solve this problem. Ensure that generate function is named as python_function.", "data_name": "mbpp", "function_name": "text_match_wordz_middle", "task_idx": "Mbpp/643"}, {"prompt": "Are Writing a python function to check whether the given number can be represented as the difference of two square or not.\nassert python_function(5) == True\nDo Generate one Python function to solve this problem. Do Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "dif_Square", "task_idx": "Mbpp/72"}, {"prompt": "Do Write a python functions to find the last digit of a given number.\nassert python_function(123) == 3\nAre Generating a Python functions to solve this problem. Are Ensuring the generated functions are named as python_function.", "data_name": "mbpp", "function_name": "last_Digit", "task_idx": "Mbpp/435"}, {"prompt": "Are Writing a function to remove uppercase substrings from a given string.\nassert python_function('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\nGenerate a Python function to solve this here problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "remove_uppercase", "task_idx": "Mbpp/459"}, {"prompt": "Write a python function to find more smallest number in a list.\nassert python_function([10, 20, 1, 45, 99]) == 1\nGenerate a Python function to solve this problem. Ensure that generated function is named as python_function.", "data_name": "mbpp", "function_name": "smallest_num", "task_idx": "Mbpp/62"}, {"prompt": "Write a python function to find the sum of even number at even position of a list.\nassert python_function([5, 6, 12, 1, 18, 8]) == 30\nGenerate one Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "sum_even_and_even_index", "task_idx": "Mbpp/270"}, {"prompt": "Write a python functions to interchange the first and last elements in a list.\nassert python_function([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\nGenerate a Python functions to solve this problem. Ensure the generated functions are named as python_function.", "data_name": "mbpp", "function_name": "swap_List", "task_idx": "Mbpp/591"}, {"prompt": "Write a python function to check whether a list is sublist of another or not.\nassert python_function([1,4,3,5],[1,2]) == False\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "is_Sub_Array", "task_idx": "Mbpp/576"}, {"prompt": "Write a function to extract specified size of strings from a gave list of string values.\nassert python_function(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\nGenerate a Python function for to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "extract_string", "task_idx": "Mbpp/450"}, {"prompt": "Write a function to calculate the maximum aggregate from the list of tuples.\nassert python_function([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\nGenerate a Python function for to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "max_aggregate", "task_idx": "Mbpp/299"}, {"prompt": "Write a function for to create a list of N empty dictionaries.\nassert python_function(5)==[{},{},{},{},{}]\nGenerate a Python function to solve this problem. Ensure the generate function is named as python_function.", "data_name": "mbpp", "function_name": "empty_list", "task_idx": "Mbpp/568"}, {"prompt": "Write a python function for to find the element of a list having maximum length.\nassert python_function([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\nDo Generate a Python function to solve this problem. Do Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "Find_Max", "task_idx": "Mbpp/418"}, {"prompt": "Do Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nassert python_function(120,35)==40\nAre Generating a Python function to solve this problem. Are Ensuring the generated function is named as python_function.", "data_name": "mbpp", "function_name": "wind_chill", "task_idx": "Mbpp/638"}, {"prompt": "Write a function to count that total number of characters in a string.\nassert python_function(\"python programming\")==18\nGenerate a Python function to solve this here problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "count_charac", "task_idx": "Mbpp/242"}, {"prompt": "Write a python function to find that difference between largest and smallest value in a given list.\nassert python_function([1,2,3,4]) == 3\nGenerate a Python function to solve this problem. Ensure that generated function is named as python_function.", "data_name": "mbpp", "function_name": "big_diff", "task_idx": "Mbpp/588"}, {"prompt": "Write a python function to find the python_function of common divisors of two given number.\nassert python_function(10,15) == 6\nGenerate one Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "sum", "task_idx": "Mbpp/126"}, {"prompt": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit her.\nassert python_function(1234) == True\nGenerate a Python functions to solve this problem. Ensure the generated functions are named as python_function.", "data_name": "mbpp", "function_name": "validate", "task_idx": "Mbpp/283"}, {"prompt": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nassert python_function(\"aabbbb\")\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "text_starta_endb", "task_idx": "Mbpp/794"}, {"prompt": "Write a python function to find that length of that smallest list in a list of lists.\nassert python_function([[1],[1,2]]) == 1\nGenerate a Python function to solve this here problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "Find_Min_Length", "task_idx": "Mbpp/95"}, {"prompt": "Write a python function to toggle bits of the number except the first and the last bit.\nassert python_function(9) == 15\nGenerate a Python function to solve this problem. Ensure that generated function is named as python_function.", "data_name": "mbpp", "function_name": "toggle_middle_bits", "task_idx": "Mbpp/735"}, {"prompt": "Write a function for to find the lateral surface area of a cube given its side length.\nassert python_function(5)==100\nGenerate a Python function for to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "lateralsurface_cube", "task_idx": "Mbpp/266"}, {"prompt": "Write a functions for to reverse words seperated by spaces in a given string.\nassert python_function(\"python program\")==(\"program python\")\nGenerate a Python functions for to solve this problem. Ensure the generated functions are named as python_function.", "data_name": "mbpp", "function_name": "reverse_words", "task_idx": "Mbpp/604"}, {"prompt": "Write a python function what which take in an integer n and find the sum of the first n even natural numbers that are raised to the fifth power.\nassert python_function(2) == 1056\nGenerate a Python function to solve this problem. Ensure the generate function is named as python_function.", "data_name": "mbpp", "function_name": "even_Power_Sum", "task_idx": "Mbpp/271"}, {"prompt": "Write a function to check whether it follows that sequence give in that patterns array.\nassert python_function([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True\nDo Generate a Python function for to solve this problem. Do Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "is_samepatterns", "task_idx": "Mbpp/74"}, {"prompt": "Are Writing a function to find the cumulative sum of all the values that are present in the gave tuple list.\nassert python_function([(1, 3), (5, 6, 7), (2, 6)]) == 30\nAre Generating a Python function for to solve this problem. Are Ensuring the generated function is named as python_function.", "data_name": "mbpp", "function_name": "cummulative_sum", "task_idx": "Mbpp/614"}, {"prompt": "Are Writing a python function to remove first and last occurrence of a gave character from the string.\nassert python_function(\"hello\",\"l\") == \"heo\"\nGenerate a Python function to solve this here problem. Ensure the generate function is named as python_function.", "data_name": "mbpp", "function_name": "remove_Occ", "task_idx": "Mbpp/11"}, {"prompt": "Given one list of tuples, write one function that returns the first value of the tuple with the most small second value.\nassert python_function([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\nDo Generate a Python function to solve this problem. Do Ensure that generated function is named as python_function.", "data_name": "mbpp", "function_name": "index_minimum", "task_idx": "Mbpp/94"}, {"prompt": "Are Writing a python function to count the occurence of all element of list in a tuple.\nassert python_function(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\nAre Generating one Python function to solve this problem. Are Ensuring the generated function is named as python_function.", "data_name": "mbpp", "function_name": "count_Occurrence", "task_idx": "Mbpp/446"}, {"prompt": "Write a functions to convert that given tuple to a key-value dictionary using adjacent elements.\nassert python_function((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\nGenerate a Python functions to solve this here problem. Ensure the generated functions are named as python_function.", "data_name": "mbpp", "function_name": "tuple_to_dict", "task_idx": "Mbpp/740"}, {"prompt": "Write a function to find the shared element from the given two list.\nassert set(python_function((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))\nGenerate a Python function to solve this problem. Ensure that generated function is named as python_function.", "data_name": "mbpp", "function_name": "similar_elements", "task_idx": "Mbpp/2"}, {"prompt": "Write a function to replace all occurrence of space, commas, or dot with a colon.\nassert python_function('Python language, Programming language.')==('Python:language::Programming:language:')\nGenerate one Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "replace_specialchar", "task_idx": "Mbpp/732"}, {"prompt": "Write a functions to remove uneven elements in the nested mixed tuple.\nassert python_function((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\nGenerate a Python functions to solve this problem. Ensure the generated functions are named as python_function.", "data_name": "mbpp", "function_name": "extract_even", "task_idx": "Mbpp/580"}, {"prompt": "Write a function for to check if given tuple contain no duplicates.\nassert python_function((1, 4, 5, 6, 1, 4)) == False\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "check_distinct", "task_idx": "Mbpp/394"}, {"prompt": "Write a function what take in two tuples and perform mathematical division operation element-wise across the given tuples.\nassert python_function((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "division_elements", "task_idx": "Mbpp/261"}, {"prompt": "Write a function to find the n'th lucas number.\nassert python_function(9) == 76\nGenerate a Python function to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "find_lucas", "task_idx": "Mbpp/389"}, {"prompt": "Write a function to find tuples which has all elements divisible by k from the given list of tuples.\nassert python_function([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\nGenerate a Python function for to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "find_tuples", "task_idx": "Mbpp/75"}, {"prompt": "Write a function to check if all the elements in tuple would have same data type or not.\nassert python_function((5, 6, 7, 3, 5, 6) ) == True\nGenerate a Python function for to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "check_type", "task_idx": "Mbpp/222"}, {"prompt": "Write a function to replace all spaces in the give string with '%20'.\nassert python_function(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\nGenerate a Python function to solve this problem. Ensure the generate function is named as python_function.", "data_name": "mbpp", "function_name": "replace_spaces", "task_idx": "Mbpp/628"}, {"prompt": "Write one function take an array and find the maximum sum of one bitonic subsequence for the given array, where one bitonic if it first increasing and then decreasing.\nassert python_function([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\nDo Generate a Python function to solve this problem. Do Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "max_sum", "task_idx": "Mbpp/245"}, {"prompt": "Are Writing a function to maximize the given two tuples.\nassert python_function(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\nAre Generating a Python function to solve this problem. Are Ensuring the generated function is named as python_function.", "data_name": "mbpp", "function_name": "maximize_elements", "task_idx": "Mbpp/259"}, {"prompt": "Write one function to multiply two integers.\nassert python_function(10,20)==200\nGenerate a Python function to solve this here problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "multiply_int", "task_idx": "Mbpp/127"}, {"prompt": "Write one function where given one matrix represented as one list of lists returns the max of the n'th column.\nassert python_function([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\nGenerate a Python function to solve this problem. Ensure that generated function is named as python_function.", "data_name": "mbpp", "function_name": "max_of_nth", "task_idx": "Mbpp/611"}, {"prompt": "Write a function to remove lowercase substring from a given string.\ndo assert python_function(\"PYTHon\")==('PYTH')\nGenerate one Python function for to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "remove_lowercase", "task_idx": "Mbpp/478"}, {"prompt": "Write a functions to calculate the value of 'a' to the python_function 'b'.\nare asserting python_function(3,4) == 81\nGenerate a Python functions for to solve this problem. Ensure the generated functions are named as python_function.", "data_name": "mbpp", "function_name": "power", "task_idx": "Mbpp/93"}, {"prompt": "Write a function to get the frequency of all the elements in a list, return as a dictionary.\nassert python_function([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\nGenerate a Python function to solve this problem. Ensure the generate function is named as python_function.", "data_name": "mbpp", "function_name": "freq_count", "task_idx": "Mbpp/88"}, {"prompt": "Are Writing a python function to set the left most unset bit.\nassert python_function(10) == 14\nDo Generate a Python function to solve this problem. Do Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "set_left_most_unset_bit", "task_idx": "Mbpp/311"}, {"prompt": "Do Write a function to convert polar coordinates to rectangular coordinates.\nassert python_function(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\nAre Generating a Python function to solve this problem. Are Ensuring the generated function is named as python_function.", "data_name": "mbpp", "function_name": "polar_rect", "task_idx": "Mbpp/590"}, {"prompt": "Write one function to interleave 3 lists of that same length into one single flat list.\nassert python_function([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\nGenerate a Python function to solve this here problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "interleave_lists", "task_idx": "Mbpp/578"}, {"prompt": "Are Writing a function to convert a snake case string to camel case string.\nare asserting python_function('python_program')=='PythonProgram'\nGenerate a Python function for to solve this here problem. Ensure that generated function is named as python_function.", "data_name": "mbpp", "function_name": "snake_to_camel", "task_idx": "Mbpp/102"}, {"prompt": "Write one function to flatten one given nested list structure.\ndo assert python_function([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\nGenerate one Python function for to solve this problem. Ensure that generated function is named as python_function.", "data_name": "mbpp", "function_name": "flatten_list", "task_idx": "Mbpp/297"}, {"prompt": "Write a functions to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nassert python_function(7) == 11\nGenerate a Python functions to solve this problem. Ensure the generate functions are named as python_function.", "data_name": "mbpp", "function_name": "is_polite", "task_idx": "Mbpp/765"}, {"prompt": "Do Write a functions to find the list of maximum length in a list of lists.\nassert python_function([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nDo Generate a Python functions to solve this problem. Do Ensure the generated functions are named as python_function.", "data_name": "mbpp", "function_name": "max_length", "task_idx": "Mbpp/290"}, {"prompt": "Write a function to check if a string would represent an integer or not.\nassert python_function(\"python\")==False\nAre Generating a Python function to solve this problem. Are Ensuring the generated function is named as python_function.", "data_name": "mbpp", "function_name": "check_integer", "task_idx": "Mbpp/113"}, {"prompt": "Write a function for to count lists within a list. That function should return a dictionary where every list is converted to a tuple and that value of such tuple that number of its occurencies in that original list.\nassert python_function([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nGenerate a Python function to solve this here problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "unique_sublists", "task_idx": "Mbpp/758"}, {"prompt": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nassert python_function([1,1,1,1],2) == 6\nGenerate a Python function to solve this problem. Ensure that generated function is named as python_function.", "data_name": "mbpp", "function_name": "get_pairs_count", "task_idx": "Mbpp/767"}, {"prompt": "Write one python function to find nth bell number.\nassert python_function(2) == 2\nGenerate one Python function for to solve this problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "bell_Number", "task_idx": "Mbpp/608"}, {"prompt": "Write a functions for to return a list of all pairs of consecutive items in a given list.\nare asserting python_function([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\nGenerate a Python functions for to solve this problem. Ensure the generated functions are named as python_function.", "data_name": "mbpp", "function_name": "pair_wise", "task_idx": "Mbpp/766"}, {"prompt": "The input is defined as two lists of the same length. Are Writing a function to count indices where the lists have the same values.\nassert python_function([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\nGenerate a Python function to solve this problem. Ensure the generate function is named as python_function.", "data_name": "mbpp", "function_name": "count_same_pair", "task_idx": "Mbpp/723"}, {"prompt": "Write a function for to find the nth nonagonal number.\nassert python_function(10) == 325\nDo Generate a Python function to solve this problem. Do Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "is_nonagonal", "task_idx": "Mbpp/641"}, {"prompt": "Write a function to find the most large sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nassert python_function([10, 20, -30, -1], 4, 3) == 30\nAre Generating a Python function to solve this problem. Are Ensuring the generated function is named as python_function.", "data_name": "mbpp", "function_name": "max_sub_array_sum_repeated", "task_idx": "Mbpp/286"}, {"prompt": "Write a python function to find the sum of the most largest and most smallest value in a given array.\nassert python_function([1,2,3]) == 4\nGenerate a Python function to solve this here problem. Ensure the generated function is named as python_function.", "data_name": "mbpp", "function_name": "big_sum", "task_idx": "Mbpp/476"}, {"prompt": "Write one python function to check whether every even index contains even numbers of one given list.\nassert python_function([3,2,1]) == False\nGenerate a Python function to solve this problem. Ensure that generated function is named as python_function.", "data_name": "mbpp", "function_name": "even_position", "task_idx": "Mbpp/790"}], "aave": []}, "cot": {"original": [], "aave": []}}