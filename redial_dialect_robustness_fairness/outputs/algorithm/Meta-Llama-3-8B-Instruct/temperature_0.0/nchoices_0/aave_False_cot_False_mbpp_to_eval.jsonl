{"task_id": "Mbpp/725", "solution": "def extract_quotation(s):\n    return [i.strip('\"') for i in s.split('\"') if i.strip('\"')]"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    freq = {}\n    for item in lst:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    max_freq = max(freq.values())\n    max_freq_items = [item for item, count in freq.items() if count == max_freq]\n    return max(max_freq_items)"}
{"task_id": "Mbpp/305", "solution": "def start_withp(word_list):\n    result = []\n    for word in word_list:\n        words = word.split()\n        for w in words:\n            if w.startswith('p'):\n                result.append(w)\n                if len(result) == 2:\n                    return tuple(result)\n    return ()"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lists):\n    frequency = {}\n    for lst in lists:\n        for elem in lst:\n            if elem in frequency:\n                frequency[elem] += 1\n            else:\n                frequency[elem] = 1\n    return frequency"}
{"task_id": "Mbpp/84", "solution": "Python\ndef sequence(n):\n    a = 1\n    b = 1\n    for _ in range(2, n):\n        a, b = b, a + sum(1 for i in range(1, b + 1) if b % i == 0)\n    return b"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    return sum(set(lst) - set([x for x in lst if lst.count(x) > 1]))"}
{"task_id": "Mbpp/392", "solution": "Python\ndef get_max_sum(n):\n    memo = {1: 1}\n    def f(k):\n        if k in memo:\n            return memo[k]\n        if k % 2 == 0 and k % 3 == 0 and k % 4 == 0 and k % 5 == 0:\n            memo[k] = max(f(k//2) + f(k//3) + f(k//4) + f(k//5), k)\n        elif k % 2 == 0:\n            memo[k] = max(f(k//2), k)\n        elif k % 3 == 0:\n            memo[k] = max(f(k//3), k)\n        elif k % 4 == 0:\n            memo[k] = max(f(k//4), k)\n        elif k % 5 == 0:\n            memo[k] = max(f(k//5), k)\n        else:\n            memo[k] = max(f(k-1), k)\n        return memo[k]\n    return f(n)"}
{"task_id": "Mbpp/565", "solution": "def split(s):\n    return list(s)"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, size):\n    merged_list = sorted(list1 + list2)\n    median = merged_list[size // 2] if size % 2!= 0 else (merged_list[size // 2 - 1] + merged_list[size // 2]) / 2\n    return median"}
{"task_id": "Mbpp/98", "solution": "import math\n\ndef multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    return any(x in seq2 for x in seq1)"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    result = 1\n    for num in arr:\n        result = (result * num) % n\n    return result"}
{"task_id": "Mbpp/309", "solution": "Python\ndef maximum(a, b):\n    return a + b"}
{"task_id": "Mbpp/731", "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    pi = math.pi\n    slant_height = math.sqrt(r**2 + h**2)\n    lateral_surface_area = pi * r * slant_height\n    return lateral_surface_area"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(lst):\n    return sorted(map(int, lst))"}
{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateralsuface_cylinder(radius, height):\n    return 2 * math.pi * radius * (radius + height)"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(t1, t2):\n    return tuple(x % y for x, y in zip(t1, t2))"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(s):\n    return s.replace(\" \", \"\")"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(d):\n    return sorted(d.items(), key=lambda x: x[1], reverse=False)"}
{"task_id": "Mbpp/597", "solution": "Python\ndef find_kth(arr1, arr2, k):\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if k == 1:\n            return min(arr1[i], arr2[j])\n        k -= 1\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    while i < len(arr1):\n        i += 1\n        k -= 1\n        if k == 0:\n            return arr1[i-1]\n    while j < len(arr2):\n        j += 1\n        k -= 1\n        if k == 0:\n            return arr2[j-1]"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(t1, t2):\n    return all(x >= y for x, y in zip(t1, t2))"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(s):\n    return tuple(s)"}
{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    return [x for x in lst if x!= 0] + [x for x in lst if x == 0]"}
{"task_id": "Mbpp/260", "solution": "Python\ndef newman_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    num = 2\n    while True:\n        if is_prime(num):\n            count += 1\n            if count == n:\n                return num\n        num += 1"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    return sum(i**2 for i in range(2, 2*n+1, 2))"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(lst, start, end):\n    return sum(lst[start:end+1])"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(s):\n    return s.count('std')"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(n):\n    side_length = n\n    perimeter = 5 * side_length\n    return perimeter"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    return int(''.join(map(str, sorted(digits, reverse=True))))"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(lst):\n    return len(set(lst)) == 1"}
{"task_id": "Mbpp/567", "solution": "def issort_list(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))"}
{"task_id": "Mbpp/80", "solution": "Python\ndef tetrahedral_number(n):\n    return sum(range(1, n+1))*((n+1)//2)"}
{"task_id": "Mbpp/92", "solution": "Python\ndef is_undulating(n):\n    str_n = str(n)\n    for i in range(1, len(str_n) - 1):\n        if str_n[i]!= str_n[i-1] and str_n[i]!= str_n[i+1]:\n            return False\n    return True"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    for i in range(len(arr) - 1):\n        if arr[i]!= arr[i+1]:\n            return arr[i]\n    return arr[-1]"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left] not in vowels:\n            left += 1\n        elif s[right] not in vowels:\n            right -= 1\n        else:\n            s[left], s[right] = s[right], s[left]\n            left, right = left + 1, right - 1\n    return ''.join(s)"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        total = 0\n        for j in range(i, len(s)):\n            total += int(s[j])\n            if total == j - i + 1:\n                count += 1\n    return count"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(lst):\n    total_sum = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            total_sum += sum(sublist)\n    return total_sum"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    N = len(matrix)\n    dp = [[0] * N for _ in range(N)]\n    dp[0][0] = matrix[0][0]\n    for i in range(1, N):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n    for j in range(1, N):\n        dp[0][j] = dp[0][j-1] + matrix[0][j]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n    max_sum = dp[N-1][N-1]\n    max_path = []\n    i, j = N-1, N-1\n    while i > 0 or j > 0:\n        max_path.append((i, j))\n        if i > 0 and j > 0:\n            if dp[i-1][j] > dp[i][j-1]:\n                i -= 1\n            else:\n                j -= 1\n        elif i > 0:\n            i -= 1\n        else:\n            j -= 1\n    max_path.reverse()\n    total_cost = 0\n    for i, j in max_path:\n        total_cost += matrix[i][j]\n    return total_cost / len(max_path)"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(lst):\n    return int(''.join(map(str, lst)))"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, elem):\n    try:\n        index = arr.index(elem)\n        return (True, index)\n    except ValueError:\n        return (False, -1)"}
{"task_id": "Mbpp/598", "solution": "Python\ndef armstrong_number(n):\n    # Convert the number to string to easily get the number of digits\n    num_str = str(n)\n    num_digits = len(num_str)\n    \n    # Initialize the sum\n    sum = 0\n    \n    # Calculate the sum of the cubes of the digits\n    for digit in num_str:\n        sum += int(digit) ** num_digits\n    \n    # Check if the sum is equal to the original number\n    return sum == n"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    list1[-1:] = list2\n    return list1"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    return length * width"}
{"task_id": "Mbpp/279", "solution": "Python\ndef is_num_decagonal(n):\n    return n*(3*n-1)"}
{"task_id": "Mbpp/479", "solution": "def first_Digit(n):\n    return int(str(n)[0])"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tup):\n    return lst + list(tup)"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    max1 = max2 = float('-inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    return max1, max2"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    for i in range(n-1, -1, -1):\n        if i < n:\n            return i"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum+1):\n        is_divisible = True\n        for digit in str(num):\n            if int(digit)!= 0 and num % int(digit)!= 0:\n                is_divisible = False\n                break\n        if is_divisible:\n            result.append(num)\n    return result"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tup):\n    return tup + tuple(lst)"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result = (result * i) % 10\n    return result"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, n):\n    n = n % len(lst)\n    return lst[-n:] + lst[:-n]"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(s):\n    return''.join(c if c.islower() else'' + c for c in s)"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    return [x for _,x in sorted((sum(row), row) for row in matrix)]"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(d, n):\n    return {k: v for k, v in d.items() if v >= n}"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month):\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/244", "solution": "import math\n\ndef next_Perfect_Square(n):\n    i = int(math.sqrt(n)) + 1\n    while True:\n        square = i * i\n        if square > n:\n            return square\n        i += 1"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(lst):\n    return [num for num in lst if num % 2!= 0]"}
{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    if a == 0 and b == 0:\n        return None\n    if a == 0:\n        if b!= n:\n            return None\n        return 0, n\n    if b == 0:\n        if a!= n:\n            return None\n        return n, 0\n    gcd, x, y = extended_euclidean(a, b)\n    if n % gcd!= 0:\n        return None\n    x *= n // gcd\n    y *= n // gcd\n    return x, y\n\ndef extended_euclidean(a, b):\n    if a == 0:\n        return b, 0, 1\n    gcd, x, y = extended_euclidean(b % a, a)\n    return gcd, y - (b // a) * x, x"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    return {name: height_weight for name, height_weight in students.items() if height_weight[0] > min_height and height_weight[1] > min_weight}"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return 1\n    else:\n        count = 0\n        for i in range(2, m):\n            count += get_total_number_of_sequences(i, n - 1)\n        return count"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(s):\n    return s.replace(\" \", \"\")"}
{"task_id": "Mbpp/56", "solution": "def check(n):\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        bell_numbers = [1, 1]\n        for i in range(2, n+1):\n            bell_numbers.append(sum(bell_numbers[i-1:i]))\n        return bell_numbers[n-1]"}
{"task_id": "Mbpp/612", "solution": "def merge(list_of_lists):\n    first_elements = [sublist[0] for sublist in list_of_lists]\n    second_elements = [sublist[1] for sublist in list_of_lists]\n    return [first_elements, second_elements]"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0"}
{"task_id": "Mbpp/463", "solution": "Python\ndef max_subarray_product(arr):\n    if not arr:\n        return 0\n\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n\n        result = max(result, max_product)\n\n    return result"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    return min(map(int, [x for x in lst if isinstance(x, int)]))"}
{"task_id": "Mbpp/103", "solution": "Python\ndef eulerian_num(n, m):\n    if m < 0 or m > n:\n        return 0\n    if m == 0:\n        return 1\n    if m == n:\n        return 1\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + eulerian_num(n - 1, m)"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    return 4 * side_length"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    sum_even_factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            sum_even_factors += i\n    return sum_even_factors"}
{"task_id": "Mbpp/285", "solution": "def text_match_two_three(s):\n    return 'a' in s and (s.count('b') >= 2 or s.count('b') == 3)"}
{"task_id": "Mbpp/635", "solution": "def heap_sort(lst):\n    return sorted(lst)"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_natural_numbers = n*(n+1)//2\n    return sum_of_cubes - sum_of_natural_numbers"}
{"task_id": "Mbpp/563", "solution": "def extract_values(s):\n    return [x.strip('\"') for x in s.split('\"')]"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    total = 0\n    for k in range(n):\n        if k % 2 == 0:\n            total += binom(n, k)\n    return total\n\nfrom math import comb\nbinom = lambda n, k: comb(n, k)"}
{"task_id": "Mbpp/728", "solution": "def sum_list(a, b):\n    return [x + y for x, y in zip(a, b)]"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    return min(a, b)"}
{"task_id": "Mbpp/59", "solution": "Python\ndef is_octagonal(n):\n    return n*(3*n-1)*2"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(s):\n    for i in range(1, len(s)):\n        if s == s[i:] + s[:i]:\n            return i\n    return len(s)"}
{"task_id": "Mbpp/759", "solution": "def is_decimal(s):\n    try:\n        float(s)\n        parts = s.split('.')\n        if len(parts) == 1:\n            return False\n        if len(parts[1]) > 2:\n            return False\n        return True\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(t):\n    return tuple(x for x in t if not isinstance(x, tuple))"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    return sum(1 for x in (a, b, c) if x == a)"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(lst):\n    return [s[::-1] for s in lst]"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(s):\n    return 'z' in s[1:-1]"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    i = 0\n    while (i * i) <= n:\n        j = 1\n        while (j * j) <= n:\n            if (i * i) - (j * j) == n:\n                return True\n            j += 1\n        i += 1\n    return False"}
{"task_id": "Mbpp/435", "solution": "def last_Digit(n):\n    return n % 10"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(s):\n    return ''.join(c for c in s if not c.isupper())"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(lst):\n    return min(lst)"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    return sum(x for x in lst if x % 2 == 0 and i % 2 == 0)"}
{"task_id": "Mbpp/591", "solution": "def swap_List(lst):\n    if len(lst) > 1:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(lst1, lst2):\n    return lst2 in [lst1[i:i+len(lst2)] for i in range(len(lst1)-len(lst2)+1)]"}
{"task_id": "Mbpp/450", "solution": "def extract_string(lst, size):\n    return [s for s in lst if len(s) >= size]"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(tuples):\n    aggregate_dict = {}\n    for name, score in tuples:\n        if name in aggregate_dict:\n            aggregate_dict[name] += score\n        else:\n            aggregate_dict[name] = score\n    return max(aggregate_dict.items(), key=lambda x: x[1])"}
{"task_id": "Mbpp/568", "solution": "def empty_list(N):\n    return [{}} for _ in range(N)]"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    return max(lst, key=len)"}
{"task_id": "Mbpp/638", "solution": "def wind_chill(wind_velocity, temperature):\n    if wind_velocity <= 1.87 or temperature >= 10:\n        return round(temperature)\n    else:\n        wind_chill = 13.12 + 0.6215 * temperature - 11.37 * (wind_velocity ** 0.16) + 0.3965 * temperature * (wind_velocity ** 0.16)\n        return round(wind_chill)"}
{"task_id": "Mbpp/242", "solution": "def count_charac(s):\n    return len(s)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(lst):\n    return max(lst) - min(lst)"}
{"task_id": "Mbpp/126", "solution": "def sum(a, b):\n    count = 0\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/283", "solution": "def validate(n):\n    digit_freq = {}\n    for digit in str(n):\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        else:\n            digit_freq[digit] = 1\n    for digit, freq in digit_freq.items():\n        if int(digit) < freq:\n            return False\n    return True"}
{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(s):\n    pattern = r\"a.*b\"\n    return bool(re.match(pattern, s))"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(list_of_lists):\n    return min(len(sublist) for sublist in list_of_lists)"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    # Convert the number to binary and remove the '0b' prefix\n    binary = bin(n)[2:]\n    \n    # Toggle the bits except the first and the last bit\n    toggled_binary = '1' + ''.join('1' if bit == '0' else '0' for bit in binary[1:-1]) + '1'\n    \n    # Convert the toggled binary back to decimal\n    result = int(toggled_binary, 2)\n    \n    return result"}
{"task_id": "Mbpp/266", "solution": "Python\ndef lateralsurface_cube(side_length):\n    return 4 * side_length ** 2"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(s):\n    return''.join(s.split()[::-1])"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    return sum(i**5 for i in range(2, 2*n+1, 2))"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(patterns, sequence):\n    for i in range(len(patterns) - 1):\n        if patterns[i]!= sequence[i] and patterns[i]!= patterns[i+1]:\n            return False\n    return True"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuples_list):\n    return sum(sum(t) for t in tuples_list)"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(s, c):\n    return s[:s.index(c)] + s[s.index(c)+1:s.rindex(c)]"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(tuples):\n    return min(tuples, key=lambda x: x[1])[0]"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tup, lst):\n    return sum(tup.count(i) for i in lst)"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(t):\n    return {t[i]: t[i+1] for i in range(0, len(t), 2)}"}
{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    return set(list1) & set(list2)"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(s):\n    return s.replace(' ', ':').replace(',', ':').replace('.', ':')"}
{"task_id": "Mbpp/580", "solution": "def extract_even(t):\n    result = []\n    for element in t:\n        if isinstance(element, tuple):\n            result.append(extract_even(element))\n        else:\n            result.append(element)\n    return tuple(result)"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(t):\n    return len(t) == len(set(t))"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    return tuple(a / b for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/389", "solution": "Python\ndef find_lucas(n):\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples_list, k):\n    return [t for t in tuples_list if all(i % k == 0 for i in t)]"}
{"task_id": "Mbpp/222", "solution": "def check_type(t):\n    return len(set(type(x) for x in t)) == 1"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(s):\n    return s.replace(' ', '%20')"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    inc = [1] * n\n    dec = [1] * n\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                inc[i] = max(inc[i], inc[j] + 1)\n\n    for i in range(n - 2, -1, -1):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                dec[i] = max(dec[i], dec[j] + 1)\n\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - 1)\n\n    return max_sum"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(t1, t2):\n    result = []\n    for a, b in zip(t1, t2):\n        result.append((max(a[0], b[0]), max(a[1], b[1])))\n    return tuple(result)"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    return a * b"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    return max(row[n-1] for row in matrix)"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(s):\n    return ''.join(c for c in s if c.isupper())"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    return a ** b"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    freq_dict = {}\n    for elem in lst:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    return n | (n & -n)"}
{"task_id": "Mbpp/590", "solution": "import math\n\ndef polar_rect(r, theta):\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, complex(x, y))"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    return [x for t in zip(list1, list2, list3) for x in t]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(s):\n    return ''.join(word.capitalize() for word in s.split('_'))"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flat_list = []\n    for element in nested_list:\n        if isinstance(element, list):\n            flat_list.extend(flatten_list(element))\n        else:\n            flat_list.append(element)\n    return flat_list"}
{"task_id": "Mbpp/765", "solution": "Python\ndef is_polite(n):\n    polite_numbers = []\n    i = 0\n    while len(polite_numbers) < n:\n        i += 1\n        polite_numbers.append(i * (3 * i - 1) // 2)\n    return polite_numbers[-1]"}
{"task_id": "Mbpp/290", "solution": "def max_length(list_of_lists):\n    max_length = 0\n    max_list = []\n    for lst in list_of_lists:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_length, max_list"}
{"task_id": "Mbpp/113", "solution": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    count_dict = {}\n    for item in lst:\n        item_tuple = tuple(item)\n        if item_tuple in count_dict:\n            count_dict[item_tuple] += 1\n        else:\n            count_dict[item_tuple] = 1\n    return count_dict"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(lst, sum):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if lst[i] + lst[j] == sum:\n                count += 1\n    return count"}
{"task_id": "Mbpp/608", "solution": "Python\ndef bell_Number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        bell_numbers = [1, 1]\n        for i in range(2, n+1):\n            bell_numbers.append(sum([bell_numbers[j] * math.comb(i-1, j) for j in range(i)]))\n        return bell_numbers[n]"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    return [(x, y) for x, y in zip(lst, lst[1:])]"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    return sum(1 for a, b in zip(list1, list2) if a == b)"}
{"task_id": "Mbpp/641", "solution": "Python\ndef is_nonagonal(n):\n    return n*(8*n**2 - 8*n + 1)//2"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, k, n):\n    arr = arr * k\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in arr:\n        current_sum += num\n        max_sum = max(max_sum, current_sum)\n        current_sum = max(0, current_sum)\n    return max_sum"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    return max(arr) + min(arr)"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2!= 0:\n            return False\n    return True"}
