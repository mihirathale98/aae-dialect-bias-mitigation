{"task_id": "HumanEval/0", "solution": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "solution": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    stack = []\n    result = []\n    temp = \"\"\n\n    for char in paren_string:\n        if char == \"(\":\n            stack.append(char)\n            temp += char\n        elif char == \")\":\n            if stack:\n                stack.pop()\n                temp += char\n                if not stack:\n                    result.append(temp)\n                    temp = \"\"\n            else:\n                return []  # invalid input\n\n    if stack:\n        return []  # invalid input\n\n    return result"}
{"task_id": "HumanEval/2", "solution": "def truncate_number(number: float) -> float:\n    \"\"\"\n    Given a positive floating point number, it can be decomposed into an integer part\n    (largest integer smaller than given number) and decimals (leftover part always smaller than 1).\n    Return the decimal part of the number.\n    \"\"\"\n    return number - int(number)"}
{"task_id": "HumanEval/3", "solution": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "solution": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    Calculate Mean Absolute Deviation (MAD) around the mean of a given list of numbers.\n\n    Args:\n        numbers (List[float]): A list of floating-point numbers.\n\n    Returns:\n        float: The Mean Absolute Deviation (MAD) around the mean of the input numbers.\n    \"\"\"\n    # Calculate the mean of the input numbers\n    mean = sum(numbers) / len(numbers)\n\n    # Calculate the absolute differences between each number and the mean\n    deviations = [abs(x - mean) for x in numbers]\n\n    # Calculate the Mean Absolute Deviation (MAD)\n    mad = sum(deviations) / len(deviations)\n\n    return mad"}
{"task_id": "HumanEval/5", "solution": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "solution": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        level = 0\n        max_level = 0\n        for char in group:\n            if char == '(':\n                level += 1\n                max_level = max(max_level, level)\n            elif char == ')':\n                level -= 1\n        result.append(max_level)\n    return result"}
{"task_id": "HumanEval/7", "solution": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    Returns a tuple consisting of the sum and product of all integers in the list.\n    If the list is empty, returns (0, 1).\n    \"\"\"\n    sum_result = 0\n    product_result = 1\n\n    for num in numbers:\n        sum_result += num\n        product_result *= num\n\n    return sum_result, product_result"}
{"task_id": "HumanEval/9", "solution": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    max_so_far = float('-inf')\n    for num in numbers:\n        result.append(max_so_far)\n        max_so_far = max(max_so_far, num)\n    return result"}
{"task_id": "HumanEval/10", "solution": "def make_palindrome(s: str) -> str:\n    \"\"\"\n    Find the shortest palindrome that begins with a supplied string.\n    \"\"\"\n    if not s:\n        return \"\"\n\n    # Find the longest postfix of s that is a palindrome\n    for i in range(len(s), -1, -1):\n        if is_palindrome(s[i:]):\n            return s + s[i:][::-1]\n\ndef is_palindrome(s: str) -> bool:\n    \"\"\"\n    Test if given string is a palindrome\n    \"\"\"\n    return s == s[::-1]"}
{"task_id": "HumanEval/11", "solution": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for i in range(max(len(a), len(b))):\n        bit_a = a[-1 - i] if i < len(a) else '0'\n        bit_b = b[-1 - i] if i < len(b) else '0'\n        result = ('1' if bit_a!= bit_b else '0') + result\n    return result"}
{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "solution": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b!= 0:\n        a, b = b, a % b\n    return abs(a)"}
{"task_id": "HumanEval/14", "solution": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"\n    Return a list of all prefixes from shortest to longest of the input string.\n    \"\"\"\n    prefixes = []\n    for i in range(len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes"}
{"task_id": "HumanEval/15", "solution": "def string_sequence(n: int) -> str:\n    return''.join(str(i) for i in range(n + 1))"}
{"task_id": "HumanEval/16", "solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Returns the number of distinct characters (regardless of case) in the input string.\n    \"\"\"\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "solution": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = {'o': 4, 'o|': 2, '.|': 1}\n    beats = []\n    current_note = ''\n    for char in music_string:\n        if char in notes:\n            if current_note:\n                beats.append(notes[current_note])\n            current_note = char\n        else:\n            current_note += char\n    if current_note:\n        beats.append(notes[current_note])\n    return beats"}
{"task_id": "HumanEval/18", "solution": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\"\n    Find how many times a given substring can be found in the original string.\n    Count overlapping cases.\n    \"\"\"\n    count = 0\n    start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos!= -1:\n            count += 1\n            start = pos + 1\n        else:\n            break\n    return count"}
{"task_id": "HumanEval/19", "solution": "def sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of numbers from 'zero' to 'nine' in ascending order.\n\n    Args:\n        numbers (str): A space-delimited string of numbers from 'zero' to 'nine'.\n\n    Returns:\n        str: The input string with numbers sorted from smallest to largest.\n    \"\"\"\n    # Define a dictionary to map number strings to their integer values\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n                'five': 5,'six': 6,'seven': 7, 'eight': 8, 'nine': 9}\n\n    # Split the input string into a list of numbers\n    num_list = numbers.split()\n\n    # Sort the list of numbers using the dictionary to convert strings to integers\n    num_list.sort(key=lambda x: num_dict[x])\n\n    # Join the sorted list of numbers back into a string\n    sorted_numbers =''.join(num_list)\n\n    return sorted_numbers"}
{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    Returns the two numbers in the list that are closest to each other.\n    \"\"\"\n    # Sort the list of numbers\n    numbers.sort()\n    # Initialize the minimum difference and the closest pair\n    min_diff = float('inf')\n    closest_pair = (None, None)\n    # Iterate over the sorted list to find the closest pair\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair"}
{"task_id": "HumanEval/21", "solution": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Apply a linear transform to the input list of numbers, such that the smallest number becomes 0 and the largest becomes 1.\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "HumanEval/22", "solution": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "solution": "def strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "solution": "def largest_divisor(n: int) -> int:\n    \"\"\"\n    Find the largest number that divides n evenly, smaller than n\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1  # return 1 if n is prime"}
{"task_id": "HumanEval/25", "solution": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "solution": "from collections import OrderedDict\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\n    Remove all elements that occur more than once from a list of integers.\n    Keep the order of elements left the same as in the input.\n    \"\"\"\n    seen = OrderedDict()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen[num] = True\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "solution": "def flip_case(string: str) -> str:\n    return string.swapcase()"}
{"task_id": "HumanEval/28", "solution": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "solution": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "solution": "def get_positive(l: list) -> list:\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "solution": "import math\n\ndef find_zero(xs: list) -> float:\n    \"\"\"\n    Finds the zero point of a polynomial with coefficients xs.\n    Returns only one zero point, even if there are many.\n    Assumes xs has an even number of coefficients and the largest non-zero coefficient.\n    \"\"\"\n    def poly(xs: list, x: float) -> float:\n        \"\"\"\n        Evaluates polynomial with coefficients xs at point x.\n        \"\"\"\n        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n    # Find the largest non-zero coefficient\n    max_nonzero_coeff = max(abs(coeff) for coeff in xs if coeff!= 0)\n\n    # Initialize the zero point with a random value\n    x0 = 0.5\n\n    # Use Newton's method to find the zero point\n    for _ in range(100):  # maximum 100 iterations\n        x1 = x0 - poly(xs, x0) / poly([i * coeff for i, coeff in enumerate(xs) if coeff!= 0], x0)\n        if abs(x1 - x0) < 1e-6:  # convergence criterion\n            return round(x1, 2)\n        x0 = x1\n\n    # If no convergence, return None\n    return None"}
{"task_id": "HumanEval/33", "solution": "def sort_third(l: list) -> list:\n    return [x if i % 3!= 0 else sorted([x])[0] for i, x in enumerate(l)]"}
{"task_id": "HumanEval/34", "solution": "def unique(l: list) -> list:\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "solution": "def max_element(l: list) -> int:\n    return max(l)"}
{"task_id": "HumanEval/36", "solution": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "solution": "def sort_even(l: list) -> list:\n    return [x if i % 2 == 0 else x for i, x in enumerate(sorted([x for i, x in enumerate(l) if i % 2 == 0]))]"}
{"task_id": "HumanEval/38", "solution": "def decode_cyclic(s: str) -> str:\n    \"\"\"\n    Decodes a string encoded with the encode_cyclic function.\n    \"\"\"\n    # Split the string into groups of 3 characters\n    groups = [s[i:i+3] for i in range(0, len(s), 3)]\n    \n    # Reverse each group to undo the cycling\n    decoded_groups = [group[1:] + group[0] if len(group) == 3 else group for group in groups]\n    \n    # Join the decoded groups into a single string\n    return \"\".join(decoded_groups)"}
{"task_id": "HumanEval/39", "solution": "Python\ndef is_prime(num: int) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef fibonacci(n: int) -> int:\n    \"\"\"Return the n-th Fibonacci number.\"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n\ndef prime_fib(n: int) -> int:\n    \"\"\"Return the n-th Fibonacci number that is also prime.\"\"\"\n    num = 0\n    i = 1\n    while True:\n        num = fibonacci(i)\n        if is_prime(num):\n            if i == n:\n                return num\n            i += 1\n        else:\n            i += 1"}
{"task_id": "HumanEval/40", "solution": "def triples_sum_to_zero(l: list) -> bool:\n    \"\"\"\n    Returns True if there are three distinct elements in the list that sum to zero, and False otherwise.\n    \"\"\"\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/41", "solution": "Python\ndef car_race_collision(n: int) -> int:\n    collisions = 0\n    for i in range(1, n):\n        for j in range(i):\n            if (i - j) % (2 * (i + j) + 1) == 0:\n                collisions += 1\n    return collisions"}
{"task_id": "HumanEval/42", "solution": "def incr_list(l: list) -> list:\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "solution": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "solution": "def change_base(x: int, base: int) -> str:\n    convert_string = \"0123456789\"\n    if x < base:\n        return convert_string[x]\n    else:\n        return change_base(x // base, base) + convert_string[x % base]"}
{"task_id": "HumanEval/45", "solution": "def triangle_area(a, h):\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "solution": "def fib4(n: int) -> int:\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        fib4 = [0, 0, 2, 0]\n        for i in range(4, n+1):\n            fib4.append(fib4[i-1] + fib4[i-2] + fib4[i-3] + fib4[i-4])\n        return fib4[n-1]"}
{"task_id": "HumanEval/47", "solution": "def median(l: list) -> float:\n    return sum(l) / len(l) if l else 0"}
{"task_id": "HumanEval/48", "solution": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if the given string is a palindrome.\n    \"\"\"\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "solution": "def modp(n: int, p: int) -> int:\n    \"\"\"\n    Return 2^n modulo p (be aware of numerics).\n    \"\"\"\n    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "solution": "def decode_shift(s: str) -> str:\n    \"\"\"\n    Decodes the input string by shifting every character back by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "solution": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/52", "solution": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)"}
{"task_id": "HumanEval/53", "solution": "def add(x: int, y: int) -> int:\n    return x + y"}
{"task_id": "HumanEval/54", "solution": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "solution": "def fib(n: int) -> int:\n    if n <= 0:\n        return \"Input should be a positive integer\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/56", "solution": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    Returns True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(\"<\")\n        elif bracket == \">\":\n            if not stack or stack.pop()!= \"<\":\n                return False\n    return not stack"}
{"task_id": "HumanEval/57", "solution": "def monotonic(l: list) -> bool:\n    \"\"\"\n    Returns True if the list elements are monotonically increasing or decreasing.\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))"}
{"task_id": "HumanEval/58", "solution": "def common(l1: list, l2: list) -> list:\n    \"\"\"\n    Return sorted unique elements for two lists.\n    \"\"\"\n    return sorted(set(l1 + l2))"}
{"task_id": "HumanEval/59", "solution": "def largest_prime_factor(n: int) -> int:\n    \"\"\"\n    Return the largest prime factor of n.\n    \"\"\"\n    def is_prime(x: int) -> bool:\n        \"\"\"\n        Check if x is a prime number.\n        \"\"\"\n        if x <= 1:\n            return False\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n    largest_prime_factor = max([f for f in factors if is_prime(f)])\n    return largest_prime_factor"}
{"task_id": "HumanEval/60", "solution": "def sum_to_n(n: int) -> int:\n    return sum(range(1, n+1))"}
{"task_id": "HumanEval/61", "solution": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    Returns True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "solution": "def derivative(xs: list) -> list:\n    \"\"\"\n    Returns the coefficients of the derivative of the polynomial represented by xs.\n    \"\"\"\n    result = [0]  # Initialize the result with a single element, 0\n    for i in range(1, len(xs)):\n        result.append(i * xs[i])  # Calculate the derivative of each term\n    return result"}
{"task_id": "HumanEval/63", "solution": "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n+1):\n            a, b, c = b, c, a+b+c\n        return c"}
{"task_id": "HumanEval/64", "solution": "def vowels_count(s):\n    vowels = 'aeiou'\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    if s.lower().endswith('y'):\n        count += 1\n    return count"}
{"task_id": "HumanEval/65", "solution": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    return x_str[-shift:] + x_str[:-shift]"}
{"task_id": "HumanEval/66", "solution": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())"}
{"task_id": "HumanEval/67", "solution": "def fruit_distribution(s, n):\n    words = s.split()\n    apples = 0\n    oranges = 0\n    for word in words:\n        if word.endswith(\"apples\"):\n            apples = int(word[:-7])\n        elif word.endswith(\"oranges\"):\n            oranges = int(word[:-8])\n    return n - apples - oranges"}
{"task_id": "HumanEval/68", "solution": "def pluck(arr):\n    even_nodes = [(x, i) for i, x in enumerate(arr) if x % 2 == 0]\n    if not even_nodes:\n        return []\n    smallest_even_node = min(even_nodes, key=lambda x: (x[0], x[1]))\n    return [smallest_even_node[0], smallest_even_node[1]]"}
{"task_id": "HumanEval/69", "solution": "def search(lst):\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    max_freq = max(freq_dict.values())\n    for num, freq in freq_dict.items():\n        if freq >= num and num > 0:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "solution": "def strange_sort_list(lst):\n    result = []\n    while lst:\n        result.append(min(lst))\n        lst.remove(min(lst))\n        if lst:\n            result.append(max(lst))\n            lst.remove(max(lst))\n    return result"}
{"task_id": "HumanEval/71", "solution": "import math\n\ndef triangle_area(a, b, c):\n    # Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        # Round the area to 2 decimal points\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "solution": "def will_it_fly(q, w):\n    return str(q) == str(q)[::-1] and sum(q) <= w"}
{"task_id": "HumanEval/73", "solution": "Python\ndef smallest_change(arr):\n    n = len(arr)\n    rev_arr = arr[::-1]\n    count = 0\n    for i in range(n):\n        if arr[i]!= rev_arr[i]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/74", "solution": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 > total_chars_lst2:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "solution": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    for p1 in range(2, 100):\n        if is_prime(p1):\n            for p2 in range(p1, 100):\n                if is_prime(p2):\n                    for p3 in range(p2, 100):\n                        if is_prime(p3) and p1 * p2 * p3 == a:\n                            return True\n    return False"}
{"task_id": "HumanEval/76", "solution": "import math\n\ndef is_simple_power(x, n):\n    root = math.pow(n, 1.0 / math.log(x, n))\n    return int(root + 0.5) == root"}
{"task_id": "HumanEval/77", "solution": "def iscube(a):\n    c = int(a ** (1. / 3))\n    return c ** 3 == a"}
{"task_id": "HumanEval/78", "solution": "def hex_key(num):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    count = 0\n    for char in num:\n        if char in '237BD':\n            if is_prime(int(char, 16)):\n                count += 1\n    return count"}
{"task_id": "HumanEval/79", "solution": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]  # convert to binary and remove '0b' prefix\n    return \"db\" + \"0\" * (8 - len(binary)) + binary + \"db\""}
{"task_id": "HumanEval/80", "solution": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(0, len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "solution": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "solution": "def prime_length(s):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(s))"}
{"task_id": "HumanEval/83", "solution": "def starts_one_ends(n):\n    # Calculate the total number of n-digit positive integers\n    total_numbers = 10 ** (n - 1)\n    \n    # Calculate the number of n-digit positive integers that start with 1\n    start_with_1 = 9 * (10 ** (n - 2))\n    \n    # Calculate the number of n-digit positive integers that end with 1\n    end_with_1 = total_numbers - 10 ** (n - 1) + 1\n    \n    # Return the sum of the numbers of n-digit positive integers that start or end with 1\n    return start_with_1 + end_with_1"}
{"task_id": "HumanEval/84", "solution": "def solve(N):\n    # Convert the integer to binary and remove the '0b' prefix\n    binary_str = bin(N)[2:]\n    # Calculate the sum of the digits\n    digit_sum = sum(int(digit) for digit in binary_str)\n    # Convert the sum to binary and return as a string\n    return bin(digit_sum)[2:]"}
{"task_id": "HumanEval/85", "solution": "def add(lst):\n    return [x for i, x in enumerate(lst) if i % 2!= 0 and x % 2 == 0][0]"}
{"task_id": "HumanEval/86", "solution": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return''.join(ordered_words)"}
{"task_id": "HumanEval/87", "solution": "def get_row(lst, x):\n    result = [(i, j) for i, row in enumerate(lst) for j, val in enumerate(row) if val == x]\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result"}
{"task_id": "HumanEval/88", "solution": "def sort_array(array):\n    if not array:\n        return []\n\n    first_last_sum = array[0] + array[-1]\n    if first_last_sum % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "solution": "Python\ndef encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 97 if char.islower() else 65\n            result += chr((ord(char) - ascii_offset + 2 * 2) % 26 + ascii_offset)\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "solution": "def next_smallest(lst):\n    if not lst:\n        return None\n    unique_lst = sorted(set(lst))\n    if len(unique_lst) < 2:\n        return None\n    return unique_lst[1]"}
{"task_id": "HumanEval/91", "solution": "def is_bored(S):\n    sentences = S.split('. ')\n    sentences += S.split('? ') if '?' in S else []\n    sentences += S.split('! ') if '!' in S else []\n    return sum(1 for sentence in sentences if sentence.strip().startswith('I'))"}
{"task_id": "HumanEval/92", "solution": "def any_int(x, y, z):\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    return (x == y + z) or (x == z + y) or (y == x + z) or (y == z + x) or (z == x + y) or (z == y + x)"}
{"task_id": "HumanEval/93", "solution": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in message:\n        if char in vowels:\n            index = ord(char) - ord('a')\n            result += chr(ord('a') + (index + 2) % 26)\n        else:\n            result += char.swapcase()\n    return result"}
{"task_id": "HumanEval/94", "solution": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = max([x for x in lst if is_prime(x)])\n    return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "HumanEval/95", "solution": "def check_dict_case(d):\n    if not d:  # return False if the dictionary is empty\n        return False\n    all_lower = all(isinstance(k, str) and k.islower() for k in d)\n    all_upper = all(isinstance(k, str) and k.isupper() for k in d)\n    return all_lower or all_upper"}
{"task_id": "HumanEval/96", "solution": "Python\ndef count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    result = []\n    for i in range(2, n):\n        if is_prime(i):\n            result.append(i)\n        if len(result) == n - 1:\n            break\n    return result"}
{"task_id": "HumanEval/97", "solution": "def multiply(a, b):\n    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/98", "solution": "def count_upper(s):\n    count = 0\n    for i, c in enumerate(s):\n        if i % 2 == 0 and c.upper() in 'AEIOU':\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "solution": "def closest_integer(value):\n    num = float(value)\n    return round(num + 0.5) if num >= 0 else round(num - 0.5)"}
{"task_id": "HumanEval/100", "solution": "def make_a_pile(n):\n    result = []\n    for i in range(n):\n        if i % 2 == 0:  # even level\n            result.append(i * 2 + 2)\n        else:  # odd level\n            result.append(i * 2 + 1)\n    return result"}
{"task_id": "HumanEval/101", "solution": "def words_string(s):\n    return [word.strip() for word in s.replace(\",\", \" \").split()]"}
{"task_id": "HumanEval/102", "solution": "def choose_num(x, y):\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "solution": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m - n + 1))\n    return bin(avg)[2:]"}
{"task_id": "HumanEval/104", "solution": "def unique_digits(x):\n    return sorted([i for i in x if not any(int(digit) % 2 == 0 for digit in str(i))])"}
{"task_id": "HumanEval/105", "solution": "def by_length(arr):\n    # Filter out numbers outside the range [1, 9]\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    # Sort the filtered array\n    sorted_arr = sorted(filtered_arr)\n    # Reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n    # Replace each digit with its corresponding name\n    result = [f\"{x}o\" if x % 2 == 0 else f\"{x}n\" for x in reversed_arr]\n    return result"}
{"task_id": "HumanEval/106", "solution": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:  # i is even\n            result.append(math.factorial(i))\n        else:  # i is odd\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/107", "solution": "def even_odd_palindrome(n):\n    even_palindromes = 0\n    odd_palindromes = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:  # check if the integer is a palindrome\n            if i % 2 == 0:  # check if the palindrome is even\n                even_palindromes += 1\n            else:\n                odd_palindromes += 1\n    return (even_palindromes, odd_palindromes)"}
{"task_id": "HumanEval/108", "solution": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num >= 0:\n            if sum(int(digit) for digit in str(num)) > 0:\n                count += 1\n        else:\n            if sum(int(digit) for digit in str(abs(num))) > 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/109", "solution": "Python\ndef move_one_ball(arr):\n    if not arr:\n        return True\n\n    min_val = min(arr)\n    max_val = max(arr)\n\n    if min_val == max_val:\n        return True\n\n    for i in range(len(arr)):\n        if arr[i] > min_val:\n            return False\n\n    return True"}
{"task_id": "HumanEval/110", "solution": "def exchange(lst1, lst2):\n    odd_count = sum(1 for x in lst1 if x % 2!= 0)\n    if odd_count > len(lst2):\n        return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/111", "solution": "def histogram(test):\n    if not test:\n        return {}\n\n    letter_counts = {}\n    for letter in test.split():\n        if letter in letter_counts:\n            letter_counts[letter] += 1\n        else:\n            letter_counts[letter] = 1\n\n    max_count = max(letter_counts.values())\n    most_common_letters = [letter for letter, count in letter_counts.items() if count == max_count]\n\n    return {letter: count for letter, count in letter_counts.items() if letter in most_common_letters}"}
{"task_id": "HumanEval/112", "solution": "def reverse_delete(s, c):\n    # Create a set of characters in c for efficient lookup\n    c_set = set(c)\n    \n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Iterate over each character in s\n    for char in s:\n        # Check if the character is not in c_set\n        if char not in c_set:\n            # Add the character to the result string\n            result += char\n    \n    # Check if the result string is palindrome\n    is_palindrome = result == result[::-1]\n    \n    # Return a tuple containing the result string and the palindrome check\n    return result, is_palindrome"}
{"task_id": "HumanEval/113", "solution": "def odd_count(lst):\n    result = []\n    for i, s in enumerate(lst):\n        odd_count = sum(int(d) % 2 for d in s)\n        result.append(f\"the number of odd elements {odd_count}n the str{str(i+1)}ng {str(i+1)} of the {str(i+1)}nput.\")\n    return result"}
{"task_id": "HumanEval/114", "solution": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n    return min_sum"}
{"task_id": "HumanEval/115", "solution": "import math\n\ndef max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    total_buckets = math.ceil(total_water / capacity)\n    return total_buckets"}
{"task_id": "HumanEval/116", "solution": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "solution": "def select_words(s, n):\n    s = s.split()\n    result = []\n    for word in s:\n        consonants = 0\n        for char in word:\n            if char.lower() not in 'aeiou':\n                consonants += 1\n        if consonants == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "solution": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, -1, -1):  # iterate from right to left\n        if word[i] not in vowels:  # if current char is not a vowel\n            if word[i+1] in vowels and word[i+2] not in vowels:  # check if next char is a vowel and next next char is not a vowel\n                return word[i+1]  # return the closest vowel\n    return \"\"  # if no vowel found"}
{"task_id": "HumanEval/119", "solution": "def match_parens(lst):\n    stack = []\n    for s in lst:\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack:\n                    return 'No'\n                stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "solution": "def maximum(arr, k):\n    return sorted(arr)[:k]"}
{"task_id": "HumanEval/121", "solution": "def solution(lst):\n    return sum(x for x in lst if x % 2!= 0 and i % 2 == 0)"}
{"task_id": "HumanEval/122", "solution": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if len(str(x)) <= 2)"}
{"task_id": "HumanEval/123", "solution": "Python\ndef get_odd_collatz(n):\n    sequence = [n]\n    while n!= 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3*n + 1\n        sequence.append(n)\n    return sorted([x for x in sequence if x % 2!= 0])"}
{"task_id": "HumanEval/124", "solution": "Python\nfrom datetime import datetime\n\ndef valid_date(date):\n    try:\n        datetime.strptime(date, '%m-%d-%Y')\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        return True\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/125", "solution": "def split_words(txt):\n    words = txt.split()\n    if not words and ',' in txt:\n        words = txt.split(',')\n    if not words:\n        return sum(1 for c in txt.lower() if ord(c) % 2 == 1)\n    return words"}
{"task_id": "HumanEval/126", "solution": "def is_sorted(lst):\n    if len(lst) == 0:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return len(set(lst)) == len(lst)"}
{"task_id": "HumanEval/127", "solution": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n\n    if intersection_start > intersection_end:\n        return \"NO\"\n\n    intersection_length = intersection_end - intersection_start + 1\n\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/128", "solution": "def prod_signs(arr):\n    if not arr:\n        return None\n    signs = [1 if x > 0 else -1 if x < 0 else 0 for x in arr]\n    product = 1\n    for sign in signs:\n        product *= sign\n    return sum(abs(x) for x in arr) * product"}
{"task_id": "HumanEval/129", "solution": "Python\nfrom collections import deque\n\ndef minPath(grid, k):\n    N = len(grid)\n    visited = [[False] * N for _ in range(N)]\n    queue = deque([(i, j, [grid[i][j]]) for i in range(N) for j in range(N)])\n    visited[0][0] = True\n    min_path = None\n    while queue:\n        x, y, path = queue.popleft()\n        if len(path) == k:\n            if min_path is None or path < min_path:\n                min_path = path\n        else:\n            for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < N and 0 <= ny < N and not visited[nx][ny]:\n                    visited[nx][ny] = True\n                    queue.append((nx, ny, path + [grid[nx][ny]]))\n    return min_path"}
{"task_id": "HumanEval/130", "solution": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        tribonacci_sequence = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tribonacci_sequence.append(1 + i / 2)\n            else:\n                tribonacci_sequence.append(tribonacci_sequence[i - 1] + tribonacci_sequence[i - 2] + tribonacci_sequence[i - 3])\n        return tribonacci_sequence"}
{"task_id": "HumanEval/131", "solution": "def digits(n):\n    product = 1\n    for i in range(1, n+1):\n        if i % 2!= 0:  # check if i is odd\n            product *= i\n    return product"}
{"task_id": "HumanEval/132", "solution": "def is_nested(s):\n    stack = []\n    for c in s:\n        if c == '[':\n            stack.append(c)\n        elif c == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return bool(stack)"}
{"task_id": "HumanEval/133", "solution": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x) ** 2 for x in lst)"}
{"task_id": "HumanEval/134", "solution": "def check_if_last_char_is_a_letter(txt):\n    if not txt:  # empty string\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():  # not alphabetical\n        return False\n    if txt.rstrip().endswith(last_char):  # part of a word\n        return False\n    return True"}
{"task_id": "HumanEval/135", "solution": "def can_arrange(arr):\n    for i in range(1, len(arr)):\n        if arr[i-1] > arr[i]:\n            return i-1\n    return -1"}
{"task_id": "HumanEval/136", "solution": "def largest_smallest_integers(lst):\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    if negatives:\n        a = max(negatives)\n    else:\n        a = None\n    if positives:\n        b = min(positives)\n    else:\n        b = None\n    return a, b"}
{"task_id": "HumanEval/137", "solution": "def compare_one(a, b):\n    if isinstance(a, str) and isinstance(b, str):\n        a = float(a.replace(\",\", \".\").replace(\".\", \"\"))\n        b = float(b.replace(\",\", \".\").replace(\".\", \"\"))\n    elif isinstance(a, str):\n        a = float(a.replace(\",\", \".\"))\n    elif isinstance(b, str):\n        b = float(b.replace(\",\", \".\"))\n\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None"}
{"task_id": "HumanEval/138", "solution": "def is_equal_to_sum_even(n):\n    for a in range(2, n+1, 2):\n        for b in range(2, n+1, 2):\n            for c in range(2, n+1, 2):\n                for d in range(2, n+1, 2):\n                    if a + b + c + d == n:\n                        return True\n    return False"}
{"task_id": "HumanEval/139", "solution": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        result *= math.factorial(i)\n    return result"}
{"task_id": "HumanEval/140", "solution": "def fix_spaces(text):\n    text = text.replace(\" \", \"_\")\n    while \"  \" in text:\n        text = text.replace(\"  \", \"-\")\n    return text"}
{"task_id": "HumanEval/141", "solution": "import re\n\ndef file_name_check(file_name):\n    # Check if there are more than three digits in the file name\n    if len(re.findall(r'\\d', file_name)) > 3:\n        return 'No'\n\n    # Check if the file name contains exactly one dot\n    if file_name.count('.')!= 1:\n        return 'No'\n\n    # Split the file name into two parts: before and after the dot\n    before_dot, after_dot = file_name.rsplit('.', 1)\n\n    # Check if the substring before the dot starts with a letter from the latin alphabet\n    if not re.match(r'^[a-zA-Z]', before_dot):\n        return 'No'\n\n    # Check if the substring after the dot is one of the allowed extensions\n    allowed_extensions = ['txt', 'exe', 'dll']\n    if after_dot.lower() not in allowed_extensions:\n        return 'No'\n\n    return 'Yes'"}
{"task_id": "HumanEval/142", "solution": "def sum_squares(lst):\n    result = 0\n    for i, x in enumerate(lst):\n        if i % 3 == 0:\n            result += x ** 2\n        elif i % 4 == 0 and i % 3!= 0:\n            result += x ** 3\n    return result"}
{"task_id": "HumanEval/143", "solution": "def words_in_sentence(sentence):\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return''.join(result)\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True"}
{"task_id": "HumanEval/144", "solution": "def simplify(x, n):\n    # Convert the fractions to integers\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    # Calculate the product of the fractions\n    product_num = x_num * n_num\n    product_den = x_den * n_den\n\n    # Check if the product is an integer\n    return product_num % product_den == 0"}
{"task_id": "HumanEval/145", "solution": "Python\ndef order_by_points(nums):\n    nums.sort(key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n    return nums"}
{"task_id": "HumanEval/146", "solution": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if abs(num) > 10 and str(num)[0] % 2!= 0 and str(num)[-1] % 2!= 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "solution": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "solution": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n    if idx1 > idx2:\n        idx1, idx2 = idx2, idx1\n    return tuple(planets[idx1+1:idx2])"}
{"task_id": "HumanEval/149", "solution": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    filtered_lst = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list by length and then alphabetically\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    return sorted_lst"}
{"task_id": "HumanEval/150", "solution": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "solution": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x % 2!= 0 and x >= 0)"}
{"task_id": "HumanEval/152", "solution": "def compare(game, guess):\n    return [abs(g - s) if g!= s else 0 for g, s in zip(game, guess)]"}
{"task_id": "HumanEval/153", "solution": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    strongest_strength = float('-inf')\n\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n\n        if strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = strength\n\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "solution": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        if b[i:] in a:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "solution": "def even_odd_count(num):\n    num = abs(num)  # convert to positive integer\n    even_count = 0\n    odd_count = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "solution": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1000:'m',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()"}
{"task_id": "HumanEval/157", "solution": "import math\n\ndef right_angle_triangle(a, b, c):\n    # Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    \n    # Check if the triangle is right-angled\n    if math.sqrt(a**2 + b**2) == c or math.sqrt(a**2 + c**2) == b or math.sqrt(b**2 + c**2) == a:\n        return True\n    \n    return False"}
{"task_id": "HumanEval/158", "solution": "def find_max(words):\n    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_unique_chars:\n            max_unique_chars = len(unique_chars)\n            max_word = word\n        elif len(unique_chars) == max_unique_chars:\n            max_word = min(max_word, word)\n    return max_word"}
{"task_id": "HumanEval/159", "solution": "def eat(number, need, remaining):\n    total_eaten = number + need\n    if total_eaten > remaining:\n        total_eaten = remaining\n    return [total_eaten, remaining - total_eaten]"}
{"task_id": "HumanEval/160", "solution": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result"}
{"task_id": "HumanEval/161", "solution": "def solve(s):\n    result = []\n    for c in s:\n        if c.isalpha():  # check if the character is a letter\n            result.append(c.swapcase())  # reverse its case\n        else:\n            result.append(c)  # keep it as it is\n    return \"\".join(result)  # join the characters back into a string"}
{"task_id": "HumanEval/162", "solution": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "solution": "def generate_integers(a, b):\n    even_digits = []\n    for i in range(a, b+1):\n        for digit in str(i):\n            if int(digit) % 2 == 0:\n                even_digits.append(int(digit))\n    even_digits.sort()\n    return [i for i in even_digits if i >= a and i <= b]"}
