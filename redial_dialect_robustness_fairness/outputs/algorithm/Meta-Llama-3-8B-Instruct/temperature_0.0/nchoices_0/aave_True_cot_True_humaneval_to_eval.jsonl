{"task_id": "HumanEval/0", "solution": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "solution": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    Breaks a string of nested parentheses into separate, balanced groups.\n    \"\"\"\n    paren_string = paren_string.replace(\" \", \"\")  # remove spaces\n    result = []\n    stack = []\n    current_group = \"\"\n\n    for char in paren_string:\n        if char == \"(\":\n            stack.append(char)\n            current_group += char\n        elif char == \")\":\n            if stack:\n                stack.pop()\n                current_group += char\n                if not stack:\n                    result.append(current_group)\n                    current_group = \"\"\n            else:\n                raise ValueError(\"Unbalanced parentheses\")\n\n    if stack:\n        raise ValueError(\"Unbalanced parentheses\")\n\n    return result"}
{"task_id": "HumanEval/2", "solution": "def truncate_number(number: float) -> float:\n    whole_part = int(number)\n    decimal_part = number - whole_part\n    return decimal_part"}
{"task_id": "HumanEval/3", "solution": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "solution": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    # Calculate the mean of the list\n    mean = sum(numbers) / len(numbers)\n    \n    # Calculate the absolute differences between each number and the mean\n    differences = [abs(num - mean) for num in numbers]\n    \n    # Calculate the mean of the absolute differences\n    mad = sum(differences) / len(differences)\n    \n    return mad"}
{"task_id": "HumanEval/5", "solution": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    if not numbers:\n        return numbers\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result.extend([delimiter, num])\n    return result"}
{"task_id": "HumanEval/6", "solution": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result"}
{"task_id": "HumanEval/7", "solution": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    This function takes a list of integers as input and returns a tuple containing the sum and product of all numbers in the list.\n    If the list is empty, the sum is 0 and the product is 1.\n    \"\"\"\n    if not numbers:  # Check if the list is empty\n        return 0, 1  # Return (0, 1) if the list is empty\n\n    total_sum = sum(numbers)  # Calculate the sum of all numbers in the list\n    total_product = 1  # Initialize the product as 1\n    for num in numbers:  # Iterate over each number in the list\n        total_product *= num  # Multiply the product by the current number\n\n    return total_sum, total_product  # Return the sum and product as a tuple"}
{"task_id": "HumanEval/9", "solution": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    max_seen = float('-inf')\n    for num in numbers:\n        if num > max_seen:\n            max_seen = num\n        result.append(max_seen)\n    return result"}
{"task_id": "HumanEval/10", "solution": "def make_palindrome(s: str) -> str:\n    \\\"\\\"\\\" This function takes a string and returns the shortest palindrome that starts with it \\\"\\\"\\\"\n    if s == \"\":\n        return s\n    for i in range(len(s), -1, -1):\n        if s[:i] == s[:i][::-1]:\n            return s[:i][::-1] + s[i:]\n    return \"\""}
{"task_id": "HumanEval/11", "solution": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for i in range(max(len(a), len(b))):\n        bit_a = a[-1 - i] if i < len(a) else '0'\n        bit_b = b[-1 - i] if i < len(b) else '0'\n        result = bin(int(bit_a, 2) ^ int(bit_b, 2))[2:] + result\n    return result"}
{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return min(strings, key=len)"}
{"task_id": "HumanEval/13", "solution": "def greatest_common_divisor(a: int, b: int) -> int:\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n\n    return gcd(a, b)"}
{"task_id": "HumanEval/14", "solution": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    result = []\n    for i in range(1, len(string) + 1):\n        result.append(string[:i])\n    return result"}
{"task_id": "HumanEval/15", "solution": "def string_sequence(n: int) -> str:\n    return''.join(map(str, range(n + 1)))"}
{"task_id": "HumanEval/16", "solution": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "solution": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/18", "solution": "def how_many_times(string: str, substring: str) -> int:\n    return string.count(substring)"}
{"task_id": "HumanEval/19", "solution": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,'six': 6,'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return''.join(num_list)"}
{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two numbers\")\n    \n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n    \n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    \n    return closest_pair"}
{"task_id": "HumanEval/21", "solution": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two numbers\")\n\n    min_val = min(numbers)\n    max_val = max(numbers)\n\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "HumanEval/22", "solution": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "solution": "def strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "solution": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/25", "solution": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "solution": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "solution": "def flip_case(string: str) -> str:\n    return string.swapcase()"}
{"task_id": "HumanEval/28", "solution": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "solution": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "solution": "def get_positive(l: list) -> list:\n    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/32", "solution": "Python\nimport math\n\ndef find_zero(xs: list):\n    \"\"\"\n    This function finds the root of a polynomial with coefficients xs.\n    It assumes that xs has an even number of coefficients and the largest non-zero coefficient.\n    It returns the root of the polynomial.\n    \"\"\"\n    def poly(xs: list, x: float):\n        \"\"\"\n        Evaluates the polynomial with coefficients xs at point x.\n        \"\"\"\n        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n    # Check if xs has an even number of coefficients\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have an even number of coefficients\")\n\n    # Check if the largest non-zero coefficient is not zero\n    if max([abs(coeff) for coeff in xs]) == 0:\n        raise ValueError(\"xs must have the largest non-zero coefficient\")\n\n    # Find the root of the polynomial using the Newton-Raphson method\n    x0 = 1.0  # initial guess\n    for _ in range(100):  # maximum 100 iterations\n        x1 = x0 - poly(xs, x0) / poly([i * coeff for i, coeff in enumerate(xs)], x0)\n        if abs(x1 - x0) < 1e-6:  # convergence criterion\n            return round(x1, 2)\n        x0 = x1\n\n    # If the root is not found, return None\n    return None"}
{"task_id": "HumanEval/33", "solution": "def sort_third(l: list) -> list:\n    return [x if i % 3!= 0 else sorted([x])[0] for i, x in enumerate(l)]"}
{"task_id": "HumanEval/34", "solution": "def unique(l: list):\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "solution": "def max_element(l: list) -> int:\n    return max(l)"}
{"task_id": "HumanEval/36", "solution": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "solution": "def sort_even(l: list) -> list:\n    return [x if i % 2 == 0 else sorted([y for y in l if i % 2 == 0])[j] \n            for i, x in enumerate(l) for j in range(len(l)) if i % 2 == 0]"}
{"task_id": "HumanEval/38", "solution": "Python\ndef decode_cyclic(s: str):\n    \"\"\"\n    Decodes the input string encoded with encode_cyclic function.\n    \"\"\"\n    # Initialize an empty string to store the decoded string\n    decoded_string = \"\"\n    \n    # Initialize an empty list to store the decoded groups\n    decoded_groups = []\n    \n    # Loop through the input string in steps of 3\n    for i in range(0, len(s), 3):\n        # Get the current group of 3 characters\n        group = s[i:i+3]\n        \n        # If the group has 3 characters, cycle them\n        if len(group) == 3:\n            decoded_groups.append(group[1:] + group[0])\n        # If the group has fewer than 3 characters, just add it as is\n        else:\n            decoded_groups.append(group)\n    \n    # Join the decoded groups into a single string\n    decoded_string = \"\".join(decoded_groups)\n    \n    # Return the decoded string\n    return decoded_string"}
{"task_id": "HumanEval/39", "solution": "def prime_fib(n: int) -> int:\n    def is_prime(num: int) -> bool:\n        if num <= 1:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n: int) -> int:\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n\n    for i in range(1, n + 1):\n        fib_num = fibonacci(i)\n        if is_prime(fib_num):\n            return fib_num"}
{"task_id": "HumanEval/40", "solution": "def triples_sum_to_zero(l: list) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[j] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "solution": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    This function calculates the number of collisions between two sets of n cars moving in opposite directions.\n    \n    Parameters:\n    n (int): The number of cars in each set.\n    \n    Returns:\n    int: The number of collisions.\n    \"\"\"\n    # Initialize the number of collisions to 0\n    collisions = 0\n    \n    # Calculate the number of collisions using the formula: n * (n - 1) / 2\n    collisions = n * (n - 1) // 2\n    \n    # Return the number of collisions\n    return collisions"}
{"task_id": "HumanEval/42", "solution": "def incr_list(l: list) -> list:\n    return [i + 1 for i in l]"}
{"task_id": "HumanEval/43", "solution": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "solution": "def change_base(x: int, base: int) -> str:\n    convert_string = \"0123456789ABCDEF\"\n    if x < base:\n        return convert_string[x]\n    else:\n        return change_base(x // base, base) + convert_string[x % base]"}
{"task_id": "HumanEval/45", "solution": "def triangle_area(a, h):\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "solution": "Python\ndef fib4(n: int):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        fib4_sequence = [0, 0, 2, 0]\n        for i in range(4, n+1):\n            fib4_sequence.append(fib4_sequence[i-1] + fib4_sequence[i-2] + fib4_sequence[i-3] + fib4_sequence[i-4])\n        return fib4_sequence[n]"}
{"task_id": "HumanEval/47", "solution": "def median(l: list) -> float:\n    return sum(l) / len(l)"}
{"task_id": "HumanEval/48", "solution": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "solution": "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "solution": "Python\ndef decode_shift(s: str):\n    \\\"\\\"\\\"\n    This function decodes the string by shifting every character back by 5 in the alphabet.\n    \\\"\\\"\\\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) if ch.isalpha() else ch for ch in s])"}
{"task_id": "HumanEval/51", "solution": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/52", "solution": "def below_threshold(l: list, t: int) -> bool:\n    return all(i < t for i in l)"}
{"task_id": "HumanEval/53", "solution": "def add(x: int, y: int) -> int:\n    return x + y"}
{"task_id": "HumanEval/54", "solution": "def same_chars(s0: str, s1: str) -> bool:\n    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "solution": "def fib(n: int) -> int:\n    if n <= 0:\n        return \"Input should be a positive integer.\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/56", "solution": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(\"<\")\n        elif bracket == \">\":\n            if not stack or stack.pop()!= \"<\":\n                return False\n    return not stack"}
{"task_id": "HumanEval/57", "solution": "def monotonic(l: list) -> bool:\n    if len(l) < 2:\n        return True\n    if l[0] > l[1]:\n        return False\n    for i in range(1, len(l) - 1):\n        if l[i] > l[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/58", "solution": "def common(l1: list, l2: list) -> list:\n    # Convert the lists to sets to remove duplicates and improve lookup efficiency\n    set1 = set(l1)\n    set2 = set(l2)\n\n    # Find the intersection of the two sets, which are the common elements\n    common_elements = set1 & set2\n\n    # Find the union of the two sets, which are all the elements\n    all_elements = set1 | set2\n\n    # Find the unique elements that are in one set but not the other\n    unique_elements = (set1 - common_elements) | (set2 - common_elements)\n\n    # Convert the set of unique elements back to a list and sort it\n    result = sorted(list(unique_elements))\n\n    return result"}
{"task_id": "HumanEval/59", "solution": "def largest_prime_factor(n: int) -> int:\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    for i in range(n - 1, 1, -1):\n        if n % i == 0 and is_prime(i):\n            return i\n    return 2"}
{"task_id": "HumanEval/60", "solution": "def sum_to_n(n: int) -> int:\n    return sum(range(1, n + 1))"}
{"task_id": "HumanEval/61", "solution": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/62", "solution": "def derivative(xs: list):\n    result = [0] * (len(xs) + 1)\n    result[-1] = xs[-1]\n    for i in range(len(xs) - 2, -1, -1):\n        result[i] = xs[i] + result[i + 1]\n    return result"}
{"task_id": "HumanEval/63", "solution": "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(2, n):\n            a, b, c = b, c, a + b + c\n        return c"}
{"task_id": "HumanEval/64", "solution": "def vowels_count(s):\n    vowels = 'aeiou'\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n        elif char.lower() == 'y' and s.endswith(char):\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "solution": "def circular_shift(x, shift):\n    shift = shift % len(str(x))\n    return str(int(str(x)[shift:])) + str(int(str(x)[:-shift]))"}
{"task_id": "HumanEval/66", "solution": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())"}
{"task_id": "HumanEval/67", "solution": "def fruit_distribution(s, n):\n    # Split the string into a list of words\n    words = s.split()\n    \n    # Initialize the count of apples and oranges\n    apples = 0\n    oranges = 0\n    \n    # Iterate through the list of words to find the numbers of apples and oranges\n    for word in words:\n        if word.isdigit():\n            # If the word is a number, it's either the number of apples or oranges\n            if apples == 0:\n                apples = int(word)\n            else:\n                oranges = int(word)\n    \n    # Calculate the number of mangoes left\n    mangoes = n - apples - oranges\n    \n    # Return the number of mangoes\n    return mangoes"}
{"task_id": "HumanEval/68", "solution": "def pluck(arr):\n    if not arr:\n        return []\n\n    min_even = float('inf')\n    min_even_index = -1\n\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < min_even:\n            min_even = num\n            min_even_index = i\n\n    return [min_even_index, 1]"}
{"task_id": "HumanEval/69", "solution": "def search(lst):\n    max_num = max(lst)\n    for num in set(lst):\n        if lst.count(num) >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "solution": "def strange_sort_list(lst):\n    if not lst:\n        return []\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result"}
{"task_id": "HumanEval/71", "solution": "import math\n\ndef triangle_area(a, b, c):\n    # Check if the sides can form a triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        # Round the area to 2 decimal points\n        return round(area, 2)\n    else:\n        # If the sides don't form a triangle, return -1\n        return -1"}
{"task_id": "HumanEval/72", "solution": "def will_it_fly(q, w):\n    # Check if q is balanced (palindrome)\n    if str(q)!= str(q)[::-1]:\n        return False\n    \n    # Check if the sum of q's elements is less than or equal to w\n    if sum(q) > w:\n        return False\n    \n    # If both conditions are met, q can fly\n    return True"}
{"task_id": "HumanEval/73", "solution": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    changes = 0\n\n    while left < right:\n        if arr[left]!= arr[right]:\n            # If the elements at the left and right are not equal,\n            # we need to change at least one of them to make it palindromic\n            changes += 1\n            # We can change either the left or the right element,\n            # so we'll choose the one that's different from the middle\n            if arr[left + 1:right].count(arr[left]) > arr[left + 1:right].count(arr[right]):\n                right -= 1\n            else:\n                left += 1\n        else:\n            # If the elements at the left and right are equal,\n            # we can move both pointers towards the center\n            left += 1\n            right -= 1\n\n    return changes"}
{"task_id": "HumanEval/74", "solution": "def total_match(lst1, lst2):\n    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    \n    if total_chars1 <= total_chars2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "solution": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a + 1):\n        if a % i == 0:\n            factors.append(i)\n            while a % i == 0:\n                a //= i\n\n    if len(factors)!= 3:\n        return False\n\n    for factor in factors:\n        if not is_prime(factor):\n            return False\n\n    return True"}
{"task_id": "HumanEval/76", "solution": "def is_simple_power(x, n):\n    import math\n    return math.isclose(n ** int(math.log(x, n)), x)"}
{"task_id": "HumanEval/77", "solution": "def iscube(a):\n    import math\n    c = round(a ** (1. / 3.))\n    return c ** 3 == a"}
{"task_id": "HumanEval/78", "solution": "def hex_key(num):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        max_divisor = int(n**0.5) + 1\n        for d in range(3, max_divisor, 2):\n            if n % d == 0:\n                return False\n        return True\n\n    prime_count = 0\n    for char in num:\n        if char in '237BD':\n            if is_prime(int(char, 16)):\n                prime_count += 1\n    return prime_count"}
{"task_id": "HumanEval/79", "solution": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]  # Convert decimal to binary and remove '0b' prefix\n    return 'db' + binary + 'db'"}
{"task_id": "HumanEval/80", "solution": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) == 3:\n            return True\n    return False"}
{"task_id": "HumanEval/81", "solution": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "solution": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))"}
{"task_id": "HumanEval/83", "solution": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "solution": "def solve(N):\n    # Convert N to binary and remove the '0b' prefix\n    binary_N = bin(N)[2:]\n    \n    # Calculate the sum of the digits in binary_N\n    sum_of_digits = sum(int(digit) for digit in binary_N)\n    \n    # Convert the sum to binary and remove the '0b' prefix\n    binary_sum = bin(sum_of_digits)[2:]\n    \n    return binary_sum"}
{"task_id": "HumanEval/85", "solution": "def add(lst):\n    return [num for i, num in enumerate(lst) if i % 2!= 0 and num % 2 == 0]"}
{"task_id": "HumanEval/86", "solution": "import random\n\ndef anti_shuffle(s):\n    words = s.split()\n    shuffled_words = []\n    for word in words:\n        letters = list(word)\n        random.shuffle(letters)\n        shuffled_words.append(''.join(letters))\n    return''.join(shuffled_words)"}
{"task_id": "HumanEval/87", "solution": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    return result"}
{"task_id": "HumanEval/88", "solution": "def sort_array(array):\n    if len(array) == 0:\n        return array\n    if len(array) == 1:\n        return array\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array)\n    else:\n        return sorted(array)[::-1]"}
{"task_id": "HumanEval/89", "solution": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 97 if char.islower() else 65\n            result += chr((ord(char) - ascii_offset + 4) % 26 + ascii_offset)\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "solution": "def next_smallest(lst):\n    if not lst:\n        return None\n    unique_lst = list(set(lst))\n    unique_lst.sort()\n    if len(unique_lst) < 2:\n        return None\n    return unique_lst[1]"}
{"task_id": "HumanEval/91", "solution": "def is_bored(S):\n    sentences = S.split('. ')\n    sentences += S.split('? ') if '?' in S else []\n    sentences += S.split('! ') if '!' in S else []\n    return sum(1 for sentence in sentences if sentence.strip().startswith('I'))"}
{"task_id": "HumanEval/92", "solution": "def any_int(x, y, z):\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return (x == y + z) or (x == z + y) or (y == x + z) or (y == z + x) or (z == x + y) or (z == y + x)"}
{"task_id": "HumanEval/93", "solution": "def encode(message):\n    # Switch up the case of all letters\n    message = message.swapcase()\n    \n    # Replace all vowels with the letters 2 places ahead of them in the alphabet\n    vowels = 'aeiouAEIOU'\n    for vowel in vowels:\n        message = message.replace(vowel, chr(ord(vowel) + 2))\n    \n    return message"}
{"task_id": "HumanEval/94", "solution": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if isinstance(num, int) and is_prime(num) and num > max_prime:\n            max_prime = num\n\n    if max_prime == 0:\n        return 0\n    else:\n        return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "HumanEval/95", "solution": "def check_dict_case(d):\n    if not all(isinstance(k, str) for k in d):\n        return False\n    if all(k.islower() for k in d):\n        return True\n    if all(k.isupper() for k in d):\n        return True\n    return False"}
{"task_id": "HumanEval/96", "solution": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(n) if is_prime(i)]\n    return primes"}
{"task_id": "HumanEval/97", "solution": "def multiply(a, b):\n    return int(str(a)[-1]) * int(str(b)[-1])"}
{"task_id": "HumanEval/98", "solution": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in 'AEIOU':\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "solution": "import math\n\ndef closest_integer(value):\n    num = float(value)\n    return round(num + 0.5) if num >= 0 else round(num - 0.5)"}
{"task_id": "HumanEval/100", "solution": "def make_a_pile(n):\n    result = [n]\n    i = 1\n    while n > 0:\n        if n % 2 == 1:\n            result.append(result[-1] + 2*i + 1)\n        else:\n            result.append(result[-1] + 2*i)\n        i += 1\n        n -= 1\n    return result"}
{"task_id": "HumanEval/101", "solution": "def words_string(s):\n    return s.split(\", | \")"}
{"task_id": "HumanEval/102", "solution": "def choose_num(x, y):\n    even_numbers = [i for i in range(x, y+1) if i % 2 == 0]\n    if even_numbers:\n        return max(even_numbers)\n    else:\n        return -1"}
{"task_id": "HumanEval/103", "solution": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = sum(range(n, m+1))\n    avg = -(-total // (m - n + 1))  # round up to the nearest integer\n    return bin(avg)[2:]  # convert to binary and remove '0b' prefix"}
{"task_id": "HumanEval/104", "solution": "def unique_digits(x):\n    def has_even_digit(n):\n        return any(int(digit) % 2 == 0 for digit in str(n))\n\n    return sorted([num for num in x if not has_even_digit(num)])"}
{"task_id": "HumanEval/105", "solution": "def by_length(arr):\n    # Filter out numbers between 1 and 9 (inclusive)\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    \n    # Sort the filtered array\n    filtered_arr.sort()\n    \n    # Reverse the sorted array\n    reversed_arr = filtered_arr[::-1]\n    \n    # Replace each digit with its name\n    digit_names = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    result = [digit_names[x] for x in reversed_arr]\n    \n    return result"}
{"task_id": "HumanEval/106", "solution": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/107", "solution": "def even_odd_palindrome(n):\n    even_palindromes = 0\n    odd_palindromes = 0\n    \n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_palindromes += 1\n            else:\n                odd_palindromes += 1\n    \n    return even_palindromes, odd_palindromes"}
{"task_id": "HumanEval/108", "solution": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num < 0:\n            num = str(num)[1:]\n        else:\n            num = str(num)\n        if sum(int(digit) for digit in num) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "solution": "def move_one_ball(arr):\n    if not arr:\n        return True\n\n    n = len(arr)\n    target = sorted(arr)\n\n    shifts = 0\n    for i in range(n):\n        if arr == target:\n            return True\n        arr = arr[-1:] + arr[:-1]\n        shifts += 1\n\n    return False"}
{"task_id": "HumanEval/110", "solution": "def exchange(lst1, lst2):\n    even_count = sum(1 for num in lst1 if num % 2 == 0)\n    even_in_lst2 = sum(1 for num in lst2 if num % 2 == 0)\n    \n    if even_count > even_in_lst2:\n        return \"NO\"\n    \n    lst1.sort()\n    lst2.sort()\n    \n    i, j = 0, 0\n    while i < len(lst1):\n        if j < len(lst2) and lst1[i] % 2!= 0 and lst2[j] % 2 == 0:\n            lst1[i], lst2[j] = lst2[j], lst1[i]\n            i += 1\n            j += 1\n        elif j < len(lst2) and lst1[i] % 2 == 0:\n            i += 1\n        else:\n            j += 1\n    \n    return \"YES\" if all(num % 2 == 0 for num in lst1) else \"NO\""}
{"task_id": "HumanEval/111", "solution": "def histogram(test):\n    if not test:\n        return {}\n    letter_count = {}\n    for letter in test.split():\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n    max_count = max(letter_count.values())\n    max_letters = [letter for letter, count in letter_count.items() if count == max_count]\n    return {letter: count for letter, count in letter_count.items() if letter in max_letters}"}
{"task_id": "HumanEval/112", "solution": "def reverse_delete(s, c):\n    # Remove all characters in s that match any character in c\n    s = ''.join([char for char in s if char not in c])\n    \n    # Check if the resulting string is a palindrome\n    return (s, s == s[::-1])"}
{"task_id": "HumanEval/113", "solution": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for c in s if int(c) % 2!= 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{len(s)}ng {len(s)} of the {len(s)}nput.\")\n    return result"}
{"task_id": "HumanEval/114", "solution": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n    return min(min_sum, min(nums))"}
{"task_id": "HumanEval/115", "solution": "import math\n\ndef max_fill(grid, capacity):\n    # Count the total units of water in the grid\n    total_water = sum(sum(row) for row in grid)\n    \n    # Calculate the number of trips needed\n    trips = math.ceil(total_water / capacity)\n    \n    return trips"}
{"task_id": "HumanEval/116", "solution": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "solution": "def select_words(s, n):\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = 0\n        for char in word:\n            if char.isalpha() and char.lower() not in 'aeiou':\n                consonants += 1\n        if consonants == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "solution": "def get_closest_vowel(word):\n    vowels = 'aeiou'\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] in vowels:\n            if word[i-1].lower() not in vowels and word[i+1].lower() not in vowels:\n                return word[i]\n    return ''"}
{"task_id": "HumanEval/119", "solution": "def match_parens(lst):\n    stack = []\n    for char in lst[0] + lst[1]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return 'No'\n            stack.pop()\n    if len(stack) == 0:\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/120", "solution": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]"}
{"task_id": "HumanEval/121", "solution": "def solution(lst):\n    return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2!= 0)"}
{"task_id": "HumanEval/122", "solution": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if len(str(abs(num))) <= 2)"}
{"task_id": "HumanEval/123", "solution": "def get_odd_collatz(n):\n    sequence = [n]\n    while n!= 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3*n + 1\n        sequence.append(n)\n    return sorted([x for x in sequence if x % 2!= 0])"}
{"task_id": "HumanEval/124", "solution": "def valid_date(date):\n    # Check if the date string is empty\n    if not date:\n        return False\n\n    # Split the date string into month, day, and year\n    month, day, year = date.split('-')\n\n    # Check if the month is valid (1-12)\n    if not 1 <= int(month) <= 12:\n        return False\n\n    # Check if the day is valid for the given month\n    if int(month) in [1, 3, 5, 7, 8, 10, 12]:\n        if not 1 <= int(day) <= 31:\n            return False\n    elif int(month) in [4, 6, 9, 11]:\n        if not 1 <= int(day) <= 30:\n            return False\n    elif int(month) == 2:\n        if not 1 <= int(day) <= 29:\n            return False\n\n    # Check if the date format is correct (mm-dd-yyyy)\n    if len(month)!= 2 or len(day)!= 2 or len(year)!= 4:\n        return False\n\n    # If all checks pass, the date is valid\n    return True"}
{"task_id": "HumanEval/125", "solution": "def split_words(txt):\n    words = txt.split()\n    if ',' in words[0]:\n        words = [word.split(',') for word in words]\n        words = [item for sublist in words for item in sublist]\n    odd_letters = [char for char in txt if ord(char.lower()) % 2!= 0]\n    return words if words else len(odd_letters)"}
{"task_id": "HumanEval/126", "solution": "def is_sorted(lst):\n    if len(lst) == 0:\n        return True\n    if len(lst) > len(set(lst)):\n        return False\n    for i in range(len(lst) - 1):\n        if lst[i] >= lst[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "solution": "def intersection(interval1, interval2):\n    # Check if the intervals intersect\n    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n\n    # Calculate the length of the intersection\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    length = end - start + 1\n\n    # Check if the length is a prime number\n    if length <= 1:\n        return \"NO\"\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/128", "solution": "def prod_signs(arr):\n    if not arr:\n        return None\n    magnitude_sum = sum(abs(x) for x in arr)\n    sign_product = 1\n    for x in arr:\n        sign_product *= (-1 if x < 0 else 1 if x > 0 else 0)\n    return magnitude_sum * sign_product"}
{"task_id": "HumanEval/129", "solution": "Python\ndef minPath(grid, k):\n    N = len(grid)\n    values = [i * N + j + 1 for i in range(N) for j in range(N)]\n    min_path = []\n    min_path_value = float('inf')\n\n    for i in range(N):\n        for j in range(N):\n            visited = [[False] * N for _ in range(N)]\n            path = []\n            dfs(grid, i, j, k, values, visited, path, min_path_value)\n            if len(path) == k and path_value(path) < min_path_value:\n                min_path = path\n                min_path_value = path_value(path)\n\n    return min_path\n\n\ndef dfs(grid, i, j, k, values, visited, path, min_path_value):\n    N = len(grid)\n    if k == 0:\n        if path_value(path) < min_path_value:\n            min_path_value = path_value(path)\n            min_path = path[:]\n        return\n\n    for x, y in [(i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)]:\n        if 0 <= x < N and 0 <= y < N and not visited[x][y]:\n            visited[x][y] = True\n            path.append(values[x * N + y])\n            dfs(grid, x, y, k - 1, values, visited, path, min_path_value)\n            visited[x][y] = False\n            path.pop()\n\n\ndef path_value(path):\n    return tuple(path)"}
{"task_id": "HumanEval/130", "solution": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        tribonacci_sequence = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tribonacci_sequence.append(1 + i / 2)\n            else:\n                tribonacci_sequence.append(tribonacci_sequence[i - 1] + tribonacci_sequence[i - 2] + tribonacci_sequence[i - 3])\n        return tribonacci_sequence"}
{"task_id": "HumanEval/131", "solution": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2!= 0:\n            product *= int(digit)\n    return product"}
{"task_id": "HumanEval/132", "solution": "def is_nested(s):\n    stack = []\n    for char in s:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) > 0"}
{"task_id": "HumanEval/133", "solution": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(i)**2 for i in lst)"}
{"task_id": "HumanEval/134", "solution": "def check_if_last_char_is_a_letter(txt):\n    if not txt:  # Check if the string is empty\n        return False\n    if txt[-1].isalpha():  # Check if the last character is a letter\n        if txt.rstrip().endswith(txt[-1]):  # Check if the last character is part of a word\n            return False\n        else:\n            return True\n    else:\n        return False"}
{"task_id": "HumanEval/135", "solution": "def can_arrange(arr):\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return i-1\n    return -1"}
{"task_id": "HumanEval/136", "solution": "def largest_smallest_integers(lst):\n    negative = [x for x in lst if x < 0]\n    positive = [x for x in lst if x > 0]\n    \n    if not negative and not positive:\n        return None, None\n    elif not negative:\n        return None, min(positive) if positive else None\n    elif not positive:\n        return max(negative), None\n    else:\n        return max(negative), min(positive)"}
{"task_id": "HumanEval/137", "solution": "def compare_one(a, b):\n    if isinstance(a, str) and isinstance(b, str):\n        a = a.replace(\",\", \"\").replace(\".\", \"\")\n        b = b.replace(\",\", \"\").replace(\".\", \"\")\n        if a == b:\n            return None\n        elif float(a) < float(b):\n            return b\n        else:\n            return a\n    elif isinstance(a, str):\n        a = float(a.replace(\",\", \"\").replace(\".\", \"\"))\n    elif isinstance(b, str):\n        b = float(b.replace(\",\", \"\").replace(\".\", \"\"))\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None"}
{"task_id": "HumanEval/138", "solution": "Python\ndef is_equal_to_sum_even(n):\n    for a in range(2, n+1, 2):\n        for b in range(2, n+1, 2):\n            for c in range(2, n+1, 2):\n                for d in range(2, n+1, 2):\n                    if a + b + c + d == n:\n                        return True\n    return False"}
{"task_id": "HumanEval/139", "solution": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        result *= math.factorial(i)\n    return result"}
{"task_id": "HumanEval/140", "solution": "def fix_spaces(text):\n    text = text.replace(\" \", \"_\")\n    while \"  \" in text:\n        text = text.replace(\"  \", \"-\")\n    return text"}
{"task_id": "HumanEval/141", "solution": "def file_name_check(file_name):\n    # Check if the file name has more than three digits\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n\n    # Check if the file name has exactly one dot\n    if file_name.count('.')!= 1:\n        return 'No'\n\n    # Check if the substring before the dot starts with a Latin alphabet letter\n    if not file_name.split('.')[0][0].isalpha():\n        return 'No'\n\n    # Check if the substring after the dot is one of the allowed extensions\n    if file_name.split('.')[1].lower() not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    return 'Yes'"}
{"task_id": "HumanEval/142", "solution": "def sum_squares(lst):\n    total = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0 and i % 4!= 0:\n            total += num ** 2\n        elif i % 4 == 0 and i % 3!= 0:\n            total += num ** 3\n    return total"}
{"task_id": "HumanEval/143", "solution": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += 2\n        return True\n\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return''.join(result)"}
{"task_id": "HumanEval/144", "solution": "def simplify(x, n):\n    # Split the fractions into numerator and denominator\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    # Calculate the product of the fractions\n    product_num = x_num * n_num\n    product_den = x_den * n_den\n\n    # Check if the product is a whole number\n    if product_den % product_num == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "solution": "def order_by_points(nums):\n    nums.sort(key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))\n    return nums"}
{"task_id": "HumanEval/146", "solution": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in '13579' and str(num)[-1] in '13579':\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "solution": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            for k in range(j + 1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "solution": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    if index1 > index2:\n        index1, index2 = index2, index1\n    return tuple(planets[index1+1:index2])"}
{"task_id": "HumanEval/149", "solution": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    lst = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort the list by length and then alphabetically\n    lst.sort(key=lambda x: (len(x), x))\n    \n    return lst"}
{"task_id": "HumanEval/150", "solution": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "solution": "def double_the_difference(lst):\n    return sum(i ** 2 for i in lst if isinstance(i, int) and i % 2!= 0 and i >= 0)"}
{"task_id": "HumanEval/152", "solution": "def compare(game, guess):\n    return [abs(score - guess_i) for score_i, guess_i in zip(game, guess)]"}
{"task_id": "HumanEval/153", "solution": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        return sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n\n    strongest_extension = max(extensions, key=calculate_strength)\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "solution": "def cycpattern_check(a, b):\n    b = b + b  # create all rotations of b\n    for i in range(len(b)):\n        if b[i:] in a:  # check if any rotation of b is a substring of a\n            return True\n    return False"}
{"task_id": "HumanEval/155", "solution": "def even_odd_count(num):\n    num = str(abs(num))  # Convert the number to a string and take the absolute value\n    even_count = 0\n    odd_count = 0\n\n    for digit in num:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "solution": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000:'m'\n    }\n    result = ''\n    for value in sorted(roman_numerals.keys(), reverse=True):\n        while number >= value:\n            number -= value\n            result += roman_numerals[value]\n    return result.lower()"}
{"task_id": "HumanEval/157", "solution": "import math\n\ndef right_angle_triangle(a, b, c):\n    # Calculate the lengths of the sides\n    side_a = a\n    side_b = b\n    side_c = c\n\n    # Check if the sides can form a right-angled triangle\n    if side_a**2 + side_b**2 == side_c**2 or side_a**2 + side_c**2 == side_b**2 or side_b**2 + side_c**2 == side_a**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "solution": "def find_max(words):\n    if not words:\n        return \"\"\n\n    max_unique_chars = 0\n    result = \"\"\n\n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_unique_chars:\n            max_unique_chars = len(unique_chars)\n            result = word\n        elif len(unique_chars) == max_unique_chars:\n            result = min(result, word)\n\n    return result"}
{"task_id": "HumanEval/159", "solution": "def eat(number, need, remaining):\n    total_eaten = number + remaining\n    if total_eaten >= need:\n        return [total_eaten, need - number]\n    else:\n        return [total_eaten, 0]"}
{"task_id": "HumanEval/160", "solution": "def do_algebra(operator, operand):\n    # Check if the lengths of the lists are correct\n    if len(operator)!= len(operand) - 1:\n        raise ValueError(\"Operator list must be one less than operand list\")\n\n    # Initialize the result with the first operand\n    result = operand[0]\n\n    # Iterate over the operators and operands\n    for i in range(len(operator)):\n        # Get the current operator and operand\n        op = operator[i]\n        operand_val = operand[i + 1]\n\n        # Perform the operation based on the operator\n        if op == '+':\n            result += operand_val\n        elif op == '-':\n            result -= operand_val\n        elif op == '*':\n            result *= operand_val\n        elif op == '//':\n            result //= operand_val\n        elif op == '**':\n            result **= operand_val\n        else:\n            raise ValueError(\"Invalid operator\")\n\n    return result"}
{"task_id": "HumanEval/161", "solution": "def solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():  # Check if the character is a letter\n            result += char.swapcase()  # Reverse the case of the letter\n        else:\n            result += char  # If it's not a letter, just add it as is\n    return result[::-1]  # Reverse the entire string if it doesn't contain letters"}
{"task_id": "HumanEval/162", "solution": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "solution": "def generate_integers(a, b):\n    result = []\n    for i in range(min(a, b), max(a, b) + 1):\n        if str(i).isdigit() and int(str(i)) % 2 == 0:\n            result.append(int(str(i)))\n    return sorted(result)"}
