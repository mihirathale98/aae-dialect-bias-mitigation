{"task_id": "Mbpp/725", "solution": "def extract_quotation(s):\n    return [x.strip('\"') for x in s.split('\"') if x.strip('\"')]"}
{"task_id": "Mbpp/130", "solution": "Python\ndef max_occurrences(lst):\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    max_frequency = max(frequency.values())\n    max_items = [item for item, freq in frequency.items() if freq == max_frequency]\n    return max(max_items)"}
{"task_id": "Mbpp/305", "solution": "def start_withp(word_list):\n    result = []\n    for word in word_list:\n        words = word.split()\n        for w in words:\n            if w.startswith('p'):\n                result.append(w)\n                if len(result) == 2:\n                    return tuple(result)\n    return ()"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lists):\n    frequency = {}\n    for lst in lists:\n        for elem in lst:\n            if elem in frequency:\n                frequency[elem] += 1\n            else:\n                frequency[elem] = 1\n    return frequency"}
{"task_id": "Mbpp/84", "solution": "Python\ndef sequence(n):\n    if n == 1:\n        return 1\n    a, s = 1, 1\n    for _ in range(2, n):\n        a, s = s, s + sum(1 for i in range(1, s + 1) if s % i == 0)\n    return s"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    return sum(set(lst) - set([x for x in lst if lst.count(x) > 1]))"}
{"task_id": "Mbpp/392", "solution": "Python\ndef get_max_sum(n):\n    memo = {1: 1}\n    def f(k):\n        if k in memo:\n            return memo[k]\n        if k < 2:\n            memo[k] = k\n            return k\n        res = max(f(k//2) + f(k//3) + f(k//4) + f(k//5), k)\n        memo[k] = res\n        return res\n    return f(n)"}
{"task_id": "Mbpp/565", "solution": "def split(s):\n    return list(s)"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, size):\n    merged_list = sorted(list1 + list2)\n    median = merged_list[size // 2] if size % 2!= 0 else (merged_list[size // 2 - 1] + merged_list[size // 2]) / 2\n    return median"}
{"task_id": "Mbpp/98", "solution": "import math\n\ndef multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    return any(x in seq2 for x in seq1)"}
{"task_id": "Mbpp/471", "solution": "Python\ndef find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    return a + b"}
{"task_id": "Mbpp/731", "solution": "Python\nimport math\n\ndef lateralsurface_cone(r, h):\n    l = math.sqrt(h**2 + r**2)\n    lateral_surface_area = math.pi * r * (l + r)\n    return lateral_surface_area"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(lst):\n    return sorted(map(int, lst))"}
{"task_id": "Mbpp/233", "solution": "Python\nimport math\n\ndef lateralsuface_cylinder(r, h):\n    return 2 * math.pi * r * h"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(t1, t2):\n    return tuple(x % y for x, y in zip(t1, t2))"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(s):\n    return s.replace(\" \", \"\")"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(d):\n    return sorted(d.items(), key=lambda x: x[1])"}
{"task_id": "Mbpp/597", "solution": "Python\ndef find_kth(arr1, arr2, k):\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if k == 1:\n            return min(arr1[i], arr2[j])\n        if arr1[i] < arr2[j]:\n            k -= 1\n            i += 1\n        else:\n            k -= 1\n            j += 1\n    if k > 0:\n        return arr1[i-1] if i > 0 else arr2[j-1]\n    return arr1[i] if i < len(arr1) else arr2[j]"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(t1, t2):\n    return all(x >= y for x, y in zip(t1, t2))"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(s):\n    return tuple(s)"}
{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    return [x for x in lst if x!= 0] + [x for x in lst if x == 0]"}
{"task_id": "Mbpp/260", "solution": "Python\ndef newman_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    num = 1\n    while True:\n        num += 2\n        if is_prime(num):\n            if count == n - 1:\n                return num\n            count += 1"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    return sum(i**2 for i in range(2, 2*n+1, 2))"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(lst, start, end):\n    return sum(lst[start:end+1])"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(s):\n    return s.count('std')"}
{"task_id": "Mbpp/171", "solution": "Python\ndef perimeter_pentagon(side_length):\n    return 5 * side_length"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    digits.sort(reverse=True)\n    return int(''.join(map(str, digits)))"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(lst):\n    return len(set(lst)) == 1"}
{"task_id": "Mbpp/567", "solution": "Python\ndef issort_list(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))"}
{"task_id": "Mbpp/80", "solution": "Python\ndef tetrahedral_number(n):\n    return n*(n+1)*(n+2)//6"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(n):\n    str_n = str(n)\n    for i in range(1, len(str_n)):\n        if str_n[i]!= str_n[i-1]:\n            return False\n    return True"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    for i in range(len(arr) - 1):\n        if arr[i]!= arr[i+1]:\n            return arr[i]\n    return arr[-1]"}
{"task_id": "Mbpp/131", "solution": "Python\ndef reverse_vowels(s):\n    vowels = 'aeiou'\n    s = list(s)\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left].lower() not in vowels:\n            left += 1\n        elif s[right].lower() not in vowels:\n            right -= 1\n        else:\n            s[left], s[right] = s[right], s[left]\n            left, right = left + 1, right - 1\n    return ''.join(s)"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        total = 0\n        for j in range(i, len(s)):\n            total += int(s[j])\n            if total == j - i + 1:\n                count += 1\n    return count"}
{"task_id": "Mbpp/734", "solution": "Python\ndef sum_Of_Subarray_Prod(lst):\n    total_sum = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            total_sum += sum(sublist)\n    return total_sum"}
{"task_id": "Mbpp/721", "solution": "Python\ndef maxAverageOfPath(matrix):\n    N = len(matrix)\n    dp = [[0] * N for _ in range(N)]\n    dp[0][0] = matrix[0][0]\n    for i in range(1, N):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n    for j in range(1, N):\n        dp[0][j] = dp[0][j-1] + matrix[0][j]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n    max_sum = dp[N-1][N-1]\n    max_path = []\n    i, j = N-1, N-1\n    while i > 0 or j > 0:\n        max_path.append((i, j))\n        if i > 0 and j > 0:\n            if dp[i-1][j] > dp[i][j-1]:\n                i -= 1\n            else:\n                j -= 1\n        elif i > 0:\n            i -= 1\n        else:\n            j -= 1\n    max_path.reverse()\n    total_cost = 0\n    for i, j in max_path:\n        total_cost += matrix[i][j]\n    return total_cost / len(max_path)"}
{"task_id": "Mbpp/439", "solution": "Python\ndef multiple_to_single(lst):\n    return int(''.join(map(str, lst)))"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, elem):\n    try:\n        index = arr.index(elem)\n        return (True, index)\n    except ValueError:\n        return (False, -1)"}
{"task_id": "Mbpp/598", "solution": "Python\ndef armstrong_number(n):\n    # Convert the number to string to easily get the number of digits\n    num_str = str(n)\n    num_digits = len(num_str)\n    \n    # Initialize the sum\n    sum = 0\n    \n    # Calculate the sum of the cubes of the digits\n    for digit in num_str:\n        sum += int(digit) ** num_digits\n    \n    # Check if the sum is equal to the original number\n    return sum == n"}
{"task_id": "Mbpp/256", "solution": "Python\ndef count_Primes_nums(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    list1[-1:] = list2\n    return list1"}
{"task_id": "Mbpp/458", "solution": "Python\ndef rectangle_area(length, width):\n    return length * width"}
{"task_id": "Mbpp/279", "solution": "Python\ndef is_num_decagonal(n):\n    return 7*n**2 - 7*n + 1"}
{"task_id": "Mbpp/479", "solution": "def first_Digit(n):\n    while n >= 10:\n        n = n // 10\n    return n"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tup):\n    return lst + list(tup)"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    if len(arr) < 2:\n        return None\n    max1 = max2 = float('-inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2 and num!= max1:\n            max2 = num\n    return max1, max2"}
{"task_id": "Mbpp/89", "solution": "Python\ndef closest_num(n):\n    for i in range(n-1, -1, -1):\n        if i < n:\n            return i"}
{"task_id": "Mbpp/745", "solution": "Python\ndef divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum+1):\n        is_divisible = True\n        for digit in str(num):\n            if num % int(digit)!= 0:\n                is_divisible = False\n                break\n        if is_divisible:\n            result.append(num)\n    return result"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tup):\n    return tup + tuple(lst)"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result = (result * i) % 10\n    return result"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, n):\n    n = n % len(lst)  # handle cases where n is greater than the length of the list\n    return lst[-n:] + lst[:-n]"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(s):\n    return''.join(c if c.islower() else f' {c}' for c in s)"}
{"task_id": "Mbpp/12", "solution": "Python\ndef sort_matrix(matrix):\n    return [x for _,x in sorted((sum(row), row) for row in matrix)]"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(d, n):\n    return {k: v for k, v in d.items() if v >= n}"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month):\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/244", "solution": "import math\n\ndef next_Perfect_Square(n):\n    i = int(math.sqrt(n)) + 1\n    while True:\n        square = i * i\n        if square > n:\n            return square\n        i += 1"}
{"task_id": "Mbpp/426", "solution": "Python\ndef filter_oddnumbers(lst):\n    return [num for num in lst if num % 2!= 0]"}
{"task_id": "Mbpp/160", "solution": "Python\ndef find_solution(a, b, n):\n    if a == 0 and b == 0:\n        return None\n    if a == 0:\n        if b!= n:\n            return None\n        return 0, n\n    if b == 0:\n        if a!= n:\n            return None\n        return n, 0\n    gcd, x, y = extended_euclidean(a, b)\n    if n % gcd!= 0:\n        return None\n    x = x * (n // gcd)\n    y = y * (n // gcd)\n    return x, y\n\ndef extended_euclidean(a, b):\n    if a == 0:\n        return b, 0, 1\n    else:\n        gcd, x, y = extended_euclidean(b % a, a)\n        return gcd, y - (b // a) * x, x"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    return {name: height_weight for name, height_weight in students.items() if height_weight[0] > min_height and height_weight[1] > min_weight}"}
{"task_id": "Mbpp/239", "solution": "Python\ndef get_total_number_of_sequences(m, n):\n    if n == 1:\n        return 1\n    else:\n        return sum(1 for _ in range(1, (m+1)//2+1)) + get_total_number_of_sequences((m+1)//2, n-1)"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(s):\n    return s.replace(\" \", \"\")"}
{"task_id": "Mbpp/56", "solution": "def check(n):\n    reverse_n = int(str(n)[::-1])  # reverse the number\n    return n == 2 * reverse_n - 1  # check if the number is one less than twice its reverse"}
{"task_id": "Mbpp/67", "solution": "The problem is asking to find the number of ways to partition a set of Bell numbers. The Bell numbers are 1, 2, 5, 15, 52, 203, 877, 4140, 21147, 115975, 678570, 4213597, 2674440, 18530218, 133496051, 985899120, 758915423, 591401788, 4807506976, 4213394063, 3779241785, 3556874280, 3556874281, 3556874282, 3556874283, 3556874284, 3556874285, 3556874286, 3556874287, 3556874288, 3556874289, 3556874290, 3556874291, 3556874292, 3556874293, 3556874294, 3556874295, 3556874296, 3556874297, 3556874298, 3556874299, 3556874300, 3556874301, 3556874302, 3556874303, 3556874304, 3556874305, 3556874306, 3556874307, 3556874308, 3556874309, 3556874310, 3556874311, 3556874312, 3556874313, 3556874314, 3556874315, 3556874316, 3556874317, 3556874318, 3556874319, 3556874320, 3556874321, 3556874322, 3556874323, 3556874324, 3556874325, 3556874326, 3556874327, 3556874328, 3556874329, 3556874330, 3556874331, 3556874332, 3556874333, 3556874334, 3556874335, 3556874336, 3556874337, 3556874338, 3556874339, 3556874340, 3556874341, 3556874342, 3556874343, 3556874344, 3556874345, 3556874346, 3556874347, 3556874348, 3556874349, 3556874350, 3556874351, 3556874352, 3556874353, 3556874354, 3556874355, 3556874356, 3556874357, 3556874358, 3556874359, 3556874360, 3556874361, 3556874362, 3556874363, 3556874364, 3556874365, 3556874366, 3556874367, 3556874368, 3556874369, 3556874370, 3556874371, 3556874372, 3556874373, 3556874374, 3556874375, 3556874376, 3556874377, 3556874378, 3556874379, 3556874380, 3556874381, 3556874382, 3556874383, 3556874384, 3556874385, 3556874386, 3556874387, 3556874388, 3556874389, 3556874390, 3556874391, 3556874392, 3556874393, 3556874394, 3556874395, 3556874396, 3556874397, 3556874398, 3556874399, 3556874400, 3556874401, 3556874402, 3556874403, 3556874404, 3556874405, 3556874406, 3556874407, 3556874408, 3556874409, 3556874410, 3556874411, 3556874412, 3556874413, 3556874414, 3556874415, 3556874416, 3556874417, 3556874418, 3556874419, 3556874420, 3556874421, 3556874422, 3556874423, 3556874424, 3556874425, 3556874426, 3556874427, 3556874428, 3556874429, 3556874430, 3556874431, 3556874432, 3556874433, 3556874434, 3556874435, 3556874436, 3556874437, 3556874438, 3556874439, 3556874440, 3556874441, 3556874442, 3556874443, 3556874444, 3556874445, 3556874446, 3556874447, 3556874448, 3556874449, 3556874450, 3556874451, 3556874452, 3556874453, 3556874454, 3556874455, 3556874456, 3556874457, 3556874458, 3556874459, 3556874460, 3556874461, 3556874462, 3556874463, 3556874464, 3556874465, 3556874466, 3556874467, 3556874468, 3556874469, 3556874470, 3556874471, 3556874472, 3556874473, 3556874474, 3556874475, 3556874476, 3556874477, 3556874478, 3556874479, 3556874480, 3556874481, 3556874482, 3556874483, 3556874484, 3556874485, 3556874486, 3556874487, 3556874488, 3556874489, 3556874490, 3556874491, 3556874492, 3556874493, 3556874494, 3556874495, 3556874496, 3556874497, 3556874498, 3556874499, 3556874500, 3556874501, 3556874502, 3556874503, 3556874504, 3556874505, 3556874506, 3556874507, 3556874508, 3556874509, 3556874510, 3556874511, 3556874512, 3556874513, 3556874514, 3556874515, 3556874516, 3556874517, 3556874518, 3556874519, 3556874520, 3556874521, 3556874522, 3556874523, 3556874524, 3556874525, 3556874526, 3556874527, 3556874528, 3556874529, 3556874530, 3556874531, 3556874532, 3556874533, 3556874534, 3556874535, 3556874536, 3556874537, 3556874538, 3556874539, 3556874540, 3556874541, 3556874542, 3556874543, 3556874544, 3556874545, 3556874546, 3556874547, 3556874548, 3556874549, 3556874550, 3556874551, 3556874552, 3556874553, 3556874554, 3556874555, 3556874556, 3556874557, 3556874558, 3556874559, 3556874560, 3556874561, 3556874562, 3556874563, 3556874564, 3556874565, 3556874566, 3556874567, 3556874568, 3556874569, 3556874570, 3556874571, 3556874572, 3556874573, 3556874574, 3556874575, 3556874576, 3556874577, 3556874578, 3556874579, 3556874580, 3556874581, 3556874582, 3556874583, 3556874584, 3556874585, 3556874586, 3556874587, 3556874588, 3556874589, 3556874590, 3556874591, 3556874592, 3556874593, 3556874594, 3556874595, 3556874596, 3556874597, 3556874598, 3556874599, 3556874600, 3556874601, 3556874602, 3556874603, 3556874604, 3556874605, 3556874606, 3556874607, 3556874608, 3556874609, 3556874610, 3556874611, 3556874612, 3556874613, 3556874614, 3556874615, 3556874616, 3556874617, 3556874618, 3556874619, 3556874620, 3556874621, 3556874622, 3556874623, 3556874624, 3556874625, 3556874626, 3556874627, 3556874628, 3556874629, 3556874630, 3556874631, 3556874632, 3556874633, 3556874634, 3556874635, 3556874636, 3556874637, 3556874638, 3556874639, 3556874640, 3556874641, 3556874642, 3556874643, 3556874644, 3556874645, 3556874646, 3556874647, 3556874648, 3556874649, 3556874650, 3556874651, 3556874652, 3556874653, 3556874654, 3556874655, 3556874656, 3556874657, 3556874658, 3556874659, 3556874660, 3556874661, 3556874662, 3556874663, 3556874664, 3556874665, 3556874666, 3556874667, 3556874668, 3556874669, 3556874670, 3556874671, 3556874672, 3556874673, 3556874674, 3556874675, 3556874676, 3556874677, 3556874678, 3556874679, 3556874680, 3556874681, 3556874682, 3556874683, 3556874684, 3556874685, 3556874686, 3556874687, 3556874688, 3556874689, 3556874690, 3556874691, 3556874692, 3556874693, 3556874694, 3556874695, 3556874696, 3556874697, 3556874698, 3556874699, 3556874700, 3556874701, 3556874702, 3556874703, 3556874704, 3556874705, 3556874706, 3556874707, 3556874708, 3556874709, 3556874710, 3556874711, 3556874712, 3556874713, 3556874714, 3556874715, 3556874716, 3556874717, 3556874718, 3556874719, 3556874720, 3556874721, 3556874722, 3556874723, 3556874724, 3556874725, 3556874726, 3556874727, 3556874728, 3556874729, 3556874730, 3556874731, 3556874732, 3556874733, 3556874734, 3556874735, 3556874736, 3556874737, 3556874738, 3556874739, 3556874740, 3556874741, 3556874742, 3556874743, 3556874744, 3556874745, 3556874746, 3556874747, 3556874748, 3556874749, 3556874750, 3556874751, 3556874752, 3556874753, 3556874754, 3556874755, 3556874756, 3556874757, 3556874758, 3556874759, 3556874760, 3556874761, 3556874762, 3556874763, 3556874764, 3556874765, 3556874766, 3556874767, 3556874768, 3556874769, 3556874770, 3556874771, 3556874772, 3556874773, 3556874774, 3556874775, 3556874776, 3556874777, 3556874778, 3556874779, 3556874780, 3556874781, 3556874782, 3556874783, 3556874784, 3556874785, 3556874786, 3556874787, 3556874788, 3556874789, 3556874790, 3556874791, 3556874792, 3556874793, 3556874794, 3556874795, 3556874796, 3556874797, 3556874798, 3556874799, 3556874800, 3556874801, 3556874802, 3556874803, 3556874804, 3556874805, 3556874806, 3556874807, 3556874808, 3556874809, 3556874810, 3556874811, 3556874812, 3556874813, 3556874814, 3556874815, 3556874816, 3556874817, 3556874818, 3556874819, 3556874820, 3556874821, 3556874822, 3556874823, 3556874824, 3556874825, 3556874826, 3556874827, 3556874828, 3556874829, 3556874830, 3556874831, 3556874832, 3556874833, 3556874834, 3556874835, 3556874836, 3556874837, 3556874838, 3556874839, 3556874840, 3556874841, 3556874842, 3556874843, 3556874844, 3556874845, 3556874846, 3556874847, 3556874848, 3556874849, 3556874850, 3556874851, 3556874852, 3556874853, 3556874854, 3556874855, 3556874856, 3556874857, 3556874858, 3556874859, 3556874860, 3556874861, 3556874862, 3556874863, 3556874864, 3556874865, 3556874866, 3556874867, 3556874868, 3556874869, 3556874870, 3556874871, 3556874872, 3556874873, 3556874874, 3556874875, 3556874876, 3556874877, 3556874878, 3556874879, 3556874880, 3556874881, 3556874882, 3556874883, 3556874884, 3556874885, 3556874886, 3556874887, 3556874888, 3556874889, 3556874890, 3556874891, 3556874892, 3556874893, 3556874894, 3556874895, 3556874896, 3556874897, 3556874898, 3556874899, 3556874900, 3556874901, 3556874902, 3556874903, 3556874904, 3556874905, 3556874906, 3556874907, 3556874908, 3556874909, 3556874910, 3556874911, 3556874912, 3556874913, 3556874914, 3556874915, 3556874916, 3556874917, 3556874918, 3556874919, 3556874920, 3556874921, 3556874922, 3556874923, 3556874924, 3556874925, 3556874926, 3556874927, 3556874928, 3556874929, 3556874930, 3556874931, 3556874932, 3556874933, 3556874934, 3556874935, 3556874936, 3556874937, 3556874938, 3556874939, 3556874940, 3556874941, 3556874942, 3556874943,"}
{"task_id": "Mbpp/612", "solution": "def merge(list_of_lists):\n    first_elements = [sublist[0] for sublist in list_of_lists]\n    second_elements = [sublist[1] for sublist in list_of_lists]\n    return [first_elements, second_elements]"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0"}
{"task_id": "Mbpp/463", "solution": "Python\ndef max_subarray_product(arr):\n    if not arr:\n        return 0\n\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n\n        result = max(result, max_product)\n\n    return result"}
{"task_id": "Mbpp/410", "solution": "Python\ndef min_val(lst):\n    return min(lst)"}
{"task_id": "Mbpp/103", "solution": "Python\ndef eulerian_num(n, m):\n    if m > n-m:\n        m = n-m\n    result = 1\n    for i in range(1, m+1):\n        result = result * (n-i+1) // i\n    return result"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    return 4 * side_length"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"}
{"task_id": "Mbpp/285", "solution": "def text_match_two_three(s):\n    if 'a' in s and 'b' in s:\n        b_count = s.count('b')\n        if b_count >= 2:\n            return True\n    return False"}
{"task_id": "Mbpp/635", "solution": "Python\ndef heap_sort(lst):\n    return sorted(lst)"}
{"task_id": "Mbpp/555", "solution": "Python\ndef difference(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_natural_numbers = (n*(n+1))//2\n    return sum_of_cubes - sum_of_natural_numbers"}
{"task_id": "Mbpp/563", "solution": "def extract_values(s):\n    return [x.strip('\"') for x in s.split('\"')]"}
{"task_id": "Mbpp/274", "solution": "Python\ndef even_binomial_Coeff_Sum(n):\n    total = 0\n    for i in range(n):\n        binomial_coefficient = 1\n        for j in range(1, i+1):\n            binomial_coefficient = binomial_coefficient * (i-j+1) // j\n        if i % 2 == 0:\n            total += binomial_coefficient\n    return total"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    return [x + y for x, y in zip(list1, list2)]"}
{"task_id": "Mbpp/404", "solution": "Python\ndef minimum(a, b):\n    return a + b"}
{"task_id": "Mbpp/59", "solution": "Python\ndef is_octagonal(n):\n    return (8*n**3 + 13*n**2 + 7*n) // 2"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(s):\n    for i in range(1, len(s)):\n        if s == s[i:] + s[:i]:\n            return i\n    return len(s)"}
{"task_id": "Mbpp/759", "solution": "def is_decimal(s):\n    try:\n        float(s)\n        if len(s.split('.')[1]) > 2:\n            return False\n        return True\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))"}
{"task_id": "Mbpp/791", "solution": "Python\ndef remove_nested(t):\n    return tuple(x for x in t if not isinstance(x, tuple))"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    count = 0\n    if a == b == c:\n        count = 3\n    elif a == b or a == c or b == c:\n        count = 2\n    return count"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(lst):\n    return [s[::-1] for s in lst]"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(s):\n    return 'z' in s[1:-1]"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    for i in range(1, int(n**0.5) + 1):\n        if (i * i) - n >= 0:\n            break\n        for j in range(i, int(n**0.5) + 1):\n            if (j * j) - (i * i) == n:\n                return True\n    return False"}
{"task_id": "Mbpp/435", "solution": "def last_Digit(n):\n    return n % 10"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(s):\n    return ''.join(c for c in s if not c.isupper())"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(lst):\n    return min(lst)"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    return sum(x for x in lst if x % 2 == 0 and i % 2 == 0)"}
{"task_id": "Mbpp/591", "solution": "def swap_List(lst):\n    if len(lst) > 1:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(big_list, small_list):\n    for i in range(len(big_list) - len(small_list) + 1):\n        if big_list[i:i+len(small_list)] == small_list:\n            return True\n    return False"}
{"task_id": "Mbpp/450", "solution": "def extract_string(lst, size):\n    return [s for s in lst if len(s) >= size]"}
{"task_id": "Mbpp/299", "solution": "Python\ndef max_aggregate(lst):\n    aggregate_dict = {}\n    for name, score in lst:\n        if name in aggregate_dict:\n            aggregate_dict[name] += score\n        else:\n            aggregate_dict[name] = score\n    return max(aggregate_dict.items(), key=lambda x: x[1])"}
{"task_id": "Mbpp/568", "solution": "def empty_list(N):\n    return [{}} for _ in range(N)]"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    return max(lst, key=len)"}
{"task_id": "Mbpp/638", "solution": "def wind_chill(wind_velocity, temperature):\n    if wind_velocity <= 0 or temperature <= -12.8:\n        return round(temperature)\n    else:\n        wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * (wind_velocity ** 0.16) + 0.3965 * temperature * (wind_velocity ** 0.16)\n        return round(wind_chill_index)"}
{"task_id": "Mbpp/242", "solution": "def count_charac(s):\n    return len(s)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(lst):\n    return max(lst) - min(lst)"}
{"task_id": "Mbpp/126", "solution": "def sum(a, b):\n    count = 0\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/283", "solution": "def validate(n):\n    digit_freq = {}\n    for digit in str(n):\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        else:\n            digit_freq[digit] = 1\n    for digit, freq in digit_freq.items():\n        if int(digit) < freq:\n            return False\n    return True"}
{"task_id": "Mbpp/794", "solution": "def text_starta_endb(s):\n    return s.startswith('a') and s.endswith('b')"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(list_of_lists):\n    return min(len(sublist) for sublist in list_of_lists)"}
{"task_id": "Mbpp/735", "solution": "Python\ndef toggle_middle_bits(n):\n    # Convert the number to binary and remove the '0b' prefix\n    binary = bin(n)[2:]\n    \n    # Toggle all bits except the first and the last\n    toggled_binary = binary[0] + ''.join('1' if bit == '0' else '0' for bit in binary[1:-1]) + binary[-1]\n    \n    # Convert the toggled binary back to decimal\n    result = int(toggled_binary, 2)\n    \n    return result"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    return 4 * side_length ** 2"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(s):\n    words = s.split()  # split the string into a list of words\n    reversed_words = [word[::-1] for word in words]  # reverse each word\n    return''.join(reversed_words)  # join the reversed words back into a string"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    total = 0\n    for i in range(2, 2*n, 2):\n        total += i**5\n    return total"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(patterns, sequence):\n    for i in range(len(sequence) - len(patterns) + 1):\n        if all(seq[i+j] == pat[j] for j, pat in enumerate(patterns)):\n            return True\n    return False"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuples_list):\n    cumulative_sum = 0\n    for tup in tuples_list:\n        for val in tup:\n            cumulative_sum += val\n    return cumulative_sum"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(s, c):\n    return s[:s.index(c)] + s[s.index(c)+1:s.rindex(c)]"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(tuples):\n    return min(tuples, key=lambda x: x[1])[0]"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tup, lst):\n    return sum(1 for x in tup if x in lst)"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(t):\n    return {t[i]: t[i+1] for i in range(0, len(t), 2)}"}
{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    return set(list1) & set(list2)"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(s):\n    return s.replace(' ', ':').replace(',', ':').replace('.', ':')"}
{"task_id": "Mbpp/580", "solution": "Python\ndef extract_even(nested_tuple):\n    result = []\n    for element in nested_tuple:\n        if isinstance(element, tuple):\n            result.append(extract_even(element))\n        else:\n            result.append(element)\n    return tuple(result)"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(t):\n    return len(t) == len(set(t))"}
{"task_id": "Mbpp/261", "solution": "Python\ndef division_elements(tuple1, tuple2):\n    return tuple(a / b for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/389", "solution": "Python\ndef find_lucas(n):\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples_list, k):\n    return [t for t in tuples_list if all(i % k == 0 for i in t)]"}
{"task_id": "Mbpp/222", "solution": "def check_type(t):\n    return len(set(type(x) for x in t)) == 1"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(s):\n    return s.replace(' ', '%20')"}
{"task_id": "Mbpp/245", "solution": "Python\ndef max_sum(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n\n    # Initialize arrays to store the maximum sum of increasing and decreasing subsequences\n    increasing = [0] * n\n    decreasing = [0] * n\n\n    # Initialize the maximum sum of increasing and decreasing subsequences\n    max_sum = 0\n\n    # Calculate the maximum sum of increasing subsequences\n    increasing[0] = arr[0]\n    for i in range(1, n):\n        increasing[i] = max(increasing[i-1], arr[i]) + (increasing[i-1] if i > 0 else 0)\n\n    # Calculate the maximum sum of decreasing subsequences\n    decreasing[n-1] = arr[n-1]\n    for i in range(n-2, -1, -1):\n        decreasing[i] = max(decreasing[i+1], arr[i]) + (decreasing[i+1] if i < n-1 else 0)\n\n    # Calculate the maximum sum of bitonic subsequences\n    for i in range(n):\n        max_sum = max(max_sum, increasing[i] + decreasing[i])\n\n    return max_sum"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(t1, t2):\n    return tuple(max(a, b) for a, b in zip(t1, t2))"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    return a * b"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    return max(row[n-1] for row in matrix)"}
{"task_id": "Mbpp/478", "solution": "Python\ndef remove_lowercase(s):\n    return ''.join([c for c in s if c.isupper()])"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    return a ** b"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    freq_dict = {}\n    for elem in lst:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict"}
{"task_id": "Mbpp/311", "solution": "Python\ndef set_left_most_unset_bit(n):\n    return n | (n & -n)"}
{"task_id": "Mbpp/590", "solution": "import math\n\ndef polar_rect(r, theta):\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, complex(x, y))"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(s):\n    components = s.split('_')\n    return components[0] + ''.join(x.title() for x in components[1:])"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flat_list = []\n    for element in nested_list:\n        if isinstance(element, list):\n            flat_list.extend(flatten_list(element))\n        else:\n            flat_list.append(element)\n    return flat_list"}
{"task_id": "Mbpp/765", "solution": "Python\ndef is_polite(n):\n    polite_numbers = []\n    i = 0\n    while len(polite_numbers) < n:\n        i += 1\n        polite_numbers.append(i * (3 * i - 1) // 2)\n    return polite_numbers[-1]"}
{"task_id": "Mbpp/290", "solution": "def max_length(list_of_lists):\n    max_length = 0\n    max_list = []\n    for lst in list_of_lists:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_length, max_list"}
{"task_id": "Mbpp/113", "solution": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    count_dict = {}\n    for item in lst:\n        item_tuple = tuple(item)\n        if item_tuple in count_dict:\n            count_dict[item_tuple] += 1\n        else:\n            count_dict[item_tuple] = 1\n    return count_dict"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(lst, sum):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if lst[i] + lst[j] == sum:\n                count += 1\n    return count"}
{"task_id": "Mbpp/608", "solution": "Python\ndef bell_Number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        bell_numbers = [1, 1]\n        for i in range(2, n):\n            bell_numbers.append(sum([bell_numbers[j] * math.comb(i-1, j) for j in range(i)]))\n        return bell_numbers[-1]"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    return [(x, y) for x, y in zip(lst, lst[1:])]"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/641", "solution": "Python\ndef is_nonagonal(n):\n    return (n*(8*n-1))//2"}
{"task_id": "Mbpp/286", "solution": "Python\ndef max_sub_array_sum_repeated(arr, k, n):\n    # Repeat the array k times\n    arr = arr * k\n    # Initialize the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n    # Iterate over the array\n    for num in arr:\n        # Add the current number to the current sum\n        current_sum += num\n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n        # If the current sum is less than 0, reset it to 0\n        if current_sum < 0:\n            current_sum = 0\n    # Return the maximum sum\n    return max_sum"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    return max(arr) + min(arr)"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2!= 0:\n            return False\n    return True"}
