{"task_id": "Mbpp/725", "solution": "def extract_quotation(s):\n    return [x.strip('\"') for x in s.split('\"') if x.strip('\"')]"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    return max(set(lst), key=lst.count)"}
{"task_id": "Mbpp/305", "solution": "def start_withp(word_list):\n    result = []\n    for word in word_list:\n        words = word.split()\n        if words[0].startswith('p'):\n            result.append(words[0])\n            if len(words) > 1 and words[1].startswith('p'):\n                result.append(words[1])\n            break\n    return tuple(result)"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lists):\n    result = {}\n    for lst in lists:\n        for item in lst:\n            if item in result:\n                result[item] += 1\n            else:\n                result[item] = 1\n    return result"}
{"task_id": "Mbpp/84", "solution": "def sequence(n):\n    a, b = 1, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return b"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    return sum(set(lst))"}
{"task_id": "Mbpp/392", "solution": "Python\ndef get_max_sum(n):\n    memo = {1: 1}\n    def f(k):\n        if k not in memo:\n            if k % 2 == 0:\n                memo[k] = max(f(k//2) + f(k//3) + f(k//4) + f(k//5), k)\n            else:\n                memo[k] = k\n        return memo[k]\n    return f(n)"}
{"task_id": "Mbpp/565", "solution": "def split(s):\n    return list(s)"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, size):\n    merged_list = sorted(list1 + list2)\n    median = merged_list[size // 2] if size % 2!= 0 else (merged_list[size // 2 - 1] + merged_list[size // 2]) / 2\n    return median"}
{"task_id": "Mbpp/98", "solution": "def multiply_num(lst):\n    product = 1\n    for num in lst:\n        product *= num\n    return product / len(lst)"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    return any(x in seq2 for x in seq1)"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    return max(a, b)"}
{"task_id": "Mbpp/731", "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    lateral_surface_area = math.pi * r * (r + math.sqrt(h**2 + r**2))\n    return lateral_surface_area"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(lst):\n    return sorted(map(int, lst))"}
{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateralsuface_cylinder(radius, height):\n    lateral_surface_area = 2 * math.pi * radius * (radius + height)\n    return lateral_surface_area"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(tuple1, tuple2):\n    return tuple(a % b for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(s):\n    return s.replace(\" \", \"\")"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(d):\n    return sorted(d.items(), key=lambda x: x[1], reverse=False)"}
{"task_id": "Mbpp/597", "solution": "Python\ndef find_kth(arr1, arr2, k):\n    i, j = 0, 0\n    while k > 0:\n        if i == len(arr1):\n            return arr2[j + k - 1]\n        if j == len(arr2):\n            return arr1[i + k - 1]\n        if k == 1:\n            return min(arr1[i], arr2[j])\n        if arr1[i] < arr2[j]:\n            k -= 1\n            i += 1\n        else:\n            k -= 1\n            j += 1\n    return -1"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(t1, t2):\n    return all(x >= y for x, y in zip(t1, t2))"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(s):\n    return tuple(s)"}
{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    return [x for x in lst if x!= 0] + [x for x in lst if x == 0]"}
{"task_id": "Mbpp/260", "solution": "Python\ndef newman_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    num = 2\n    while True:\n        if is_prime(num):\n            count += 1\n            if count == n:\n                return num\n        num += 1"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    return sum(i**2 for i in range(2, 2*n+1, 2))"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(lst, start, end):\n    return sum(lst[start:end+1])"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(s):\n    return s.count('std')"}
{"task_id": "Mbpp/171", "solution": "Python\ndef perimeter_pentagon(n):\n    side_length = 5\n    perimeter = n * side_length\n    return perimeter"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    digits.sort(reverse=True)\n    return int(''.join(map(str, digits)))"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(lst):\n    return len(set(lst)) == 1"}
{"task_id": "Mbpp/567", "solution": "Python\ndef issort_list(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    return sum(i*(i+1)//2 for i in range(1, n+1))"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(n):\n    str_n = str(n)\n    for i in range(1, len(str_n) - 1):\n        if str_n[i]!= str_n[i-1] and str_n[i]!= str_n[i+1]:\n            return False\n    return True"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    for i in range(len(arr) - 1):\n        if arr[i]!= arr[i + 1]:\n            return arr[i]\n    return arr[-1]"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left] not in vowels:\n            left += 1\n        elif s[right] not in vowels:\n            right -= 1\n        else:\n            s[left], s[right] = s[right], s[left]\n            left, right = left + 1, right - 1\n    return ''.join(s)"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        total = 0\n        for j in range(i, len(s)):\n            total += int(s[j])\n            if total == j - i + 1:\n                count += 1\n    return count"}
{"task_id": "Mbpp/734", "solution": "Python\ndef sum_Of_Subarray_Prod(lst):\n    total_sum = 0\n    for i in range(1 << len(lst)):\n        product = 1\n        for j in range(len(lst)):\n            if (i & (1 << j)):\n                product *= lst[j]\n        total_sum += product\n    return total_sum"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    N = len(matrix)\n    dp = [[0] * N for _ in range(N)]\n    dp[0][0] = matrix[0][0]\n    for i in range(1, N):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n    for j in range(1, N):\n        dp[0][j] = dp[0][j-1] + matrix[0][j]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n    max_sum = dp[-1][-1]\n    max_path_sum = 0\n    for i in range(N):\n        for j in range(N):\n            path_sum = dp[i][j]\n            path_length = i + j\n            max_path_sum = max(max_path_sum, path_sum / path_length * N)\n    return max_path_sum"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(lst):\n    return int(''.join(map(str, lst)))"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, element):\n    try:\n        index = arr.index(element)\n        return (True, index)\n    except ValueError:\n        return (False, -1)"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(n):\n    # Convert the number to a string to easily get the number of digits\n    num_str = str(n)\n    num_digits = len(num_str)\n\n    # Calculate the sum of the digits raised to the power of the number of digits\n    sum_of_digits = sum(int(digit) ** num_digits for digit in num_str)\n\n    # Check if the sum is equal to the original number\n    return sum_of_digits == n"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    list1[-1:] = list2\n    return list1"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    return length * width"}
{"task_id": "Mbpp/279", "solution": "Python\ndef is_num_decagonal(n):\n    def pentagonal_number(k):\n        return k * (3 * k - 1) // 2\n\n    decagonal_number = 0\n    k = 1\n    while True:\n        decagonal_number += pentagonal_number(k)\n        if k == n:\n            return decagonal_number\n        k += 1"}
{"task_id": "Mbpp/479", "solution": "def first_Digit(n):\n    return int(str(n)[0])"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tup):\n    return lst + list(tup)"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    max1 = max2 = float('-inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    return (max1, max2)"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    for i in range(n-1, -1, -1):\n        if i < n:\n            return i"}
{"task_id": "Mbpp/745", "solution": "Python\ndef divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        is_divisible = True\n        for digit in str(num):\n            if num % int(digit)!= 0:\n                is_divisible = False\n                break\n        if is_divisible:\n            result.append(num)\n    return result"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tup):\n    return tup + tuple(lst)"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result = (result * i) % 10\n    return result"}
{"task_id": "Mbpp/395", "solution": "Python\ndef first_non_repeating_character(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None"}
{"task_id": "Mbpp/743", "solution": "Python\ndef rotate_right(lst, n):\n    n = n % len(lst)\n    return lst[-n:] + lst[:-n]"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(s):\n    return''.join(word.capitalize() for word in s.split())"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    return [row for row in sorted(matrix, key=sum)]"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(dictionary, n):\n    return {key: value for key, value in dictionary.items() if value >= n}"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month):\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    elif month == 2:\n        return False\n    else:\n        return True"}
{"task_id": "Mbpp/244", "solution": "Python\nimport math\n\ndef next_Perfect_Square(n):\n    i = math.ceil(math.sqrt(n))\n    while True:\n        if math.isqrt(i * i) == i * i:\n            return i * i\n        i += 1"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(lst):\n    return [num for num in lst if num % 2!= 0]"}
{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    if a == 0 and b == 0:\n        return None\n    if a == 0:\n        if b!= n:\n            return None\n        return 0, n\n    if b == 0:\n        if a!= n:\n            return None\n        return n, 0\n\n    gcd, x, y = extended_euclidean_algorithm(a, b)\n    if n % gcd!= 0:\n        return None\n\n    x *= n // gcd\n    y *= n // gcd\n\n    return x, y\n\n\ndef extended_euclidean_algorithm(a, b):\n    if a == 0:\n        return b, 0, 1\n    else:\n        gcd, x, y = extended_euclidean_algorithm(b % a, a)\n        return gcd, y - (b // a) * x, x"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    return {name: height_weight for name, height_weight in students.items() if height_weight[0] > min_height and height_weight[1] > min_weight}"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return 1\n    count = 1\n    prev = 1\n    for _ in range(1, n):\n        for i in range(2, m//prev + 1):\n            if i * prev <= m:\n                count += 1\n        prev *= 2\n    return count"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(s):\n    return s.replace(\" \", \"\")"}
{"task_id": "Mbpp/56", "solution": "def check(n):\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        bell_numbers = [1, 1]\n        for i in range(2, n+1):\n            bell_numbers.append(sum(bell_numbers[i-1:i]))\n        return bell_numbers[n-1]"}
{"task_id": "Mbpp/612", "solution": "def merge(list_of_lists):\n    first_elements = [sublist[0] for sublist in list_of_lists]\n    second_elements = [sublist[1] for sublist in list_of_lists]\n    return [first_elements + second_elements[::2], first_elements[1:] + second_elements[1::2]]"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n\n        result = max(result, max_product)\n\n    return result"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    return min(lst)"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    if m < 0 or m > n:\n        return 0\n    if m == 0:\n        return 1\n    if m == n:\n        return 1\n    return eulerian_num(n-1, m-1) + eulerian_num(n-1, m)"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    return 4 * side_length"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    sum_even_factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            sum_even_factors += i\n    return sum_even_factors"}
{"task_id": "Mbpp/285", "solution": "def text_match_two_three(s):\n    if len(s) < 3:\n        return False\n    if s[0] == 'a' and (s[1:3] == 'bb' or s[1:4] == 'bbb'):\n        return True\n    return False"}
{"task_id": "Mbpp/635", "solution": "def heap_sort(lst):\n    return sorted(lst)"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = (n * (n + 1)) // 2\n    return sum_of_cubes - sum_of_numbers"}
{"task_id": "Mbpp/563", "solution": "def extract_values(s):\n    return [x.strip('\"') for x in s.split('\"') if x.strip('\"')]"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    total = 0\n    for i in range(n):\n        if i % 2 == 0:\n            total += binomial_coefficient(i, n)\n    return total\n\ndef binomial_coefficient(k, n):\n    if k > n - k:  # take advantage of symmetry\n        k = n - k\n    result = 1\n    for i in range(1, k + 1):\n        result = result * (n - i + 1) // i\n    return result"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    return [x + y for x, y in zip(list1, list2)]"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    return a"}
{"task_id": "Mbpp/59", "solution": "Python\ndef is_octagonal(n):\n    return n*(3*n-1)*(2*n-1)"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(s):\n    for i in range(1, len(s)):\n        if s == s[i:] + s[:i]:\n            return i\n    return len(s)"}
{"task_id": "Mbpp/759", "solution": "def is_decimal(s):\n    try:\n        float(s)\n        parts = s.split('.')\n        if len(parts) == 1:\n            return False\n        if len(parts[1]) > 2:\n            return False\n        return True\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(t):\n    return tuple(x for x in t if not isinstance(x, tuple))"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    count = 0\n    if a == b:\n        count += 1\n    if a == c:\n        count += 1\n    if b == c:\n        count += 1\n    return count"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(lst):\n    return [s[::-1] for s in lst]"}
{"task_id": "Mbpp/643", "solution": "Python\ndef text_match_wordz_middle(s):\n    return 'z' in s[1:-1]"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    for i in range(1, int(n**0.5) + 1):\n        if (i**2 - (n - i**2)**0.5**2) == n:\n            return True\n    return False"}
{"task_id": "Mbpp/435", "solution": "def last_Digit(n):\n    return n % 10"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase_substrings(s):\n    result = ''\n    current_substring = ''\n    for char in s:\n        if char.isupper():\n            if current_substring:\n                result += current_substring\n                current_substring = ''\n        else:\n            current_substring += char\n    if current_substring:\n        result += current_substring\n    return result"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(lst):\n    return min(lst)"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 == 0)"}
{"task_id": "Mbpp/591", "solution": "def swap_List(lst):\n    if len(lst) > 1:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(list1, list2):\n    return set(list1).issubset(set(list2))"}
{"task_id": "Mbpp/450", "solution": "def extract_string(lst, n):\n    return [s for s in lst if len(s) > n]"}
{"task_id": "Mbpp/299", "solution": "Python\ndef max_sum_from_list(lst):\n    max_sum = 0\n    max_name = ''\n    for name, score in lst:\n        if score > max_sum:\n            max_sum = score\n            max_name = name\n    return max_name, max_sum"}
{"task_id": "Mbpp/568", "solution": "def empty_list(N):\n    return [{},]*N"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    return max(lst, key=len)"}
{"task_id": "Mbpp/638", "solution": "def wind_chill_index(wind_velocity, temperature):\n    if wind_velocity <= 0 or temperature < -12.8:\n        return None\n    wind_chill = 35.74 + 0.6215 * wind_velocity - 35.75 * (wind_velocity ** 0.16) + 0.4275 * wind_velocity * (temperature - 0.16)\n    return round(wind_chill)"}
{"task_id": "Mbpp/242", "solution": "def count_charac(s):\n    return len(s)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(lst):\n    return max(lst) - min(lst)"}
{"task_id": "Mbpp/126", "solution": "def sum(a, b):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    return gcd(a, b)"}
{"task_id": "Mbpp/283", "solution": "def validate(n):\n    n = str(n)\n    for digit in set(n):\n        if n.count(digit) > int(digit):\n            return False\n    return True"}
{"task_id": "Mbpp/794", "solution": "def text_starta_endb(s):\n    return s.startswith('a') and s.endswith('b')"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(list_of_lists):\n    return min(len(sublist) for sublist in list_of_lists)"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    # Convert the number to binary and remove the '0b' prefix\n    binary = bin(n)[2:]\n    \n    # Toggle all bits except the first and last\n    toggled_binary = '1' + ''.join('0' if bit == '1' else '1' for bit in binary[1:-1]) + '1'\n    \n    # Convert the toggled binary back to an integer\n    result = int(toggled_binary, 2)\n    \n    return result"}
{"task_id": "Mbpp/266", "solution": "def lateral_surface_area(side_length):\n    return 4 * side_length ** 2"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(s):\n    return''.join(word[::-1] for word in s.split()[::-1])"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    return sum(i**5 for i in range(2, 2*n, 2))"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(colors, patterns):\n    return all(color == pattern for color, pattern in zip(colors, patterns))"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuples):\n    total = 0\n    for t in tuples:\n        total += sum(t)\n    return total"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(s, char):\n    return s[:s.index(char)] + s[s.index(char)+1:s.rindex(char)]"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(lst):\n    return min(lst, key=lambda x: x[1])[0]"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tup, lst):\n    return sum(1 for elem in lst if elem in tup)"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(t):\n    return {t[i]: t[i+1] for i in range(0, len(t), 2)}"}
{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    return set(list1) & set(list2)"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(s):\n    return s.replace(' ', ':').replace(',', ':').replace('.', ':')"}
{"task_id": "Mbpp/580", "solution": "def remove_odd_elements(t):\n    return tuple(x if isinstance(x, tuple) else (x if x % 2!= 0 else None) for x in t if x is not None)"}
{"task_id": "Mbpp/394", "solution": "def no_duplicates(t):\n    return len(t) == len(set(t))"}
{"task_id": "Mbpp/261", "solution": "def elementwise_division(t1, t2):\n    return tuple(x / y for x, y in zip(t1, t2))"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b"}
{"task_id": "Mbpp/75", "solution": "Python\ndef find_tuples(tuples_list, k):\n    return [t for t in tuples_list if all(i % k == 0 for i in t)]"}
{"task_id": "Mbpp/222", "solution": "Python\ndef check_type(t):\n    return len(set(type(i) for i in t)) == 1"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(s):\n    return s.replace(' ', '%20')"}
{"task_id": "Mbpp/245", "solution": "Python\ndef max_bitonic_subsequence_sum(arr):\n    n = len(arr)\n    if n < 2:\n        return sum(arr)\n\n    # Find the maximum increasing subsequence\n    inc = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                inc[i] = max(inc[i], inc[j] + 1)\n\n    # Find the maximum decreasing subsequence\n    dec = [1] * n\n    for i in range(n - 2, -1, -1):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                dec[i] = max(dec[i], dec[j] + 1)\n\n    # Find the maximum sum of a bitonic subsequence\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - 1)\n\n    return max_sum"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    return tuple(max(a, b) for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    return a * b"}
{"task_id": "Mbpp/611", "solution": "def max_in_column(matrix, n):\n    return max(row[n] for row in matrix)"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(s):\n    return ''.join([c for c in s if not c.islower()])"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    return a ** b"}
{"task_id": "Mbpp/88", "solution": "Python\ndef freq_count(lst):\n    frequency_dict = {}\n    for item in lst:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    return n | (n & -n)"}
{"task_id": "Mbpp/590", "solution": "Python\nimport math\nimport cmath\n\ndef polar_rect(radius, angle):\n    x = radius * math.cos(math.radians(angle))\n    y = radius * math.sin(math.radians(angle))\n    return (x, complex(x, y))"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_case_string):\n    components = snake_case_string.split('_')\n    return components[0] + ''.join(x.title() for x in components[1:])"}
{"task_id": "Mbpp/297", "solution": "Python\ndef flatten(nested_list):\n    flat_list = []\n    for i in nested_list:\n        if type(i) == list:\n            flat_list.extend(flatten(i))\n        else:\n            flat_list.append(i)\n    return flat_list"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    polite_numbers = []\n    i = 0\n    while len(polite_numbers) < n:\n        i += 1\n        polite_numbers.append(i * (3 * i - 1) // 2)\n    return polite_numbers[-1]"}
{"task_id": "Mbpp/290", "solution": "def max_length_list(lst):\n    max_len = max(len(sublist) for sublist in lst)\n    return max_len, [sublist for sublist in lst if len(sublist) == max_len]"}
{"task_id": "Mbpp/113", "solution": "Python\ndef check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    frequency_dict = {}\n    for item in lst:\n        item_tuple = tuple(sorted(item))\n        if item_tuple in frequency_dict:\n            frequency_dict[item_tuple] += 1\n        else:\n            frequency_dict[item_tuple] = 1\n    return frequency_dict"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(lst, target_sum):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if lst[i] + lst[j] == target_sum:\n                count += 1\n    return count"}
{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    if n == 0:\n        return 1\n    else:\n        return sum([bell_Number(k) * binomial(n, k) for k in range(n+1)])"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    return sum(1 for i in range(len(list1)) if list1[i] == list2[i])"}
{"task_id": "Mbpp/641", "solution": "Python\ndef is_nonagonal(n):\n    nonagonal_numbers = [i*(i+2) for i in range(n)]\n    return nonagonal_numbers[-1]"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, k, n):\n    arr = arr * k\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in arr:\n        current_sum += num\n        max_sum = max(max_sum, current_sum)\n        current_sum = max(0, current_sum)\n    return max_sum"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    return max(arr) + min(arr)"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2!= 0:\n            return False\n    return True"}
