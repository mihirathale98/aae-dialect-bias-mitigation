{"task_id": "HumanEval/0", "solution": "from typing import List\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "solution": "def separate_paren_groups(paren_string: str) -> list:\n    stack = []\n    result = []\n    temp = ''\n    for char in paren_string:\n        if char == ' ':\n            continue\n        if char == '(':\n            stack.append(char)\n            temp += char\n        elif char == ')':\n            if stack:\n                stack.pop()\n                temp += char\n                if not stack:\n                    result.append(temp)\n                    temp = ''\n            else:\n                return []\n    if stack:\n        return []\n    return result"}
{"task_id": "HumanEval/2", "solution": "def truncate_number(number: float) -> float:\n    return number - int(number)"}
{"task_id": "HumanEval/3", "solution": "def below_zero(operations: list) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "solution": "from statistics import mean\nfrom typing import List\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean_value = mean(numbers)\n    return mean([abs(x - mean_value) for x in numbers])"}
{"task_id": "HumanEval/5", "solution": "def intersperse(numbers, delimiter):\n    if not numbers:\n        return numbers\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result.append(str(delimiter))\n        result.append(str(num))\n    return [int(x) for x in result]"}
{"task_id": "HumanEval/6", "solution": "def parse_nested_parens(paren_string: str) -> List[int]:\n    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                if not stack:\n                    result.append(len(stack) + 1)\n            else:\n                result.append(0)\n    return result"}
{"task_id": "HumanEval/7", "solution": "def filter_by_substring(strings, substring):\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        total_sum = sum(numbers)\n        total_product = 1\n        for num in numbers:\n            total_product *= num\n        return total_sum, total_product"}
{"task_id": "HumanEval/9", "solution": "def rolling_max(numbers):\n    max_list = [max(numbers[:i+1]) for i in range(len(numbers))]\n    return max_list"}
{"task_id": "HumanEval/10", "solution": "def make_palindrome(s: str) -> str:\n    if s == s[::-1]:\n        return s\n    else:\n        return s + s[::-1]"}
{"task_id": "HumanEval/11", "solution": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result"}
{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return min(strings, key=len)"}
{"task_id": "HumanEval/13", "solution": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "solution": "def all_prefixes(s: str) -> list:\n    prefixes = []\n    for i in range(1, len(s) + 1):\n        prefixes.append(s[:i])\n    return prefixes"}
{"task_id": "HumanEval/15", "solution": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))"}
{"task_id": "HumanEval/16", "solution": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "solution": "def parse_music(music_string: str) -> list:\n    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/18", "solution": "def how_many_times(string: str, substring: str) -> int:\n    return string.count(substring)"}
{"task_id": "HumanEval/19", "solution": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    nums = numbers.split()\n    nums.sort(key=lambda x: num_dict[x])\n    return ' '.join(nums)"}
{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two numbers\")\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (None, None)\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return tuple(sorted(closest_pair))"}
{"task_id": "HumanEval/21", "solution": "from typing import List\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two numbers\")\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "HumanEval/22", "solution": "from typing import List, Any\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "solution": "def strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "solution": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "solution": "def factorize(n: int) -> list:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "solution": "from collections import OrderedDict\ndef remove_duplicates(numbers):\n    return list(OrderedDict.fromkeys(numbers))"}
{"task_id": "HumanEval/27", "solution": "def flip_case(s: str) -> str:\n    return s.swapcase()"}
{"task_id": "HumanEval/28", "solution": "def concatenate(strings: list) -> str:\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "solution": "def filter_by_prefix(strings, prefix):\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "solution": "def get_positive(l: list) -> list:\n    return [i for i in l if i > 0]"}
{"task_id": "HumanEval/31", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/32", "solution": "import math\nimport numpy as np\ndef find_zero(xs: list):\n    if len(xs) % 2 != 0:\n        raise ValueError(\"xs must have an even number of coefficients\")\n    if abs(xs[0]) < abs(xs[-1]):\n        raise ValueError(\"xs must have the largest non-zero coefficient as the first element\")\n\n    def poly(xs, x):\n        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n    def find_zero(xs):\n        x = 1.0\n        while True:\n            y = poly(xs, x)\n            if abs(y) < 1e-6:\n                return x\n            x += 0.1\n\n    return find_zero(xs)"}
{"task_id": "HumanEval/33", "solution": "def sort_third(l):\n    return [x if i % 3 != 0 else sorted([x for x in l if x % 3 != 0])[i % 3] for i, x in enumerate(l)]"}
{"task_id": "HumanEval/34", "solution": "def unique(l: list) -> list:\n    return sorted(l)"}
{"task_id": "HumanEval/35", "solution": "def max_element(l: list) -> int:\n    return max(l)"}
{"task_id": "HumanEval/36", "solution": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "solution": "def sort_even(l):\n    return [x if i % 2 == 0 else sorted([x for x in l if i % 2 == 0])[i//2] for i, x in enumerate(l)]"}
{"task_id": "HumanEval/38", "solution": "def decode_cyclic(s: str):\n    decoded = \"\"\n    i = 0\n    while i < len(s):\n        if i + 2 < len(s):\n            decoded += s[i+1:i+3] + s[i]\n        else:\n            decoded += s[i:]\n        i += 3\n    return decoded"}
{"task_id": "HumanEval/39", "solution": "def prime_fib(n: int) -> int:\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n: int) -> int:\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n):\n                a, b = b, a + b\n            return b\n\n    i = 1\n    while True:\n        num = fibonacci(i)\n        if is_prime(num):\n            if i == n:\n                return num\n            i += 1"}
{"task_id": "HumanEval/40", "solution": "def triples_sum_to_zero(lst):\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            for k in range(j+1, len(lst)):\n                if lst[i] + lst[j] + lst[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "solution": "def car_race_collision(n: int) -> int:\n    return n * (n - 1) // 2"}
{"task_id": "HumanEval/42", "solution": "def incr_list(l: list) -> list:\n    return [i + 1 for i in l]"}
{"task_id": "HumanEval/43", "solution": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "solution": "def change_base(x: int, base: int):\n    if base < 2 or base > 9:\n        return \"Invalid base. Base must be between 2 and 9.\"\n    else:\n        if x < base:\n            return str(x)\n        else:\n            return change_base(x // base, base) + str(x % base)"}
{"task_id": "HumanEval/45", "solution": "def triangle_area(a, h):\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "solution": "def fib4(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n+1):\n            a, b, c, d = b, c, d, a+b+c\n        return d"}
{"task_id": "HumanEval/47", "solution": "def median(l: list):\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)//2 - 1] + l[len(l)//2]) / 2\n    else:\n        return l[len(l)//2]"}
{"task_id": "HumanEval/48", "solution": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "solution": "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "solution": "def decode_shift(s: str):\n    decoded_string = \"\"\n    for ch in s:\n        if ch.isalpha():\n            if ch.islower():\n                decoded_string += chr((ord(ch) - 5 - ord('a')) % 26 + ord('a'))\n            else:\n                decoded_string += chr((ord(ch) - 5 - ord('A')) % 26 + ord('A'))\n        else:\n            decoded_string += ch\n    return decoded_string"}
{"task_id": "HumanEval/51", "solution": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/52", "solution": "def below_threshold(lst, threshold):\n    return all(i < threshold for i in lst)"}
{"task_id": "HumanEval/53", "solution": "def add(x: int, y: int) -> int:\n    return x + y"}
{"task_id": "HumanEval/54", "solution": "def same_chars(s0: str, s1: str) -> bool:\n    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "solution": "def fib(n: int) -> int:\n    if n <= 0:\n        return \"Input should be a positive integer.\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/56", "solution": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "solution": "def monotonic(lst):\n    if len(lst) < 2:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/58", "solution": "def common(l1, l2):\n    set1 = set(l1)\n    set2 = set(l2)\n    return list(set1.intersection(set2))"}
{"task_id": "HumanEval/59", "solution": "def largest_prime_factor(n: int) -> int:\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    for i in range(n, 1, -1):\n        if n % i == 0 and is_prime(i):\n            return i"}
{"task_id": "HumanEval/60", "solution": "def sum_to_n(n: int) -> int:\n    return sum(range(1, n+1))"}
{"task_id": "HumanEval/61", "solution": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/62", "solution": "def derivative(xs):\n    n = len(xs)\n    result = [0] * (n + 1)\n    result[n] = xs[0]\n    for i in range(n - 1, 0, -1):\n        result[i] = xs[i] + result[i + 1] * i\n    return result"}
{"task_id": "HumanEval/63", "solution": "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(2, n):\n            a, b, c = b, c, a + b + c\n        return c"}
{"task_id": "HumanEval/64", "solution": "def vowels_count(s):\n    vowels = 'aeiou'\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            if char.lower() == 'y' and s[-1].lower() == 'y':\n                count += 1\n            else:\n                count += 1\n    return count"}
{"task_id": "HumanEval/65", "solution": "def circular_shift(x, shift):\n    if shift >= len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[shift:] + str(x)[:shift]"}
{"task_id": "HumanEval/66", "solution": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())"}
{"task_id": "HumanEval/67", "solution": "def fruit_distribution(s, n):\n    s = s.replace(\" apples\", \" \").replace(\" oranges\", \" \")\n    s = s.split()\n    apples = int(s[1])\n    oranges = int(s[3])\n    return n - apples - oranges"}
{"task_id": "HumanEval/68", "solution": "def pluck(arr):\n    if not arr:\n        return []\n    min_even = min([x for x in arr if x % 2 == 0])\n    return [i for i, x in enumerate(arr) if x == min_even][0]"}
{"task_id": "HumanEval/69", "solution": "def search(lst):\n    max_num = max(lst)\n    for num in set(lst):\n        if lst.count(num) >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "solution": "def strange_sort_list(lst):\n    if len(lst) == 0:\n        return []\n    sorted_list = sorted(lst)\n    result = []\n    while len(sorted_list) > 0:\n        if len(result) % 2 == 0:\n            result.append(sorted_list.pop(0))\n        else:\n            result.append(sorted_list.pop())\n    return result"}
{"task_id": "HumanEval/71", "solution": "import math\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "solution": "def will_it_fly(q, w):\n    if q == q[::-1]:  # Check if q is balanced\n        if sum(q) <= w:  # Check if the sum of q's elements is less than or equal to w\n            return True\n        else:\n            return False\n    else:\n        return False"}
{"task_id": "HumanEval/73", "solution": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes"}
{"task_id": "HumanEval/74", "solution": "def total_match(lst1, lst2):\n    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    if total_chars1 < total_chars2:\n        return lst1\n    elif total_chars1 > total_chars2:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "solution": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a + 1):\n        if a % i == 0:\n            factors.append(i)\n    factors.sort()\n\n    if len(factors) != 3:\n        return False\n\n    for factor in factors:\n        if not is_prime(factor):\n            return False\n\n    return True"}
{"task_id": "HumanEval/76", "solution": "def is_simple_power(x, n):\n    if n == 0:\n        return x == 1\n    else:\n        return round(n ** (round(math.log(x, n)))) == x"}
{"task_id": "HumanEval/77", "solution": "def iscube(a):\n    for i in range(1, int(a**0.3333) + 1):\n        if i**3 == a:\n            return True\n    return False"}
{"task_id": "HumanEval/78", "solution": "def hex_key(num):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for char in num:\n        if char in '237BD':\n            if is_prime(int(char, 16)):\n                count += 1\n    return count"}
{"task_id": "HumanEval/79", "solution": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "solution": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) < 3:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "solution": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "solution": "def prime_length(s):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(s))"}
{"task_id": "HumanEval/83", "solution": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "solution": "def solve(N):\n    # Convert N to binary\n    binary = bin(N)[2:]\n    # Calculate the sum of the digits in binary\n    sum_of_digits = sum(int(digit) for digit in binary)\n    # Convert the sum to binary\n    binary_sum = bin(sum_of_digits)[2:]\n    return binary_sum"}
{"task_id": "HumanEval/85", "solution": "def add(lst):\n    return [i for i in lst if i % 2 == 0 and lst.index(i) % 2 != 0]"}
{"task_id": "HumanEval/86", "solution": "import random\ndef anti_shuffle(s):\n    words = s.split()\n    result = []\n    for word in words:\n        letters = list(word)\n        random.shuffle(letters)\n        result.append(''.join(letters))\n    return ' '.join(result)"}
{"task_id": "HumanEval/87", "solution": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    return result"}
{"task_id": "HumanEval/88", "solution": "def sort_array(array):\n    if len(array) == 0:\n        return array\n    if array[0] + array[-1] % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)"}
{"task_id": "HumanEval/89", "solution": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 97 if char.islower() else 65\n            result += chr((ord(char) - ascii_offset + 4) % 26 + ascii_offset)\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "solution": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    if len(set(lst)) < 2:\n        return None\n    return lst[1]"}
{"task_id": "HumanEval/91", "solution": "def is_bored(S):\n    sentences = S.split('. ')\n    count = 0\n    for sentence in sentences:\n        if sentence and sentence[0].lower() == 'i':\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "solution": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or x == z + y or y == x + z\n    else:\n        return False"}
{"task_id": "HumanEval/93", "solution": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in message:\n        if char in vowels:\n            if char.islower():\n                result += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                result += chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/94", "solution": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "HumanEval/95", "solution": "def check_dict_case(d):\n    if not all(isinstance(k, str) for k in d.keys()):\n        return False\n    if all(k.islower() for k in d.keys()):\n        return True\n    if all(k.isupper() for k in d.keys()):\n        return True\n    return False"}
{"task_id": "HumanEval/96", "solution": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, n) if is_prime(i)]\n    return primes"}
{"task_id": "HumanEval/97", "solution": "def multiply(a, b):\n    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/98", "solution": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in 'AEIOU':\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "solution": "def closest_integer(value):\n    return round(float(value))"}
{"task_id": "HumanEval/100", "solution": "def make_a_pile(n):\n    result = [n]\n    i = 1\n    while n > 0:\n        if n % 2 == 1:\n            n -= 1\n            result.append(result[-1] + 2)\n        else:\n            n -= 2\n            result.append(result[-1] + 4)\n    return result"}
{"task_id": "HumanEval/101", "solution": "def words_string(s):\n    return s.split()"}
{"task_id": "HumanEval/102", "solution": "def choose_num(x, y):\n    max_even = -1\n    for i in range(x, y+1):\n        if i % 2 == 0 and i > max_even:\n            max_even = i\n    return max_even"}
{"task_id": "HumanEval/103", "solution": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        total = sum(range(n, m+1))\n        average = round(total / (m - n + 1))\n        return bin(average)[2:]"}
{"task_id": "HumanEval/104", "solution": "def unique_digits(x):\n    return sorted([i for i in x if not any(int(digit) % 2 == 0 for digit in str(i))])"}
{"task_id": "HumanEval/105", "solution": "def by_length(arr):\n    if not arr:\n        return []\n    arr = sorted([x for x in arr if 1 <= x <= 9])\n    arr = arr[::-1]\n    return [str(x) + ' ' + ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'][x-1] for x in arr]"}
{"task_id": "HumanEval/106", "solution": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/107", "solution": "def even_odd_palindrome(n):\n    even_palindromes = 0\n    odd_palindromes = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_palindromes += 1\n            else:\n                odd_palindromes += 1\n    return (even_palindromes, odd_palindromes)"}
{"task_id": "HumanEval/108", "solution": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num < 0:\n            num = str(num)[1:]\n        else:\n            num = str(num)\n        if sum(int(digit) for digit in num) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "solution": "def move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    for i in range(len(arr)):\n        if arr[i] > arr[(i+1)%len(arr)]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "solution": "def exchange(lst1, lst2):\n    lst1.sort()\n    lst2.sort()\n    i = 0\n    j = 0\n    while i < len(lst1):\n        if j < len(lst2) and lst1[i] % 2 != 0:\n            if lst2[j] % 2 == 0:\n                lst1[i], lst2[j] = lst2[j], lst1[i]\n                i += 1\n                j += 1\n            else:\n                j += 1\n        else:\n            i += 1\n    if all(x % 2 == 0 for x in lst1):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "solution": "def histogram(test):\n    if not test:\n        return {}\n    test = test.split()\n    max_count = 0\n    max_letters = []\n    letter_count = {}\n    for letter in test:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n        if letter_count[letter] > max_count:\n            max_count = letter_count[letter]\n            max_letters = [letter]\n        elif letter_count[letter] == max_count:\n            max_letters.append(letter)\n    return {letter: count for letter, count in letter_count.items() if count in [max_count]}"}
{"task_id": "HumanEval/112", "solution": "def reverse_delete(s, c):\n    s = ''.join([i for i in s if i not in c])\n    return (s, s == s[::-1])"}
{"task_id": "HumanEval/113", "solution": "def odd_count(lst):\n    return [f\"the number of odd elements {str(i).count('1') + str(i).count('3') + str(i).count('5') + str(i).count('7') + str(i).count('9')}n the str{i}ng {i} of the {i}nput.\" for i in lst]"}
{"task_id": "HumanEval/114", "solution": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n    return min_sum"}
{"task_id": "HumanEval/115", "solution": "def max_fill(grid, capacity):\n    total_water = sum([row.count(1) for row in grid])\n    return math.ceil(total_water / capacity)"}
{"task_id": "HumanEval/116", "solution": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "solution": "def select_words(s, n):\n    words = s.split()\n    result = []\n    for word in words:\n        if len([char for char in word if char.lower() not in 'aeiou']) == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "solution": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] in vowels:\n            if word[i-1] not in vowels and word[i+1] not in vowels:\n                return word[i]\n    return ''"}
{"task_id": "HumanEval/119", "solution": "def match_parens(lst):\n    stack = []\n    for char in lst:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return 'No'\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/120", "solution": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]"}
{"task_id": "HumanEval/121", "solution": "def solution(lst):\n    return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2 != 0)"}
{"task_id": "HumanEval/122", "solution": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if len(str(abs(num))) <= 2)"}
{"task_id": "HumanEval/123", "solution": "def get_odd_collatz(n):\n    sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3*n + 1\n        sequence.append(n)\n    return sorted([x for x in sequence if x % 2 != 0])"}
{"task_id": "HumanEval/124", "solution": "def valid_date(date):\n    if not date:\n        return False\n    date = date.replace('-', '/')\n    month, day, year = map(int, date.split('/'))\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    return True"}
{"task_id": "HumanEval/125", "solution": "def split_words(txt):\n    words = txt.split()\n    if len(words) > 1:\n        return words\n    else:\n        if ',' in txt:\n            words = txt.split(',')\n            return words\n        else:\n            odd_count = 0\n            for char in txt:\n                if char.isalpha() and ord(char.lower()) % 2 != 0:\n                    odd_count += 1\n            return odd_count"}
{"task_id": "HumanEval/126", "solution": "def is_sorted(lst):\n    if len(lst) == 0:\n        return True\n    if len(lst) == 1:\n        return True\n    if len(lst) > 1 and lst[0] > lst[1]:\n        return False\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    for i in range(1, len(lst)):\n        if lst.count(lst[i]) > 1:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "solution": "def intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if start1 > end1 or start2 > end2:\n        return \"NO\"\n    if start1 > start2:\n        start1, start2 = start2, start1\n        end1, end2 = end2, end1\n    if end1 < start2:\n        return \"NO\"\n    return str((max(start1, start2), min(end1, end2)))"}
{"task_id": "HumanEval/128", "solution": "def prod_signs(arr):\n    if not arr:\n        return None\n    magnitude_sum = sum(abs(x) for x in arr)\n    sign_product = 1\n    for x in arr:\n        if x < 0:\n            sign_product *= -1\n    return magnitude_sum * sign_product"}
{"task_id": "HumanEval/129", "solution": "def minPath(grid, k):\n    N = len(grid)\n    visited = [[False]*N for _ in range(N)]\n    min_path = []\n    min_path_value = float('inf')\n    for i in range(N):\n        for j in range(N):\n            if dfs(grid, i, j, k, visited, min_path, min_path_value):\n                return min_path\n    return []\ndef dfs(grid, i, j, k, visited, path, min_path_value):\n    N = len(grid)\n    if k == 0:\n        if path not in min_path_value:\n            min_path_value = path\n        return False\n    if i < 0 or i >= N or j < 0 or j >= N or visited[i][j]:\n        return False\n    visited[i][j] = True\n    path.append(grid[i][j])\n    for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n        if dfs(grid, x, y, k-1, visited, path, min_path_value):\n            return True\n    visited[i][j] = False\n    path.pop()\n    return False"}
{"task_id": "HumanEval/130", "solution": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        sequence = [1, 3, 2]\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                sequence.append(1 + i / 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        return sequence"}
{"task_id": "HumanEval/131", "solution": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product"}
{"task_id": "HumanEval/132", "solution": "def is_nested(s):\n    stack = []\n    for char in s:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) > 0"}
{"task_id": "HumanEval/133", "solution": "def sum_squares(lst):\n    return sum([round(x)**2 for x in lst])"}
{"task_id": "HumanEval/134", "solution": "def check_if_last_char_is_a_letter(txt):\n    if len(txt) == 0:\n        return False\n    if txt[-1].isalpha():\n        if txt[-1] in ' '.join(txt.split()):\n            return False\n        else:\n            return True\n    else:\n        return False"}
{"task_id": "HumanEval/135", "solution": "def can_arrange(arr):\n    for i in range(1, len(arr)):\n        if arr[i-1] > arr[i]:\n            return i-1\n    return -1"}
{"task_id": "HumanEval/136", "solution": "def largest_smallest_integers(lst):\n    negative = [x for x in lst if x < 0]\n    positive = [x for x in lst if x > 0]\n    if negative:\n        a = max(negative)\n    else:\n        a = None\n    if positive:\n        b = min(positive)\n    else:\n        b = None\n    return (a, b)"}
{"task_id": "HumanEval/137", "solution": "def compare_one(a, b):\n    if isinstance(a, str) and isinstance(b, str):\n        if a.replace(',', '') > b.replace(',', ''):\n            return a\n        elif a.replace(',', '') < b.replace(',', ''):\n            return b\n        else:\n            return None\n    elif isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    else:\n        return None"}
{"task_id": "HumanEval/138", "solution": "def is_equal_to_sum_even(n):\n    for i in range(2, n+1, 2):\n        for j in range(i, n+1, 2):\n            for k in range(j, n+1, 2):\n                for l in range(k, n+1, 2):\n                    if i + j + k + l == n:\n                        return True\n    return False"}
{"task_id": "HumanEval/139", "solution": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        result *= math.factorial(i)\n    return result"}
{"task_id": "HumanEval/140", "solution": "def fix_spaces(text):\n    text = text.replace(\" \", \"_\")\n    while \"  \" in text:\n        text = text.replace(\"  \", \"-\")\n    return text"}
{"task_id": "HumanEval/141", "solution": "def file_name_check(file_name):\n    if len(file_name) > 255:\n        return 'No'\n    if len([char for char in file_name if char.isdigit()]) > 3:\n        return 'No'\n    if '.' not in file_name:\n        return 'No'\n    if file_name.split('.')[0][0].isalpha() == False:\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "solution": "def sum_squares(lst):\n    total = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += num ** 3\n    return total"}
{"task_id": "HumanEval/143", "solution": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)"}
{"task_id": "HumanEval/144", "solution": "def simplify(x, n):\n    # Convert the fractions to decimal numbers\n    decimal_x = float(x.split('/')[0]) / float(x.split('/')[1])\n    decimal_n = float(n.split('/')[0]) / float(n.split('/')[1])\n\n    # Multiply the decimal numbers\n    product = decimal_x * decimal_n\n\n    # Check if the product is a whole number\n    if product.is_integer():\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "solution": "def order_by_points(nums):\n    nums.sort(key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))\n    return nums"}
{"task_id": "HumanEval/146", "solution": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] % 2 != 0 and str(num)[-1] % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "solution": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            for k in range(j + 1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "solution": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n        return tuple(planets[index1+1:index2+1])"}
{"task_id": "HumanEval/149", "solution": "def sorted_list_sum(lst):\n    lst = [word for word in lst if len(word) % 2 == 0]\n    lst.sort(key=lambda x: (len(x), x))\n    return lst"}
{"task_id": "HumanEval/150", "solution": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "solution": "def double_the_difference(lst):\n    total = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            total += num ** 2\n    return total"}
{"task_id": "HumanEval/152", "solution": "def compare(scores, guesses):\n    return [abs(score - guess) for score, guess in zip(scores, guesses)]"}
{"task_id": "HumanEval/153", "solution": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        return sum(1 for char in extension if char.isupper()) - sum(1 for char in extension if char.islower())\n\n    strongest_extension = max(extensions, key=calculate_strength)\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "solution": "def cycpattern_check(s, t):\n    if len(t) > len(s):\n        return False\n    for i in range(len(s)):\n        if s[i:i+len(t)] == t:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "solution": "def even_odd_count(num):\n    num = str(abs(num))  # Convert the number to a string and remove the negative sign\n    even_count = 0\n    odd_count = 0\n    for digit in num:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "solution": "def int_to_mini_roman(number):\n    roman_numerals = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'}\n    roman = ''\n    for value in sorted(roman_numerals.keys(), reverse=True):\n        while number >= value:\n            roman += roman_numerals[value]\n            number -= value\n    return roman"}
{"task_id": "HumanEval/157", "solution": "import math\ndef right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "solution": "def find_max(words):\n    if not words:\n        return \"\"\n    max_unique = 0\n    result = \"\"\n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_unique:\n            max_unique = len(unique_chars)\n            result = word\n        elif len(unique_chars) == max_unique:\n            result = min(result, word)\n    return result"}
{"task_id": "HumanEval/159", "solution": "def eat(number, need, remaining):\n    total = number + need\n    if total > remaining:\n        return [total - (total - remaining), 0]\n    else:\n        return [total, remaining - total]"}
{"task_id": "HumanEval/160", "solution": "def do_algebra(operator, operand):\n    if len(operator) != len(operand) - 1:\n        return \"Error: Operator list must be one less than operand list\"\n    if len(operand) < 2:\n        return \"Error: Operand list must have at least two elements\"\n    if len(operator) < 1:\n        return \"Error: Operator list must have at least one element\"\n    if not all(isinstance(x, int) for x in operand):\n        return \"Error: Operand list must contain only integers\"\n    if not all(x in ['+', '-', '*', '//', '**'] for x in operator):\n        return \"Error: Operator list must contain only basic algebra operations\"\n    \n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    \n    return result"}
{"task_id": "HumanEval/161", "solution": "def solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    return result[::-1]"}
{"task_id": "HumanEval/162", "solution": "import hashlib\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "solution": "def generate_integers(a, b):\n    return sorted([i for i in range(a, b+1) if i % 2 == 0])"}
