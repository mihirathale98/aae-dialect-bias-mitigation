{"task_id": "HumanEval/0", "solution": "Here is a Python function that meets the requirements:\n\n```Python\nfrom typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n```\n\nThis function iterates over each pair of numbers in the list. If it finds a pair of numbers that are closer than the given threshold, it immediately returns True. If it doesn't find any such pair, it returns False."}
{"task_id": "HumanEval/1", "solution": "Here is a Python function that does what you described:\n\n```Python\ndef separate_paren_groups(paren_string: str) -> list[str]:\n    stack = []\n    result = []\n    temp = ''\n    for char in paren_string:\n        if char == ' ':\n            continue\n        if char == '(':\n            stack.append(char)\n            temp += char\n        elif char == ')':\n            if stack:\n                stack.pop()\n                temp += char\n                if not stack:\n                    result.append(temp)\n                    temp = ''\n            else:\n                return []\n    if stack:\n        return []\n    return result\n```\n\nThis function works by iterating over the input string. When it encounters an open parenthesis, it adds it to the stack and to the temporary string. When it encounters a close parenthesis, it removes the top of the stack and adds it to the temporary string. If the stack is empty when it encounters a close parenthesis, it means there's an unbalanced parenthesis, so it returns an empty list. If the stack is empty after it has finished iterating over the string, it means there are no unbalanced parentheses, so it returns the list of balanced parentheses."}
{"task_id": "HumanEval/2", "solution": "Here is a Python function that does what you described:\n\n```\ndef truncate_number(number: float) -> float:\n    return number - int(number)\n```\n\nThis function takes a float as an argument, subtracts the integer part of the number from the number itself, and returns the result. This effectively removes the whole number part of the number and leaves only the decimal part."}
{"task_id": "HumanEval/3", "solution": "Here is a Python function that meets the requirements:\n\n```Python\ndef below_zero(operations: list) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n```\n\nThis function takes a list of operations as input, where each operation is either a positive number (representing a deposit) or a negative number (representing a withdrawal). It then iterates over the list of operations, adding each one to the balance. If the balance ever goes below zero, it immediately returns True. If it gets through the entire list without the balance going below zero, it returns False."}
{"task_id": "HumanEval/4", "solution": "Here is a Python function that calculates the Mean Absolute Deviation (MAD) of a list of numbers:\n\n```Python\nfrom statistics import mean\nfrom typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean_value = mean(numbers)\n    return mean([abs(x - mean_value) for x in numbers])\n```\n\nThis function first calculates the mean of the list of numbers. Then, it calculates the absolute difference between each number and the mean, and finally, it calculates the mean of these differences."}
{"task_id": "HumanEval/5", "solution": "Here is a Python function that does what you described:\n\n```Python\nfrom typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    if not numbers:\n        return numbers\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result.append(delimiter)\n        result.append(num)\n    return result\n```\n\nThis function takes a list of numbers and a delimiter as input. If the list is empty, it returns the list as is. Otherwise, it creates a new list where the delimiter is inserted between each pair of numbers."}
{"task_id": "HumanEval/6", "solution": "Here is a Python function that can solve the problem:\n\n```Python\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    stack = []\n    max_depth = 0\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            max_depth += 1\n        elif char == ')':\n            stack.pop()\n            max_depth -= 1\n        if not stack:\n            result.append(max_depth)\n            max_depth = 0\n    return result\n```\n\nThis function works by iterating over the input string. When it encounters an open parenthesis, it adds it to the stack and increments the max_depth. When it encounters a close parenthesis, it removes the top of the stack and decrements the max_depth. When it encounters a close parenthesis and the stack is empty, it means that the current group of parentheses has been closed, so it adds the current max_depth to the result list and resets the max_depth."}
{"task_id": "HumanEval/7", "solution": "Here is a Python function that does what you described:\n\n```Python\ndef filter_by_substring(strings, substring):\n    return [s for s in strings if substring in s]\n```\n\nThis function uses a list comprehension to create a new list that includes only the strings from the input list that contain the given substring."}
{"task_id": "HumanEval/8", "solution": "Here is a Python function that meets the requirements:\n\n```Python\nfrom typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        total_sum = sum(numbers)\n        total_product = 1\n        for num in numbers:\n            total_product *= num\n        return total_sum, total_product\n```\n\nThis function first checks if the list is empty. If it is, it returns a tuple with 0 as the sum and 1 as the product. If the list is not empty, it calculates the sum and product of the numbers in the list and returns them as a tuple."}
{"task_id": "HumanEval/9", "solution": "Here is a Python function that does what you described:\n\n```Python\ndef rolling_max(numbers):\n    max_so_far = [numbers[0]]\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far[i-1]:\n            max_so_far.append(numbers[i])\n        else:\n            max_so_far.append(max_so_far[i-1])\n    return max_so_far\n```\n\nThis function starts by initializing a list called `max_so_far` with the first number in the input list. Then, it iterates over the rest of the numbers in the list. If the current number is greater than the last number in `max_so_far`, it adds the current number to `max_so_far`. Otherwise, it adds the last number in `max_so_far` to `max_so_far`. Finally, it returns `max_so_far`."}
{"task_id": "HumanEval/10", "solution": "Here is a Python function that does what you described:\n\n```Python\ndef make_palindrome(s: str) -> str:\n    if s == s[::-1]:\n        return s\n    else:\n        return s + s[::-1]\n```\n\nThis function checks if the input string is a palindrome. If it is, it returns the string as is. If it's not, it returns the string with the reverse of the string appended to the end."}
{"task_id": "HumanEval/11", "solution": "Here is a Python function that performs the binary XOR operation on two strings:\n\n```\ndef string_xor(a: str, b: str) -> str:\n    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n```\n\nThis function takes two strings as input, and then iterates over each character in the strings. If the characters at the current position are the same, it adds a '0' to the result string. If they are different, it adds a '1'. Finally, it returns the result string."}
{"task_id": "HumanEval/12", "solution": "Here is a Python function that meets the requirements:\n\n```Python\nfrom typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return min(strings, key=len)\n```\n\nThis function takes a list of strings as input and returns the shortest string in the list. If the list is empty, it returns None."}
{"task_id": "HumanEval/13", "solution": "Here is a Python function that calculates the greatest common divisor (GCD) of two integers:\n\n```Python\ndef greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a\n```\n\nThis function works by repeatedly replacing `a` with `b` and `b` with the remainder of `a` divided by `b`, until `b` is 0. At that point, `a` is the GCD of the original `a` and `b`."}
{"task_id": "HumanEval/14", "solution": "Here is a Python function that does what you asked for:\n\n```Python\ndef all_prefixes(s: str) -> list:\n    prefixes = []\n    for i in range(1, len(s) + 1):\n        prefixes.append(s[:i])\n    return prefixes\n```\n\nThis function works by looping over the string from the start to the end, and for each position, it adds the substring from the start to that position to the list of prefixes."}
{"task_id": "HumanEval/15", "solution": "Here is a Python function that meets the requirements:\n\n```\ndef string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))\n```\n\nThis function takes an integer `n` as input and returns a string of all numbers from 0 to `n` inclusive. The `range(n+1)` function generates a sequence of numbers from 0 to `n`, and the `str(i) for i in range(n+1)` expression converts each number to a string. The `' '.join(...)` function then concatenates these strings together with spaces in between."}
{"task_id": "HumanEval/16", "solution": "Here is a Python function that counts the number of unique characters in a string, ignoring case:\n\n```\ndef count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n```\n\nThis function works by converting the string to lowercase and then converting it to a set, which is an unordered collection of unique elements. The length of the set is then returned, which is the number of unique characters in the string."}
{"task_id": "HumanEval/17", "solution": "Here is a Python function that can solve the problem:\n\n```Python\ndef parse_music(music_string: str) -> list:\n    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats\n```\n\nThis function splits the input string into individual notes, then checks each note to determine how many beats it lasts. It then adds the number of beats to a list, which is returned at the end."}
{"task_id": "HumanEval/18", "solution": "Here is a Python function that does what you described:\n\n```\ndef how_many_times(string: str, substring: str) -> int:\n    return string.count(substring)\n```\n\nThis function uses the built-in `count` method of the string class in Python, which returns the number of occurrences of the substring in the string."}
{"task_id": "HumanEval/19", "solution": "Here is a Python function that does what you described:\n\n```Python\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    nums = numbers.split()\n    nums.sort(key=lambda x: num_dict[x])\n    return ' '.join(nums)\n```\n\nThis function first creates a dictionary that maps the string representations of the numbers to their corresponding integer values. It then splits the input string into a list of strings, sorts the list based on the dictionary values, and finally joins the list back into a string with spaces in between."}
{"task_id": "HumanEval/20", "solution": "Here is a Python function that does what you asked for:\n\n```Python\nfrom typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two numbers\")\n    numbers.sort()\n    return (numbers[0], numbers[1])\n```\n\nThis function first checks if the list has at least two numbers. If not, it raises a ValueError. Then it sorts the list in ascending order. Finally, it returns the first two numbers in the sorted list, which are the two numbers that are closest to each other."}
{"task_id": "HumanEval/21", "solution": "Here is a Python function that normalizes a list of numbers to the range [0, 1]:\n\n```Python\nfrom typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two numbers\")\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]\n```\n\nThis function first checks if the list has at least two numbers. If not, it raises a ValueError. Then it calculates the minimum and maximum values in the list. Finally, it normalizes each number in the list by subtracting the minimum value and dividing by the range of the list."}
{"task_id": "HumanEval/22", "solution": "Here is a Python function that does what you asked for:\n\n```Python\nfrom typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]\n```\n\nThis function uses a list comprehension to create a new list that only includes the integers from the input list. The `isinstance(value, int)` function is used to check if each value in the list is an integer."}
{"task_id": "HumanEval/23", "solution": "Here is a Python function that meets the requirements:\n\n```\ndef strlen(string: str) -> int:\n    return len(string)\n```\n\nThis function takes a string as an argument and returns the length of the string."}
{"task_id": "HumanEval/24", "solution": "Here is a Python function that does what you asked for:\n\n```\ndef largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n```\n\nThis function works by starting from the number n-1 and going down to 1. It checks each number to see if it is a divisor of n. If it finds a divisor, it returns that number."}
{"task_id": "HumanEval/25", "solution": "Here is a Python function that does what you asked for:\n\n```Python\ndef factorize(n: int) -> list:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n```\n\nThis function works by dividing the input number `n` by the smallest prime number (2) as long as it is divisible. Then it increments the divisor until it finds the next number that can divide `n`, which will be a prime number. This process continues until `n` is reduced to 1. The list of divisors is then returned as the list of prime factors."}
{"task_id": "HumanEval/26", "solution": "Here is a Python function that does what you asked for:\n\n```Python\nfrom collections import OrderedDict\n\ndef remove_duplicates(numbers):\n    return list(OrderedDict.fromkeys(numbers))\n```\n\nThis function uses the `OrderedDict.fromkeys()` function to create an ordered dictionary from the input list. This dictionary will only contain unique elements, and the order of the elements will be the same as in the input list. The `list()` function is then used to convert the dictionary back into a list."}
{"task_id": "HumanEval/27", "solution": "Here is a Python function that does the task:\n\n```Python\ndef flip_case(s: str) -> str:\n    return s.swapcase()\n```\n\nThis function uses the built-in `swapcase()` function in Python, which swaps the case of all characters in the string."}
{"task_id": "HumanEval/28", "solution": "Here is a Python function that does what you asked for:\n\n```\ndef concatenate(strings: list) -> str:\n    return ''.join(strings)\n```\n\nThis function takes a list of strings as an argument and returns a single string that is the concatenation of all the strings in the list."}
{"task_id": "HumanEval/29", "solution": "Here is a Python function that does what you described:\n\n```Python\ndef filter_by_prefix(strings, prefix):\n    return [s for s in strings if s.startswith(prefix)]\n```\n\nThis function uses a list comprehension to create a new list that includes only the strings from the input list that start with the specified prefix. The `startswith` method is used to check if a string starts with a certain prefix."}
{"task_id": "HumanEval/30", "solution": "Here is a Python function that does what you described:\n\n```\ndef get_positive(l: list) -> list:\n    return [i for i in l if i > 0]\n```\n\nThis function uses a list comprehension to create a new list that only includes the positive numbers from the input list."}
{"task_id": "HumanEval/31", "solution": "Here is a Python function that checks if a number is prime:\n\n```\ndef is_prime(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n```\n\nThis function works by first checking if the number is less than or equal to 1, in which case it is not prime. Then it checks if the number is less than or equal to 3, in which case it is prime. Then it checks if the number is divisible by 2 or 3, in which case it is not prime. Finally, it checks if the number is divisible by any odd number up to its square root, in which case it is not prime. If none of these conditions are met, then the number is prime."}
{"task_id": "HumanEval/32", "solution": "Here is a Python function that will solve the problem:\n\n```Python\nimport math\n\ndef find_zero(xs: list):\n    if len(xs) % 2 != 0:\n        raise ValueError(\"xs must have an even number of coefficients\")\n    if abs(xs[0]) < abs(xs[-1]):\n        raise ValueError(\"xs must have the largest non-zero coefficient as the first element\")\n\n    def poly(xs, x):\n        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n    def find_zero(xs, x0, x1, tol=1e-5):\n        while abs(x1 - x0) > tol:\n            x2 = x0 - poly(xs, x0) / poly([i * coeff for i, coeff in enumerate(xs)], x0)\n            x0, x1 = x1, x2\n        return x0\n\n    return find_zero(xs, -10, 10)\n```\n\nThis function first checks if the input list has an even number of coefficients and if the largest non-zero coefficient is the first element. Then it defines a helper function to evaluate the polynomial at a given point and another helper function to find the root of the polynomial using the Newton-Raphson method. Finally, it calls the helper function to find the root of the polynomial."}
{"task_id": "HumanEval/33", "solution": "Here is a Python function that does what you described:\n\n```Python\ndef sort_third(l):\n    return [x if i % 3 != 0 else sorted([x for x in l if x % 3 != 0])[i % 3] for i, x in enumerate(l)]\n```\n\nThis function works by iterating over the input list `l` and checking if the index `i` is divisible by 3. If it is, it sorts the list of elements that are not divisible by 3 and takes the element at the same index `i` in the sorted list. If `i` is not divisible by 3, it just takes the element at that index from the original list."}
{"task_id": "HumanEval/34", "solution": "Here is a Python function that will sort the elements in a list and return the sorted list:\n\n```\ndef unique(l: list):\n    return sorted(l)\n```\n\nThis function takes a list as an argument and returns a new list that is sorted in ascending order."}
{"task_id": "HumanEval/35", "solution": "Here is a Python function that will return the maximum element in a list:\n\n```\ndef max_element(l: list) -> int:\n    return max(l)\n```\n\nThis function uses the built-in Python function `max()` to find the maximum element in the list."}
{"task_id": "HumanEval/36", "solution": "Here is a Python function that meets the requirements:\n\n```Python\ndef fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n```\n\nThis function works by iterating over all integers less than `n`, checking if they are divisible by 11 or 13, and if they are, it counts the number of times the digit 7 appears in the integer. The function then returns the total count."}
{"task_id": "HumanEval/37", "solution": "Here is a Python function that does what you described:\n\n```Python\ndef sort_even(l):\n    return [x if i % 2 == 0 else sorted([x for x in l if i % 2 == 0])[i//2] for i, x in enumerate(l)]\n```\n\nThis function works by iterating over the input list `l` and checking if the index `i` is even or odd. If `i` is even, it takes the value at that index in `l`. If `i` is odd, it takes the value at the same index in the sorted list of even values in `l`."}
{"task_id": "HumanEval/38", "solution": "Here is a Python function that can be used to decode a string that was encoded using the `encode_cyclic` function:\n\n```Python\ndef decode_cyclic(s: str):\n    decoded = \"\"\n    i = 0\n    while i < len(s):\n        if i + 2 < len(s):\n            decoded += s[i+1] + s[i] + s[i+2]\n            i += 3\n        else:\n            decoded += s[i+1] + s[i]\n            i += 2\n    return decoded\n```\n\nThis function works by iterating over the input string and adding the characters to the decoded string in the correct order. If the string has a length that is not a multiple of 3, it will add the remaining characters to the decoded string."}
{"task_id": "HumanEval/39", "solution": "Here is a Python function that meets the requirements:\n\n```Python\ndef prime_fib(n: int) -> int:\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n: int) -> int:\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n):\n                a, b = b, a + b\n            return b\n\n    i = 1\n    while True:\n        num = fibonacci(i)\n        if is_prime(num):\n            if i == n:\n                return num\n            i += 1\n```\n\nThis function first defines helper functions to check if a number is prime and to generate the nth Fibonacci number. Then it enters a loop that keeps generating Fibonacci numbers until it finds the nth one that is also prime."}
{"task_id": "HumanEval/40", "solution": "Here is a Python function that checks if there are three different numbers in a list that add up to zero:\n\n```Python\ndef triples_sum_to_zero(lst):\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            for k in range(j+1, len(lst)):\n                if lst[i] + lst[j] + lst[k] == 0:\n                    return True\n    return False\n```\n\nThis function works by iterating over each number in the list, and then checking if there are two other numbers in the list that add up to the negative of the current number. If it finds such a pair, it returns True. If it doesn't find any such pair, it returns False."}
{"task_id": "HumanEval/41", "solution": "Here is a Python function that calculates the number of collisions between two sets of n cars moving in opposite directions:\n\n```\ndef car_race_collision(n: int) -> int:\n    return n * (n - 1) // 2\n```\n\nThis function calculates the number of collisions by using the formula for the number of combinations of n items taken 2 at a time, which is n*(n-1)/2. This is because each car in the first set of n cars will collide with each car in the second set of n cars, except for the last car in the first set which will not collide with the first car in the second set."}
{"task_id": "HumanEval/42", "solution": "Here is a Python function that does what you described:\n\n```\ndef incr_list(l: list) -> list:\n    return [i + 1 for i in l]\n```\n\nThis function takes a list of numbers as input and returns a new list where each number has 1 added to it."}
{"task_id": "HumanEval/43", "solution": "Here is a Python function that meets the requirements:\n\n```\ndef pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n```\n\nThis function iterates over the list of numbers and checks each pair of numbers to see if their sum is equal to zero. If it finds a pair that sums to zero, it immediately returns True. If it doesn't find any such pair, it returns False."}
{"task_id": "HumanEval/44", "solution": "Here is a Python function that converts an integer to a different base:\n\n```\ndef change_base(x: int, base: int):\n    convertString = \"0123456789ABCDEF\"\n    result = \"\"\n\n    while x > 0:\n        result = convertString[x % base] + result\n        x = x // base\n\n    return result\n```\n\nThis function works by repeatedly dividing the input number by the base and appending the remainder to the result string. The remainder is converted to a character using the `convertString` variable. The process is repeated until the input number is 0."}
{"task_id": "HumanEval/45", "solution": "Here is a Python function that calculates the area of a triangle given the length and height:\n\n```\ndef triangle_area(a, h):\n    return 0.5 * a * h\n```\n\nYou can use this function to calculate the area of a triangle by passing the length and height as arguments. For example, if you want to calculate the area of a triangle with a length of 5 and a height of 3, you would use the following code:\n\n```\nprint(triangle_area(5, 3))\n```\n\nThis would output 7.5, which is the area of the triangle."}
{"task_id": "HumanEval/46", "solution": "Here is a Python function that calculates the nth element of the Fib4 sequence:\n\n```Python\ndef fib4(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n+1):\n            a, b, c, d = b, c, d, a+b+c\n        return d\n```\n\nThis function first checks for the base cases of the sequence, then uses a loop to calculate the nth element. It keeps track of the last four elements of the sequence and updates them in each iteration of the loop."}
{"task_id": "HumanEval/47", "solution": "Here is a Python function that calculates the median of a list:\n\n```\ndef median(lst):\n    lst.sort()\n    if len(lst) % 2 == 0:\n        return (lst[len(lst)//2 - 1] + lst[len(lst)//2]) / 2\n    else:\n        return lst[len(lst)//2]\n```\n\nThis function first sorts the list. If the length of the list is even, it calculates the median as the average of the two middle numbers. If the length of the list is odd, it calculates the median as the middle number."}
{"task_id": "HumanEval/48", "solution": "Here is a Python function that checks if a given string is a palindrome:\n\n```\ndef is_palindrome(text: str) -> bool:\n    return text == text[::-1]\n```\n\nThis function works by comparing the input string with its reverse. If they are the same, then the string is a palindrome and the function returns True. Otherwise, it returns False."}
{"task_id": "HumanEval/49", "solution": "Here is a Python function that meets the requirements:\n\n```Python\ndef modp(n: int, p: int) -> int:\n    return pow(2, n, p)\n```\n\nThis function uses Python's built-in `pow` function, which can be used to calculate the power of a number and then take the modulus of the result. The `pow` function takes three arguments: the base, the exponent, and the modulus."}
{"task_id": "HumanEval/50", "solution": "Here is a Python function that can be used to decode the string:\n\n```\ndef decode_shift(s: str):\n    decoded_string = \"\"\n    for ch in s:\n        if ch.isalpha():\n            if ch.islower():\n                decoded_string += chr((ord(ch) - 5 - ord('a')) % 26 + ord('a'))\n            else:\n                decoded_string += chr((ord(ch) - 5 - ord('A')) % 26 + ord('A'))\n        else:\n            decoded_string += ch\n    return decoded_string\n```\n\nThis function works by iterating over each character in the string. If the character is a letter, it shifts it back by 5 positions in the alphabet. If the character is not a letter, it leaves it as is."}
{"task_id": "HumanEval/51", "solution": "Here is a Python function that removes all vowels from a given string:\n\n```\ndef remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])\n```\n\nThis function works by iterating over each character in the input string. If the character is not a vowel, it is added to the output string. The output string is then returned."}
{"task_id": "HumanEval/52", "solution": "Here is a Python function that meets the requirements:\n\n```\ndef below_threshold(lst, threshold):\n    return all(i < threshold for i in lst)\n```\n\nThis function takes a list of numbers and a threshold as input. It then checks if all numbers in the list are less than the threshold. If they are, it returns True; otherwise, it returns False."}
{"task_id": "HumanEval/53", "solution": "Here is a Python function that meets the requirements:\n\n```\ndef add(x: int, y: int) -> int:\n    return x + y\n```\n\nThis function takes two integers, x and y, and returns their sum."}
{"task_id": "HumanEval/54", "solution": "Here is a Python function that does what you described:\n\n```\ndef same_chars(s0: str, s1: str) -> bool:\n    return sorted(s0) == sorted(s1)\n```\n\nThis function works by sorting the characters in each string and comparing the sorted lists. If the sorted lists are equal, then the original strings have the same characters, regardless of their order."}
{"task_id": "HumanEval/55", "solution": "Here is a Python function that calculates the nth Fibonacci number:\n\n```\ndef fib(n: int) -> int:\n    if n <= 0:\n        return \"Input should be a positive integer.\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n```\n\nThis function first checks if the input is less than or equal to 0, in which case it returns an error message. If the input is 1 or 2, it returns 0 and 1 respectively, as these are the first two Fibonacci numbers. For any other input, it calculates the nth Fibonacci number using a loop."}
{"task_id": "HumanEval/56", "solution": "Here is a Python function that checks if all opening brackets have a matching closing bracket:\n\n```\ndef correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n```\n\nThis function uses a stack to keep track of the opening brackets. When it encounters a closing bracket, it checks if the stack is empty. If it is, it means there is no matching opening bracket, so it returns False. If the stack is not empty, it pops the opening bracket from the stack. At the end of the function, it checks if the stack is empty. If it is, it means all opening brackets had a matching closing bracket, so it returns True. If the stack is not empty, it means there are unmatched opening brackets, so it returns False."}
{"task_id": "HumanEval/57", "solution": "Here is a Python function that does what you described:\n\n```\ndef monotonic(lst):\n    if len(lst) < 2:\n        return True\n    if lst[0] <= lst[1]:\n        for i in range(1, len(lst) - 1):\n            if lst[i] <= lst[i+1]:\n                continue\n            else:\n                return False\n        return True\n    else:\n        return False\n```\n\nThis function checks if the list of numbers is either increasing or decreasing. It first checks if the list has less than two elements, in which case it returns True. Then it checks if the first element is less than or equal to the second element. If it is, it then checks each subsequent pair of elements to see if they are in increasing order. If it finds a pair that is not in increasing order, it returns False. If it checks all the elements and doesn't find any that are not in increasing order, it returns True."}
{"task_id": "HumanEval/58", "solution": "Here is a Python function that does what you described:\n\n```\ndef common(l1, l2):\n    return list(set(l1) & set(l2))\n```\n\nThis function takes two lists as input, converts them to sets, and then returns the intersection of the two sets. The intersection of two sets is the set of elements that are common to both sets."}
{"task_id": "HumanEval/59", "solution": "Here is a Python function that finds the largest prime factor of a given number:\n\n```Python\ndef largest_prime_factor(n: int) -> int:\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    for i in range(n, 1, -1):\n        if n % i == 0 and is_prime(i):\n            return i\n```\n\nThis function works by checking each number from `n` down to 2 to see if it is a prime factor of `n`. It uses a helper function `is_prime` to check if a number is prime. The function returns the largest prime factor it finds."}
{"task_id": "HumanEval/60", "solution": "Here is a Python function that calculates the sum of all numbers from 1 to n:\n\n```\ndef sum_to_n(n: int) -> int:\n    return sum(range(1, n+1))\n```\n\nThis function uses the built-in Python function `sum` to add up all the numbers from 1 to n. The `range` function is used to generate a sequence of numbers from 1 to n. The `+1` is used to include n in the sequence."}
{"task_id": "HumanEval/61", "solution": "Here is a Python function that checks if each opening bracket has a corresponding closing bracket:\n\n```\ndef correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n```\n\nThis function uses a stack to keep track of the opening brackets. When it encounters a closing bracket, it checks if the stack is empty. If it is, it means there is no corresponding opening bracket, so it returns False. If the stack is not empty, it pops the opening bracket from the stack. At the end of the function, it checks if the stack is empty. If it is, it means all opening brackets have corresponding closing brackets, so it returns True. If the stack is not empty, it means there are some opening brackets without corresponding closing brackets, so it returns False."}
{"task_id": "HumanEval/62", "solution": "Here is a Python function that calculates the coefficients of a polynomial given a list of coefficients:\n\n```Python\ndef derivative(xs):\n    n = len(xs)\n    result = [0] * (n + 1)\n    result[n] = xs[0]\n    for i in range(n - 1, 0, -1):\n        result[i] = xs[i] + result[i + 1] * i\n    return result\n```\n\nThis function works by initializing a list of coefficients with all elements set to 0, except for the last element which is set to the first element of the input list. Then it iterates over the input list from right to left, updating each element of the result list by adding the current element of the input list to the current element of the result list times the current index."}
{"task_id": "HumanEval/63", "solution": "Here is a Python function that calculates the nth Fibonacci-like sequence number efficiently:\n\n```Python\ndef fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(2, n):\n            a, b, c = b, c, a + b + c\n        return c\n```\n\nThis function first checks if the input number is less than or equal to 1, in which case it returns 0. If the input number is 2, it returns 1. For any other number, it calculates the nth Fibonacci-like sequence number by initializing three variables a, b, and c to 0, 0, and 1 respectively. It then enters a loop that runs n-2 times, updating the values of a, b, and c in each iteration. Finally, it returns the value of c, which is the nth Fibonacci-like sequence number."}
{"task_id": "HumanEval/64", "solution": "Here is a Python function that meets the requirements:\n\n```\ndef vowels_count(s):\n    vowels = 'aeiou'\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            if char.lower() == 'y' and s[-1].lower() == 'y':\n                count += 1\n            else:\n                count += 1\n    return count\n```\n\nThis function works by iterating over each character in the input string. If the character is a vowel (either 'a', 'e', 'i', 'o', or 'u'), it increments the count. If the character is 'y' and it's the last character in the string, it also increments the count. Finally, it returns the count of vowels in the string."}
{"task_id": "HumanEval/65", "solution": "Here is a Python function that does what you described:\n\n```\ndef circular_shift(x, shift):\n    if shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[shift:] + str(x)[:shift]\n```\n\nThis function first checks if the shift is greater than the number of digits in the input number. If it is, it returns the reversed string of the input number. If the shift is not greater than the number of digits, it returns a new string that is the input number shifted by the specified number of digits."}
{"task_id": "HumanEval/66", "solution": "Here is a Python function that meets the requirements:\n\n```\ndef digitSum(s):\n    return sum(ord(c) - 96 for c in s if c.isupper())\n```\n\nThis function works by iterating over each character in the string. If the character is an uppercase letter, it subtracts 96 from the ASCII value of the character (since the ASCII values of uppercase letters start at 65 and lowercase letters start at 97) and adds it to the total sum. The `ord` function is used to get the ASCII value of a character."}
{"task_id": "HumanEval/67", "solution": "Here is a Python function that does what you described:\n\n```\ndef fruit_distribution(s, n):\n    words = s.split()\n    apples = int(words[1].split(' ')[0])\n    oranges = int(words[3].split(' ')[0])\n    return n - apples - oranges\n```\n\nThis function takes a string `s` and an integer `n` as arguments. It splits the string into words, then finds the number of apples and oranges by splitting the words that contain the numbers. Finally, it returns the difference between `n` and the sum of the apples and oranges."}
{"task_id": "HumanEval/68", "solution": "Here is a Python function that meets the requirements:\n\n```\ndef pluck(arr):\n    if not arr:\n        return []\n    min_even = min([x for x in arr if x % 2 == 0])\n    return [arr.index(min_even), 1]\n```\n\nThis function first checks if the input list is empty. If it is, it returns an empty list. If the list is not empty, it finds the smallest even number in the list using a list comprehension. It then returns a list containing the index of the smallest even number and 1."}
{"task_id": "HumanEval/69", "solution": "Here is a Python function that meets the requirements:\n\n```\ndef search(lst):\n    max_num = max(lst)\n    for num in set(lst):\n        if lst.count(num) >= num:\n            return num\n    return -1\n```\n\nThis function first finds the maximum number in the list. Then, it iterates over the unique numbers in the list (to avoid counting the same number multiple times). If the count of a number is greater than or equal to the number itself, the function returns that number. If no such number is found, the function returns -1."}
{"task_id": "HumanEval/70", "solution": "Here's a Python function that implements the \"Alternate Sort\" functionality:\n\n```\ndef strange_sort_list(lst):\n    if len(lst) == 0:\n        return []\n    elif len(lst) == 1:\n        return lst\n    else:\n        sorted_lst = sorted(lst)\n        result = []\n        i = 0\n        j = len(lst) - 1\n        while i <= j:\n            result.append(sorted_lst[i])\n            if i < j:\n                result.append(sorted_lst[j])\n            i += 1\n            j -= 1\n        return result\n```\n\nThis function first checks if the list is empty or has only one element. If it's empty, it returns an empty list. If it has only one element, it returns the list as is. If the list has more than one element, it sorts the list and then alternates between the smallest and largest elements to create the result."}
{"task_id": "HumanEval/71", "solution": "Here is a Python function that meets the requirements:\n\n```Python\nimport math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1\n```\n\nThis function first checks if the sides can form a valid triangle. If they can, it calculates the area of the triangle using Heron's formula and returns it rounded to 2 decimal places. If the sides cannot form a valid triangle, it returns -1."}
{"task_id": "HumanEval/72", "solution": "Here is a Python function that meets the requirements:\n\n```Python\ndef will_it_fly(q, w):\n    if q == q[::-1]:  # Check if q is balanced\n        if sum(q) <= w:  # Check if the sum of q's elements is less than or equal to w\n            return True\n        else:\n            return False\n    else:\n        return False\n```\n\nThis function first checks if the input list `q` is balanced by comparing it to its reverse. If it is balanced, it then checks if the sum of the elements in `q` is less than or equal to `w`. If both conditions are met, it returns `True`, indicating that `q` can fly. If either condition is not met, it returns `False`, indicating that `q` cannot fly."}
{"task_id": "HumanEval/73", "solution": "Here is a Python function that solves the problem:\n\n```Python\ndef smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes\n```\n\nThis function works by comparing elements from the start and end of the array, moving towards the center. If it finds a pair of elements that are not equal, it increments the count of changes. It continues this process until it has checked all elements in the array. The function then returns the total count of changes."}
{"task_id": "HumanEval/74", "solution": "Here is a Python function that meets the requirements:\n\n```Python\ndef total_match(lst1, lst2):\n    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    if total_chars1 < total_chars2:\n        return lst1\n    elif total_chars1 > total_chars2:\n        return lst2\n    else:\n        return lst1\n```\n\nThis function calculates the total number of characters in each list, and then compares them. If the first list has fewer characters, it returns the first list. If the second list has fewer characters, it returns the second list. If both lists have the same number of characters, it returns the first list."}
{"task_id": "HumanEval/75", "solution": "Here is a Python function that checks if a number is the product of exactly 3 prime numbers:\n\n```Python\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a + 1):\n        if a % i == 0:\n            factors.append(i)\n    factors.sort()\n\n    if len(factors) != 3:\n        return False\n\n    for factor in factors:\n        if not is_prime(factor):\n            return False\n\n    return True\n```\n\nThis function first checks if the number is divisible by any number from 2 to the number itself. If it is, then that number is a factor of the original number. It then checks if the number of factors is exactly 3. If it is, then it checks if each of the factors is a prime number. If all of these conditions are met, then the function returns True; otherwise, it returns False."}
{"task_id": "HumanEval/76", "solution": "Here is a Python function that checks if a number is a simple power of another number:\n\n```\ndef is_simple_power(x, n):\n    if x == 1:\n        return True\n    for i in range(2, int(x**0.5) + 1):\n        if n**i == x:\n            return True\n    return False\n```\n\nThis function works by checking if x is equal to 1, which is a simple power of any number. If not, it checks if x is equal to n raised to any power from 2 to the square root of x. If it finds a match, it returns True. If it doesn't find a match, it returns False."}
{"task_id": "HumanEval/77", "solution": "Here is a Python function that meets the requirements:\n\n```\ndef iscube(a):\n    for i in range(1, int(a**0.3333) + 1):\n        if i**3 == a:\n            return True\n    return False\n```\n\nThis function works by iterating over all integers from 1 to the cube root of the input number. If it finds an integer that, when cubed, equals the input number, it returns True. If it doesn't find such an integer, it returns False."}
{"task_id": "HumanEval/78", "solution": "Here is a Python function that counts the number of prime hexadecimal digits in a given string:\n\n```Python\ndef hex_key(num):\n    primes = set([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 221, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 637, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 913, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997])\n    count = 0\n    for char in num:\n        if char in 'BDF':\n            count += 1\n        elif char in primes:\n            count += 1\n    return count\n```\n\nThis function works by iterating over each character in the input string. If the character is 'B', 'D', or 'F', it counts it as a prime. If the character is a digit, it checks if the digit is in the set of prime numbers. If it is, it counts it as a prime. Finally, it returns the total count of prime characters."}
{"task_id": "HumanEval/79", "solution": "Here is a Python function that does what you asked for:\n\n```\ndef decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\"\n```\n\nThis function first converts the decimal number to binary using the built-in `bin()` function. The `[2:]` is used to remove the '0b' prefix that `bin()` adds to the binary number. Then it adds 'db' at the start and end of the binary number and returns the result."}
{"task_id": "HumanEval/80", "solution": "Here is a Python function that meets the requirements:\n\n```\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) < 3:\n            return False\n    return True\n```\n\nThis function first checks if the length of the string is less than 3. If it is, it returns False. Then it iterates over the string, checking if any three consecutive characters are the same. If it finds any, it returns False. If it doesn't find any, it returns True."}
{"task_id": "HumanEval/81", "solution": "Here is a Python function that will solve the problem:\n\n```\ndef numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n```\n\nThis function takes a list of GPAs as input and returns a list of letter grades. It iterates over each GPA in the list and checks which letter grade it corresponds to based on the provided table."}
{"task_id": "HumanEval/82", "solution": "Here is a Python function that checks if the length of a string is a prime number:\n\n```Python\ndef prime_length(s):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(s))\n```\n\nThis function first defines a helper function `is_prime` that checks if a number is prime. It then uses this helper function to check if the length of the input string is prime."}
{"task_id": "HumanEval/83", "solution": "Here is a Python function that counts the number of n-digit positive integers that start or end with 1:\n\n```\ndef starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count\n```\n\nThis function works by looping over all n-digit positive integers, converting each integer to a string, and checking if the first or last character of the string is '1'. If it is, it increments the count. Finally, it returns the count."}
{"task_id": "HumanEval/84", "solution": "Here is a Python function that meets the requirements:\n\n```Python\ndef solve(N):\n    # Convert N to binary\n    binary = bin(N)[2:]\n    # Calculate the sum of the digits in binary\n    sum_of_digits = sum(int(digit) for digit in binary)\n    # Convert the sum to binary\n    binary_sum = bin(sum_of_digits)[2:]\n    return binary_sum\n```\n\nThis function first converts the input number N to binary. It then calculates the sum of the digits in the binary representation of N. Finally, it converts the sum to binary and returns it as a string."}
{"task_id": "HumanEval/85", "solution": "Here is a Python function that does what you described:\n\n```\ndef add(lst):\n    return [i for i in lst if i % 2 == 0 and lst.index(i) % 2 != 0]\n```\n\nThis function uses a list comprehension to create a new list that includes only the even numbers in the input list that are at odd indices. The `index` method is used to find the index of each number in the list, and the `if` condition checks if the number is even and if its index is odd."}
{"task_id": "HumanEval/86", "solution": "Here is a Python function that does what you described:\n\n```\nimport random\n\ndef anti_shuffle(s):\n    words = s.split()\n    result = []\n    for word in words:\n        result.append(''.join(sorted(word)))\n    return ' '.join(result)\n```\n\nThis function splits the input string into words, then sorts the letters in each word in ascending order of their ASCII values. It then joins the sorted words back together with spaces in between."}
{"task_id": "HumanEval/87", "solution": "Here is a Python function that meets the requirements:\n\n```Python\ndef get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coordinates.append((i, j))\n    return coordinates\n```\n\nThis function iterates over each element in the 2D list. If the element matches the target value `x`, it adds the coordinates of that element to the `coordinates` list. Finally, it returns the `coordinates` list."}
{"task_id": "HumanEval/88", "solution": "Here is a Python function that meets the requirements:\n\n```Python\ndef sort_array(array):\n    if len(array) == 0:\n        return array\n    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)\n```\n\nThis function first checks if the array is empty. If it is, it returns the array as is. If the array is not empty, it checks if the sum of the first and last elements is even. If it is, it sorts the array in ascending order. If the sum is odd, it sorts the array in descending order."}
{"task_id": "HumanEval/89", "solution": "Here is a Python function that implements the described functionality:\n\n```\ndef encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 97 if char.islower() else 65\n            result += chr((ord(char) - ascii_offset + 4) % 26 + ascii_offset)\n        else:\n            result += char\n    return result\n```\n\nThis function works by iterating over each character in the input string. If the character is a letter, it calculates the ASCII value of the character 4 positions down the alphabet. If the character is not a letter, it leaves it as is. The function then returns the encrypted string."}
{"task_id": "HumanEval/90", "solution": "Here is a Python function that meets the requirements:\n\n```\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    if len(set(lst)) == 1:\n        return None\n    return lst[1]\n```\n\nThis function first checks if the list has less than two elements. If it does, it returns None. Then it sorts the list. If all elements in the list are the same, it returns None. Otherwise, it returns the second smallest number in the list."}
{"task_id": "HumanEval/91", "solution": "Here is a Python function that counts the number of sentences that start with \"I\":\n\n```\ndef is_bored(S):\n    sentences = S.split('. ')\n    count = 0\n    for sentence in sentences:\n        if sentence and sentence[0].lower() == 'i':\n            count += 1\n    return count\n```\n\nThis function splits the input string into sentences, then checks each sentence to see if it starts with \"I\" (case-insensitive). It counts the number of sentences that start with \"I\" and returns this count."}
{"task_id": "HumanEval/92", "solution": "Here is a Python function that meets the requirements:\n\n```\ndef any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or x == z + y or y == x + z\n    else:\n        return False\n```\n\nThis function first checks if all three input numbers are integers. If they are, it checks if any of the numbers are equal to the sum of the other two. If any of these conditions are met, it returns True. If none of these conditions are met, it returns False."}
{"task_id": "HumanEval/93", "solution": "Here is a Python function that does what you described:\n\n```Python\ndef encode(message):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in message:\n        if char in vowels:\n            if char.islower():\n                result += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                result += chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            result += char\n    return result\n```\n\nThis function goes through each character in the input message. If the character is a vowel, it shifts it two positions ahead in the alphabet. If the character is not a vowel, it leaves it as is. The function then returns the modified message."}
{"task_id": "HumanEval/94", "solution": "Here is a Python function that does what you described:\n\n```Python\ndef skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum(int(digit) for digit in str(max_prime))\n```\n\nThis function first defines a helper function `is_prime` to check if a number is prime. Then it iterates over the list to find the largest prime number. Finally, it returns the sum of the digits of the largest prime number."}
{"task_id": "HumanEval/95", "solution": "Here is a Python function that meets the requirements:\n\n```Python\ndef check_dict_case(d):\n    if not d:\n        return False\n    for key in d:\n        if not isinstance(key, str):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n```\n\nThis function first checks if the dictionary is empty. If it is, it returns False. Then it checks each key in the dictionary. If any key is not a string, it returns False. If any key is neither all lowercase nor all uppercase, it returns False. If all keys are either all lowercase or all uppercase, it returns True."}
{"task_id": "HumanEval/96", "solution": "Here is a Python function that meets the requirements:\n\n```Python\ndef count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, n) if is_prime(i)]\n    return primes\n```\n\nThis function first defines a helper function `is_prime` that checks if a number is prime. It then uses a list comprehension to generate a list of all prime numbers less than `n`. The function then returns this list."}
{"task_id": "HumanEval/97", "solution": "Here is a Python function that meets the requirements:\n\n```\ndef multiply(a, b):\n    return (a % 10) * (b % 10)\n```\n\nThis function takes two numbers, `a` and `b`, and returns the product of their unit digits. The `%` operator is used to get the last digit of each number."}
{"task_id": "HumanEval/98", "solution": "Here is a Python function that meets the requirements:\n\n```\ndef count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in 'AEIOU':\n            count += 1\n    return count\n```\n\nThis function iterates over the string `s` in steps of 2, checking each character to see if it is an uppercase vowel. If it is, it increments the count. Finally, it returns the count."}
{"task_id": "HumanEval/99", "solution": "Here is a Python function that meets the requirements:\n\n```Python\ndef closest_integer(value):\n    return round(float(value))\n```\n\nThis function takes a string representing a number, converts it to a float, and then rounds it to the nearest integer. If the number is equidistant between two integers, it rounds away from zero."}
{"task_id": "HumanEval/100", "solution": "Here is a Python function that implements the described functionality:\n\n```Python\ndef make_a_pile(n):\n    result = [n]\n    i = 1\n    while n > 0:\n        if n % 2 == 1:\n            n -= 1\n            result.append(result[-1] + 2)\n        else:\n            n -= 2\n            result.append(result[-1] + 2)\n    return result\n```\n\nThis function starts by initializing a list `result` with the number of stones in the first level. It then enters a loop that continues until there are no more stones left. In each iteration of the loop, it checks whether the number of stones is odd or even. If it's odd, it subtracts 1 from the number of stones and adds the next odd number to the list. If it's even, it subtracts 2 from the number of stones and adds the next even number to the list. Finally, it returns the list of numbers of stones in each level."}
{"task_id": "HumanEval/101", "solution": "Here is a Python function that splits a string of words separated by commas or spaces into a list of words:\n\n```\ndef words_string(s):\n    return s.split()\n```\n\nThis function uses the built-in `split()` function in Python, which splits a string into a list of words based on a specified separator. In this case, the separator is a space or a comma."}
{"task_id": "HumanEval/102", "solution": "Here is a Python function that meets the requirements:\n\n```\ndef choose_num(x, y):\n    max_even = -1\n    for i in range(x, y+1):\n        if i % 2 == 0 and i > max_even:\n            max_even = i\n    return max_even\n```\n\nThis function iterates over the range from x to y (inclusive), checks if each number is even, and if it is, checks if it is greater than the current maximum even number. If it is, it updates the maximum even number. Finally, it returns the maximum even number. If no even number is found, it returns -1."}
{"task_id": "HumanEval/103", "solution": "Here is a Python function that meets the requirements:\n\n```Python\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        total = sum(range(n, m+1))\n        average = round(total / (m - n + 1))\n        return bin(average)[2:]\n```\n\nThis function first checks if n is greater than m. If it is, it returns -1. If not, it calculates the sum of all numbers from n to m, calculates the average, rounds it up to the nearest integer, and converts it to binary. The bin() function returns a string that starts with '0b', so we use [2:] to remove the first two characters."}
{"task_id": "HumanEval/104", "solution": "Here is a Python function that meets the requirements:\n\n```Python\ndef unique_digits(x):\n    return sorted([i for i in x if not any(int(digit) % 2 == 0 for digit in str(i))])\n```\n\nThis function works by first creating a list of numbers from the input list that do not have any even digits. It does this by iterating over each number in the input list, converting it to a string, and checking if any of the digits in the string are even. If none of the digits are even, the number is added to the list. The function then sorts the list and returns it."}
{"task_id": "HumanEval/105", "solution": "Here is a Python function that meets the requirements:\n\n```Python\ndef by_length(arr):\n    if not arr:\n        return []\n    arr = sorted([x for x in arr if 1 <= x <= 9])\n    arr = arr[::-1]\n    return [str(x) + ' ' + ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'][x-1] for x in arr]\n```\n\nThis function first checks if the array is empty. If it is, it returns an empty array. Then it filters the array to only include numbers between 1 and 9, sorts the array, reverses the array, and finally converts each number to its corresponding name."}
{"task_id": "HumanEval/106", "solution": "Here is a Python function that meets the requirements:\n\n```Python\ndef f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i * (i-1) * (i-2) * ... * 1)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n```\n\nThis function iterates over the range from 1 to n (inclusive), and for each number, it checks if it's even or odd. If it's even, it calculates the factorial of the number and adds it to the result list. If it's odd, it calculates the sum of the numbers from 1 to the number and adds it to the result list. Finally, it returns the result list."}
{"task_id": "HumanEval/107", "solution": "Here is a Python function that meets the requirements:\n\n```Python\ndef even_odd_palindrome(n):\n    even_palindromes = 0\n    odd_palindromes = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_palindromes += 1\n            else:\n                odd_palindromes += 1\n    return (even_palindromes, odd_palindromes)\n```\n\nThis function works by iterating over all numbers from 1 to n, checking if each number is a palindrome by comparing it to its reverse, and then counting the number of even and odd palindromes."}
{"task_id": "HumanEval/108", "solution": "Here is a Python function that meets the requirements:\n\n```Python\ndef count_nums(arr):\n    count = 0\n    for num in arr:\n        if num < 0:\n            num = str(num)[1:]\n        else:\n            num = str(num)\n        if sum(int(digit) for digit in num) > 0:\n            count += 1\n    return count\n```\n\nThis function works by iterating over each number in the array. If the number is negative, it removes the negative sign and converts the number to a string. Then it checks if the sum of the digits in the string is greater than 0. If it is, it increments the count. Finally, it returns the count."}
{"task_id": "HumanEval/109", "solution": "Here is a Python function that can solve the problem:\n\n```Python\ndef move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    for i in range(len(arr)):\n        if arr[i] > arr[(i+1)%len(arr)]:\n            return False\n    return True\n```\n\nThis function works by checking if the array is sorted in non-decreasing order. It does this by comparing each element in the array to the next one. If it finds an element that is greater than the next one, it immediately returns False, because the array cannot be sorted in non-decreasing order. If it checks all elements and doesn't find any that are out of order, it returns True, because the array is sorted in non-decreasing order."}
{"task_id": "HumanEval/110", "solution": "Here is a Python function that can solve the problem:\n\n```Python\ndef exchange(lst1, lst2):\n    lst1.sort()\n    lst2.sort()\n    i = 0\n    j = 0\n    while i < len(lst1):\n        if j < len(lst2) and lst1[i] % 2 != 0:\n            if lst2[j] % 2 == 0:\n                lst1[i], lst2[j] = lst2[j], lst1[i]\n                i += 1\n                j += 1\n            else:\n                j += 1\n        else:\n            i += 1\n    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\"\n```\n\nThis function first sorts both lists. Then it iterates over the first list. If the current element is odd, it tries to find an even element in the second list to swap with. If it finds one, it swaps them and moves on to the next element in both lists. If it can't find an even element in the second list, it moves on to the next element in the first list. Finally, it checks if all elements in the first list are even and returns \"YES\" if they are, or \"NO\" if they are not."}
{"task_id": "HumanEval/111", "solution": "Here is a Python function that meets the requirements:\n\n```Python\ndef histogram(test):\n    if not test:\n        return {}\n    test = test.split()\n    letter_count = {}\n    for letter in test:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n    max_count = max(letter_count.values())\n    max_letters = [letter for letter, count in letter_count.items() if count == max_count]\n    return {letter: count for letter, count in letter_count.items() if letter in max_letters}\n```\n\nThis function first splits the input string into a list of letters. It then counts the occurrences of each letter and stores the counts in a dictionary. It finds the maximum count and then creates a new dictionary that only includes the letters with the maximum count."}
{"task_id": "HumanEval/112", "solution": "Here is a Python function that does what you described:\n\n```Python\ndef reverse_delete(s, c):\n    s = ''.join([i for i in s if i not in c])\n    return (s, s == s[::-1])\n```\n\nThis function first creates a new string `s` by removing all characters in `c` from `s`. It then checks if `s` is the same when reversed (`s[::-1]`) and returns a tuple with `s` and the result of the check."}
{"task_id": "HumanEval/113", "solution": "Here is a Python function that meets the requirements:\n\n```Python\ndef odd_count(lst):\n    return [f\"the number of odd elements {str(i).count('1') if str(i).count('1') > 0 else '0'}n the str{i}ng {i} of the {i}nput.\" for i in lst]\n```\n\nThis function takes a list of strings as input, and for each string, it counts the number of '1's in the string. If there are any '1's, it includes that number in the output string; otherwise, it includes '0'. The function then returns a list of these strings."}
{"task_id": "HumanEval/114", "solution": "Here is a Python function that solves the problem:\n\n```\ndef minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n    return min_sum\n```\n\nThis function iterates over the array of numbers, adding each number to a running total. If the running total becomes negative, it resets the running total to 0. It keeps track of the smallest sum it has seen so far, and returns that sum at the end."}
{"task_id": "HumanEval/115", "solution": "Here is a Python function that solves the problem:\n\n```Python\ndef max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)\n```\n\nThis function works by first summing up all the 1's in the grid to get the total amount of water. It then divides this total by the capacity of the bucket and uses the `math.ceil` function to round up to the nearest whole number, which is the number of trips needed to empty the wells."}
{"task_id": "HumanEval/116", "solution": "Here is a Python function that sorts a list of non-negative numbers by the number of 1's in their binary representation, and then by their decimal value:\n\n```\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n```\n\nThis function uses the built-in `sorted` function to sort the list. The `key` argument of the `sorted` function is a function that takes a list element and returns a value that will be used for sorting purposes. In this case, the key function is a lambda function that returns a tuple. The first element of the tuple is the number of 1's in the binary representation of the number (obtained by converting the number to a binary string and counting the number of '1's), and the second element is the number itself. The `sorted` function will first sort the list by the first element of the tuple (i.e., the number of 1's in the binary representation), and then by the second element (i.e., the number itself) if the first elements are equal."}
{"task_id": "HumanEval/117", "solution": "Here is a Python function that meets the requirements:\n\n```Python\ndef select_words(s, n):\n    words = s.split()\n    result = []\n    for word in words:\n        if len([char for char in word if char.lower() not in 'aeiou']) == n:\n            result.append(word)\n    return result\n```\n\nThis function splits the input string into words, then iterates over each word. It counts the number of consonants in each word by checking if the character is not in the string 'aeiou' (which contains all the vowels). If the number of consonants is equal to the input number n, the word is added to the result list. Finally, the function returns the result list."}
{"task_id": "HumanEval/118", "solution": "Here is a Python function that meets the requirements:\n\n```Python\ndef get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] in vowels:\n            if word[i-1] not in vowels and word[i+1] not in vowels:\n                return word[i]\n    return ''\n```\n\nThis function iterates over the word from right to left. It checks each character to see if it's a vowel. If it is, it checks the characters to its left and right to see if they are consonants. If they are, it returns the vowel. If it doesn't find a vowel between two consonants, it returns an empty string."}
{"task_id": "HumanEval/119", "solution": "Here is a Python function that can solve the problem:\n\n```\ndef match_parens(lst):\n    stack = []\n    for char in lst:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return 'No'\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return 'Yes'\n    else:\n        return 'No'\n```\n\nThis function works by using a stack to keep track of the open parentheses. When it encounters a closing parenthesis, it checks if the stack is empty. If it is, it means there are more closing parentheses than open ones, so it returns 'No'. If the stack is not empty, it pops the last open parenthesis from the stack. At the end, if the stack is empty, it means all parentheses were balanced, so it returns 'Yes'. If the stack is not empty, it means there are more open parentheses than closing ones, so it returns 'No'."}
{"task_id": "HumanEval/120", "solution": "Here is a Python function that meets the requirements:\n\n```\ndef maximum(arr, k):\n    arr.sort()\n    return arr[-k:]\n```\n\nThis function sorts the array in ascending order and then returns the last k elements of the array."}
{"task_id": "HumanEval/121", "solution": "Here is a Python function that meets the requirements:\n\n```\ndef solution(lst):\n    return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2 != 0)\n```\n\nThis function uses a generator expression to iterate over the list and check if the index is even and the number is odd. If both conditions are met, it adds the number to the sum."}
{"task_id": "HumanEval/122", "solution": "Here is a Python function that meets the requirements:\n\n```\ndef add_elements(arr, k):\n    return sum(num for num in arr[:k] if len(str(abs(num))) <= 2)\n```\n\nThis function works by iterating over the first k elements of the array, converting each number to a string, and checking if the length of the string is less than or equal to 2. If it is, the number is added to the sum. The function then returns the sum of these numbers."}
{"task_id": "HumanEval/123", "solution": "Here is a Python function that implements the Collatz sequence and returns a sorted list of odd numbers in the sequence:\n\n```Python\ndef get_odd_collatz(n):\n    sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3*n + 1\n        sequence.append(n)\n    return sorted([x for x in sequence if x % 2 != 0])\n```\n\nThis function starts with the input number `n` and generates the Collatz sequence until it reaches 1. It then filters the sequence to keep only the odd numbers and returns them in sorted order."}
{"task_id": "HumanEval/124", "solution": "Here is a Python function that checks if a date string is valid according to the rules you provided:\n\n```Python\ndef valid_date(date):\n    if not date:\n        return False\n    month, day, year = date.split('-')\n    if int(month) < 1 or int(month) > 12:\n        return False\n    if int(month) in [1, 3, 5, 7, 8, 10, 12]:\n        if int(day) < 1 or int(day) > 31:\n            return False\n    elif int(month) in [4, 6, 9, 11]:\n        if int(day) < 1 or int(day) > 30:\n            return False\n    elif int(month) == 2:\n        if int(day) < 1 or int(day) > 29:\n            return False\n    return True\n```\n\nThis function first checks if the date string is empty. If it is, it returns False. Then it splits the date string into month, day, and year. It checks if the month is valid (between 1 and 12), and if the day is valid for the given month. If the month is February, it also checks if the day is valid for February (29 or 28). If the date is valid according to these rules, the function returns True; otherwise, it returns False."}
{"task_id": "HumanEval/125", "solution": "Here is a Python function that meets the requirements:\n\n```Python\ndef split_words(txt):\n    words = txt.split()\n    if len(words) > 1:\n        return words\n    else:\n        if ',' in txt:\n            words = txt.split(',')\n            return words\n        else:\n            odd_count = 0\n            for char in txt.lower():\n                if ord(char) % 2 != 0:\n                    odd_count += 1\n            return odd_count\n```\n\nThis function first tries to split the input string on spaces. If there is more than one word, it returns the list of words. If there is only one word, it checks if there is a comma in the string. If there is, it splits the string on commas and returns the list of words. If there is no comma, it counts the number of lowercase letters that have an odd position in the alphabet and returns this count."}
{"task_id": "HumanEval/126", "solution": "Here is a Python function that meets the requirements:\n\n```Python\ndef is_sorted(lst):\n    if len(lst) == 0:\n        return True\n    if len(lst) == 1:\n        return True\n    if lst.count(lst[0]) > 1:\n        return False\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True\n```\n\nThis function first checks if the list is empty or has only one element. If it does, it returns True. Then it checks if the first element appears more than once in the list. If it does, it returns False. Finally, it checks if the list is sorted in ascending order. If it is, it returns True; otherwise, it returns False."}
{"task_id": "HumanEval/127", "solution": "Here is a Python function that meets the requirements:\n\n```Python\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if start1 > end1 or start2 > end2:\n        return \"NO\"\n    if start1 > start2:\n        start1, start2 = start2, start1\n        end1, end2 = end2, end1\n    if end1 < start2:\n        return \"NO\"\n    return (min(end1, end2), max(start1, start2))\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef check_prime(interval):\n    length = abs(interval[1] - interval[0])\n    return \"YES\" if is_prime(length) else \"NO\"\n```\n\nIn this code, the function `intersection` calculates the intersection of two intervals. The function `is_prime` checks if a number is prime. The function `check_prime` checks if the length of the intersection of two intervals is prime."}
{"task_id": "HumanEval/128", "solution": "Here is a Python function that meets the requirements:\n\n```Python\ndef prod_signs(arr):\n    if not arr:\n        return None\n    magnitude_sum = sum(abs(x) for x in arr)\n    sign_product = 1\n    for x in arr:\n        if x < 0:\n            sign_product *= -1\n    return magnitude_sum * sign_product\n```\n\nThis function first checks if the array is empty. If it is, it returns None. If the array is not empty, it calculates the sum of the magnitudes of the numbers in the array and the product of the signs of the numbers in the array. It then returns the product of the sum of the magnitudes and the product of the signs."}
{"task_id": "HumanEval/129", "solution": "Here is a Python function that solves the problem:\n\n```Python\ndef minPath(grid, k):\n    N = len(grid)\n    visited = [[False]*N for _ in range(N)]\n    min_path = []\n    min_path_value = float('inf')\n    for i in range(N):\n        for j in range(N):\n            if dfs(grid, i, j, k, visited, min_path, min_path_value):\n                return min_path\n    return []\n\ndef dfs(grid, i, j, k, visited, path, min_path_value):\n    N = len(grid)\n    if k == 0:\n        if path not in min_path_value:\n            min_path_value = path\n        return False\n    if i < 0 or i >= N or j < 0 or j >= N or visited[i][j]:\n        return False\n    visited[i][j] = True\n    path.append(grid[i][j])\n    for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n        if dfs(grid, x, y, k-1, visited, path, min_path_value):\n            return True\n    visited[i][j] = False\n    path.pop()\n    return False\n```\n\nThis function uses a depth-first search (DFS) to find the minimum path. It starts from each cell in the grid and explores all possible paths of length k. It keeps track of the minimum path found so far and returns it when it is done."}
{"task_id": "HumanEval/130", "solution": "Here is a Python function that generates the Tribonacci sequence up to the nth term:\n\n```Python\ndef tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        sequence = [1, 3, 2]\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                sequence.append(1 + i / 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        return sequence\n```\n\nThis function first checks if n is 0, 1, or 2, and returns the corresponding sequence. For n greater than 2, it initializes the sequence with the first three terms, then iterates from 3 to n, appending the next term to the sequence based on whether n is even or odd."}
{"task_id": "HumanEval/131", "solution": "Here is a Python function that meets the requirements:\n\n```\ndef digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product\n```\n\nThis function works by converting the input number into a string, then iterating over each character in the string. If the character is an odd digit, it multiplies the product by the digit. If all the digits are even, the function returns 0."}
{"task_id": "HumanEval/132", "solution": "Here is a Python function that meets the requirements:\n\n```Python\ndef is_nested(s):\n    stack = []\n    for char in s:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) > 0\n```\n\nThis function uses a stack to keep track of the opening brackets. When it encounters a closing bracket, it checks if the stack is empty. If it is, that means there's no matching opening bracket, so it returns False. If the stack is not empty, it pops the opening bracket from the stack. At the end of the function, it checks if the stack is empty. If it's not, that means there are unmatched opening brackets, so it returns True. If the stack is empty, that means all brackets were matched, so it returns False."}
{"task_id": "HumanEval/133", "solution": "Here is a Python function that meets the requirements:\n\n```\ndef sum_squares(lst):\n    return sum([round(x)**2 for x in lst])\n```\n\nThis function takes a list of numbers as input, rounds each number up to the nearest integer, squares each number, and then returns the sum of the squared numbers."}
{"task_id": "HumanEval/134", "solution": "Here is a Python function that meets the requirements:\n\n```Python\ndef check_if_last_char_is_a_letter(txt):\n    if len(txt) == 0:\n        return False\n    if txt[-1].isalpha():\n        if txt[-1] in ' '.join(txt.split()):\n            return False\n        else:\n            return True\n    else:\n        return False\n```\n\nThis function first checks if the string is empty. If it is, it returns False. Then it checks if the last character of the string is a letter. If it is, it checks if the letter is part of a word. If it is, it returns False. If it's not, it returns True. If the last character is not a letter, it returns False."}
{"task_id": "HumanEval/135", "solution": "Here is a Python function that does what you asked for:\n\n```\ndef can_arrange(arr):\n    for i in range(1, len(arr)):\n        if arr[i-1] > arr[i]:\n            return i-1\n    return -1\n```\n\nThis function iterates over the array, checking each element to see if it's less than the one before it. If it finds one, it returns the index of that element. If it doesn't find one, it returns -1."}
{"task_id": "HumanEval/136", "solution": "Here is a Python function that meets the requirements:\n\n```Python\ndef largest_smallest_integers(lst):\n    negative = [x for x in lst if x < 0]\n    positive = [x for x in lst if x > 0]\n    if negative:\n        a = max(negative)\n    else:\n        a = None\n    if positive:\n        b = min(positive)\n    else:\n        b = None\n    return (a, b)\n```\n\nThis function first creates two lists, one for negative numbers and one for positive numbers. It then checks if either list is empty, and if so, sets the corresponding variable to None. Finally, it returns a tuple of the maximum negative number and the minimum positive number."}
{"task_id": "HumanEval/137", "solution": "Here is a Python function that meets the requirements:\n\n```Python\ndef compare_one(a, b):\n    if isinstance(a, str) and isinstance(b, str):\n        if a.replace(',', '') > b.replace(',', ''):\n            return a\n        elif a.replace(',', '') < b.replace(',', ''):\n            return b\n        else:\n            return None\n    elif isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    else:\n        return None\n```\n\nThis function first checks if both inputs are strings. If they are, it compares them by removing the commas and comparing the resulting strings. If the inputs are not strings, it checks if they are both integers or floats. If they are, it compares them as numbers. If the inputs are not both strings or both numbers, it returns None."}
{"task_id": "HumanEval/138", "solution": "Here is a Python function that checks if a given number can be written as the sum of exactly 4 positive even numbers:\n\n```Python\ndef is_equal_to_sum_even(n):\n    for i in range(2, n+1, 2):\n        for j in range(i, n+1, 2):\n            for k in range(j, n+1, 2):\n                for l in range(k, n+1, 2):\n                    if i + j + k + l == n:\n                        return True\n    return False\n```\n\nThis function works by iterating over all possible combinations of four positive even numbers and checking if their sum equals the given number. If it finds a combination that sums up to the given number, it returns True. If it doesn't find any such combination, it returns False."}
{"task_id": "HumanEval/139", "solution": "Here is a Python function that calculates the Brazilian factorial:\n\n```Python\ndef special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        result *= math.factorial(i)\n    return result\n```\n\nThis function takes an integer `n` as input and calculates the Brazilian factorial by multiplying the factorial of each number from `n` down to 1. The result is then returned."}
{"task_id": "HumanEval/140", "solution": "Here is a Python function that does what you described:\n\n```\ndef fix_spaces(text):\n    text = text.replace(\" \", \"_\")\n    while \"  \" in text:\n        text = text.replace(\"  \", \"-\")\n    return text\n```\n\nThis function first replaces all spaces in the input string with underscores. Then, it enters a loop that continues until there are no more consecutive spaces in the string. In each iteration of the loop, it replaces all consecutive spaces with dashes."}
{"task_id": "HumanEval/141", "solution": "Here is a Python function that meets the requirements:\n\n```Python\ndef file_name_check(file_name):\n    if len(file_name) > 255:\n        return 'No'\n    if len([char for char in file_name if char.isdigit()]) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    if not file_name.split('.')[0][0].isalpha():\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n```\n\nThis function first checks if the file name is longer than 255 characters. If it is, it returns 'No'. Then it checks if there are more than three digits in the file name. If there are, it returns 'No'. Then it checks if there is exactly one dot in the file name. If there isn't, it returns 'No'. Then it checks if the substring before the dot starts with a Latin alphabet letter. If it doesn't, it returns 'No'. Finally, it checks if the substring after the dot is one of the allowed extensions. If it isn't, it returns 'No'. If all of these conditions are met, it returns 'Yes'."}
{"task_id": "HumanEval/142", "solution": "Here is a Python function that meets the requirements:\n\n```\ndef sum_squares(lst):\n    total = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += num ** 3\n    return total\n```\n\nThis function iterates over the list with the `enumerate` function, which returns both the index and the value of each element. It checks if the index is a multiple of 3 or 4, and if so, it squares or cubes the value and adds it to the total. Finally, it returns the total."}
{"task_id": "HumanEval/143", "solution": "Here is a Python function that meets the requirements:\n\n```Python\ndef words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)\n```\n\nThis function first defines a helper function `is_prime` to check if a number is prime. It then splits the input sentence into words, checks each word's length to see if it's prime, and if it is, adds it to the result list. Finally, it joins the result list into a string and returns it."}
{"task_id": "HumanEval/144", "solution": "Here is a Python function that meets the requirements:\n\n```Python\ndef simplify(x, n):\n    numerator1, denominator1 = map(int, x.split('/'))\n    numerator2, denominator2 = map(int, n.split('/'))\n    product_numerator = numerator1 * numerator2\n    product_denominator = denominator1 * denominator2\n    if product_numerator % product_denominator == 0:\n        return True\n    else:\n        return False\n```\n\nThis function takes two strings representing fractions as input, splits them into numerator and denominator, calculates the product of the two fractions, and checks if the product is a whole number. If the product is a whole number, the function returns True; otherwise, it returns False."}
{"task_id": "HumanEval/145", "solution": "Here is a Python function that sorts a list of integers based on the sum of their digits, in ascending order. If there are multiple items with the same sum of digits, it will order them based on their index in the original list:\n\n```Python\ndef order_by_points(nums):\n    nums.sort(key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))\n    return nums\n```\n\nThis function works by first converting each number to its absolute value, then converting it to a string and summing up the digits. It then sorts the list based on this sum, and if there are multiple items with the same sum, it sorts them based on their original index in the list."}
{"task_id": "HumanEval/146", "solution": "Here is a Python function that meets the requirements:\n\n```\ndef specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] % 2 != 0 and str(num)[-1] % 2 != 0:\n            count += 1\n    return count\n```\n\nThis function iterates over each number in the input list. If the number is greater than 10 and both the first and last digits are odd, it increments the count. Finally, it returns the count."}
{"task_id": "HumanEval/147", "solution": "Here is a Python function that solves the problem:\n\n```Python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            for k in range(j + 1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```\n\nThis function first creates a list `a` of length `n` with the values calculated according to the problem. Then it iterates over the list three times to find all valid triples. If the sum of the values of a triple is a multiple of 3, it increments the count. Finally, it returns the count."}
{"task_id": "HumanEval/148", "solution": "Here is a Python function that meets the requirements:\n\n```Python\ndef bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n        return tuple(planets[index1+1:index2+1])\n```\n\nThis function first checks if the input planets are valid. If they are not, it returns an empty tuple. If they are valid, it finds their indices in the list of planets, then returns a tuple of the planets between them, in order."}
{"task_id": "HumanEval/149", "solution": "Here is a Python function that meets the requirements:\n\n```Python\ndef sorted_list_sum(lst):\n    lst = [word for word in lst if len(word) % 2 == 0]\n    lst.sort(key=lambda x: (len(x), x))\n    return lst\n```\n\nThis function first filters out the strings with odd lengths from the input list. Then, it sorts the remaining strings based on their lengths and then alphabetically. The sorted list is then returned."}
{"task_id": "HumanEval/150", "solution": "Here is a Python function that meets the requirements:\n\n```\ndef x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    if is_prime(n):\n        return x\n    else:\n        return y\n```\n\nThis function first defines a helper function `is_prime` that checks if a number is prime. It then checks if the input number `n` is prime. If it is, the function returns `x`, otherwise it returns `y`."}
{"task_id": "HumanEval/151", "solution": "Here is a Python function that meets the requirements:\n\n```\ndef double_the_difference(lst):\n    return sum(i**2 for i in lst if isinstance(i, int) and i > 0)\n```\n\nThis function uses a generator expression to iterate over the list, and checks each number to see if it is an integer and greater than 0. If it is, it squares the number and adds it to the sum. If the list is empty, the function will return 0."}
{"task_id": "HumanEval/152", "solution": "Here is a Python function that meets the requirements:\n\n```\ndef compare(scores, guesses):\n    return [abs(score - guess) for score, guess in zip(scores, guesses)]\n```\n\nThis function uses a list comprehension to create a new list where each element is the absolute difference between the corresponding elements in the scores and guesses lists. The zip function is used to pair up the elements from the two lists."}
{"task_id": "HumanEval/153", "solution": "Here is a Python function that meets the requirements:\n\n```Python\ndef Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        return sum(1 for char in extension if char.isupper()) - sum(1 for char in extension if char.islower())\n\n    strongest_extension = max(extensions, key=calculate_strength)\n    return f\"{class_name}.{strongest_extension}\"\n```\n\nThis function calculates the strength of each extension by counting the number of uppercase letters and subtracting the number of lowercase letters. It then finds the extension with the highest strength and returns a string in the format \"ClassName.StrongestExtensionName\"."}
{"task_id": "HumanEval/154", "solution": "Here is a Python function that checks if a substring is present in a string, or if any rotation of the substring is present in the string:\n\n```\ndef cycpattern_check(s, t):\n    if len(t) > len(s):\n        return False\n    for i in range(len(s)):\n        if s[i:i+len(t)] == t:\n            return True\n    return False\n```\n\nThis function works by iterating over the string `s` and checking if the substring `t` is present at each position. If it finds a match, it returns `True`. If it doesn't find a match after checking all positions, it returns `False`."}
{"task_id": "HumanEval/155", "solution": "Here is a Python function that meets the requirements:\n\n```\ndef even_odd_count(num):\n    num = str(abs(num))  # Convert the number to a string and remove the negative sign\n    even = 0\n    odd = 0\n    for digit in num:\n        if int(digit) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n```\n\nThis function works by first converting the input number to a string and removing the negative sign if the number is negative. It then initializes two counters, one for even digits and one for odd digits. It then iterates over each digit in the string, checking if the digit is even or odd. If the digit is even, it increments the even counter; if the digit is odd, it increments the odd counter. Finally, it returns a tuple containing the number of even and odd digits."}
{"task_id": "HumanEval/156", "solution": "Here is a Python function that converts a number to its Roman numeral equivalent in lowercase:\n\n```Python\ndef int_to_mini_roman(number):\n    roman_numerals = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'}\n    roman = ''\n    for value in sorted(roman_numerals.keys(), reverse=True):\n        while number >= value:\n            roman += roman_numerals[value]\n            number -= value\n    return roman\n```\n\nThis function works by looping over the Roman numerals in descending order and subtracting the value of each numeral from the number as many times as possible. It then adds the corresponding Roman numeral to the result string."}
{"task_id": "HumanEval/157", "solution": "Here is a Python function that checks if three sides of a triangle form a right-angled triangle:\n\n```\nimport math\n\ndef right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    else:\n        return False\n```\n\nThis function first sorts the sides of the triangle in ascending order. Then it checks if the sum of the squares of the two shorter sides is equal to the square of the longest side. If it is, then the triangle is a right-angled triangle and the function returns True. Otherwise, it returns False."}
{"task_id": "HumanEval/158", "solution": "Here is a Python function that meets the requirements:\n\n```\ndef find_max(words):\n    if not words:\n        return \"\"\n    max_unique = 0\n    result = \"\"\n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_unique:\n            max_unique = len(unique_chars)\n            result = word\n        elif len(unique_chars) == max_unique:\n            result = min(result, word)\n    return result\n```\n\nThis function iterates over each word in the list, calculates the number of unique characters in the word, and keeps track of the word with the maximum number of unique characters. If there are multiple words with the same maximum number of unique characters, it returns the one that comes first in lexicographical order. If the list is empty, it returns an empty string."}
{"task_id": "HumanEval/159", "solution": "Here is a Python function that meets the requirements:\n\n```Python\ndef eat(number, need, remaining):\n    total = number + need\n    if total > remaining:\n        return [total - remaining, 0]\n    else:\n        return [total, remaining - total]\n```\n\nThis function first calculates the total number of carrots needed. If the total number of carrots needed is greater than the remaining number of carrots, it returns an array with the total number of carrots eaten and 0 remaining. If the total number of carrots needed is less than or equal to the remaining number of carrots, it returns an array with the total number of carrots eaten and the remaining number of carrots."}
{"task_id": "HumanEval/160", "solution": "Here is a Python function that meets the requirements:\n\n```Python\ndef do_algebra(operator, operand):\n    if len(operator) != len(operand) - 1:\n        return \"Error: Operator list must be one less than operand list\"\n    if len(operand) < 2:\n        return \"Error: Operand list must have at least two operands\"\n    if len(operator) < 1:\n        return \"Error: Operator list must have at least one operator\"\n    if not all(isinstance(x, int) for x in operand):\n        return \"Error: Operand list must contain only integers\"\n    if not all(x in ['+', '-', '*', '//', '**'] for x in operator):\n        return \"Error: Operator list must contain only basic algebra operations\"\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result\n```\n\nThis function first checks if the operator list is one less than the operand list, if the operand list has at least two operands, and if the operator list has at least one operator. It also checks if the operand list contains only integers and if the operator list contains only basic algebra operations. If any of these conditions are not met, the function returns an error message. If all conditions are met, the function evaluates the algebraic expression and returns the result."}
{"task_id": "HumanEval/161", "solution": "Here is a Python function that meets the requirements:\n\n```Python\ndef solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    return result[::-1]\n```\n\nThis function iterates over each character in the string. If the character is a letter, it checks if it is lowercase or uppercase and converts it to the opposite case. If the character is not a letter, it leaves it as is. Finally, it reverses the string and returns the result."}
{"task_id": "HumanEval/162", "solution": "Here is a Python function that meets the requirements:\n\n```Python\nimport hashlib\n\ndef string_to_md5(text):\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n```\n\nThis function takes a string as input, checks if it's empty, and if not, it calculates the MD5 hash of the string and returns it. If the string is empty, it returns None."}
{"task_id": "HumanEval/163", "solution": "Here is a Python function that meets the requirements:\n\n```Python\ndef generate_integers(a, b):\n    return sorted([i for i in range(a, b+1) if i % 2 == 0])\n```\n\nThis function generates a list of all the even numbers between `a` and `b` (inclusive), and then sorts the list in ascending order."}
